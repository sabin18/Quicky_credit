{"version":3,"sources":["loans.js"],"names":["Loan","loans","LoanId","foundLoan","find","loan","id","parseInt","data","insertloan","length","createdOn","moment","utc","format","firstname","lastname","email","status","repaid","tenor","amount","paymentInstallment","parseFloat","balance","interest","push"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA;IACQA,I;AACJ,kBAAa;AAAA;;AACX,SAAKC,KAAL,GAAW,EAAX;AACD;;AAED;;;;;4BACQC,M,EAAO;AACb,UAAMC,YAAU,KAAKF,KAAL,CAAWG,IAAX,CAAgB;AAAA,eAAMC,KAAKC,EAAL,KAAUC,SAASL,MAAT,CAAhB;AAAA,OAAhB,CAAhB;AACA,aAAOC,SAAP;AACD;;;+BAEUK,I,EAAK;AACd,UAAMC,aAAa;AACjBH,YAAG,KAAKL,KAAL,CAAWS,MAAX,GAAkB,CADJ;AAEjBC,mBAAUC,iBAAOC,GAAP,GAAaC,MAAb,CAAoB,qBAApB,CAFO;AAGjBC,mBAAUP,KAAKO,SAHE;AAIjBC,kBAASR,KAAKQ,QAJG;AAKjBC,eAAMT,KAAKS,KALM;AAMjBC,gBAAO,SANU;AAOjBC,gBAAO,KAPU;AAQjBC,eAAMZ,KAAKY,KARM;AASjBC,gBAAOb,KAAKa,MATK;AAUjBC,4BAAmB,CAACC,WAAWf,KAAKa,MAAhB,IAAwBE,WAAWf,KAAKa,MAAL,GAAY,CAAZ,GAAc,GAAzB,CAAzB,IAAwDE,WAAWf,KAAKY,KAAhB,CAV1D;AAWjBI,iBAAQD,WAAW,CAACA,WAAWf,KAAKa,MAAhB,IAAwBE,WAAWf,KAAKa,MAAL,GAAY,CAAZ,GAAc,GAAzB,CAAzB,IAAwDE,WAAWf,KAAKY,KAAhB,CAAxD,GAA+EZ,KAAKY,KAA/F,CAXS;AAYjBK,kBAASjB,KAAKa,MAAL,GAAY,CAAZ,GAAc;;AAZN,OAAnB;AAeA,WAAKpB,KAAL,CAAWyB,IAAX,CAAgBjB,UAAhB;AACA,aAAOA,UAAP;AACD;;;;;;kBAMU,IAAIT,IAAJ,E","file":"loans.js","sourceRoot":"C:/Users/PIH/Documents/challenge/models","sourcesContent":["import moment from 'moment';\r\nimport loans from \"../db/loans\";\r\n\r\n// Define a class for creating loan\r\n  class Loan {\r\n    constructor(){\r\n      this.loans=[];\r\n    }\r\n  \r\n    //Fetch Loan by id\r\n    findOne(LoanId){\r\n      const foundLoan=this.loans.find(loan=>loan.id===parseInt(LoanId));\r\n      return foundLoan;\r\n    }\r\n\r\n    createLoan(data){\r\n      const insertloan = {\r\n        id:this.loans.length+1,\r\n        createdOn:moment.utc().format('DD-MM-YYYY HH:MM:SS'),\r\n        firstname:data.firstname,\r\n        lastname:data.lastname, \r\n        email:data.email,\r\n        status:\"pending\",\r\n        repaid:false,\r\n        tenor:data.tenor,\r\n        amount:data.amount,\r\n        paymentInstallment:(parseFloat(data.amount)+parseFloat(data.amount*5/100))/parseFloat(data.tenor),\r\n        balance:parseFloat((parseFloat(data.amount)+parseFloat(data.amount*5/100))/parseFloat(data.tenor)*data.tenor),\r\n        interest:data.amount*5/100,\r\n        \r\n      };\r\n      this.loans.push(insertloan);\r\n      return insertloan;\r\n    }\r\n\r\n  }\r\n  \r\n    \r\n   \r\nexport default new Loan();"]}