{"version":3,"sources":["candidateController.js"],"names":["candidatesController","req","res","json","status","message","candidate","candidates","id","parseInt","length","newcandidate","office","party","push","params","find","onecandidates","onePost","error","findcandidate","findIndex","post","splice","filter","Posts"],"mappings":";;;;;;;;AAAA;;;;;;;;IAIMA,oB;;;;;;;kCACeC,G,EAAKC,G,EAAK;AAC3B,aAAOA,IAAIC,IAAJ,CAAS;AACdC,gBAAO,GADO;AAEdC,iBAAS,wBAFK;AAGdC,mBAAWC;AAHG,OAAT,CAAP;AAMD;;;qCAEuBN,G,EAAKC,G,EAAK;AAChC,UAAMM,KAAKC,SAASF,qBAAWG,MAApB,IAA8B,CAAzC;;AAEA,UAAMC,eAAe;AACnBH,cADmB;AAEnBI,gBAAO,CAFY;AAGnBC,eAAM,CAHa;AAInBP,mBAAU;;AAJS,OAArB;AAOAC,2BAAWO,IAAX,CAAgBH,YAAhB;AACA,aAAOT,IAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAC1BC,gBAAO,GADmB;AAE1BC,iBAAS;AAFiB,OAArB,CAAP;AAKH;;AAED;;;;oCACuBJ,G,EAAKC,G,EAAK;AAAA,UACrBM,EADqB,GACdP,IAAIc,MADU,CACrBP,EADqB;;AAE7B,UAAMF,YAAYC,qBAAWS,IAAX,CAAgB;AAAA,eAAiBC,cAAcT,EAAd,IAAoBA,EAArC;AAAA,OAAhB,CAAlB;AACA,UAAIF,SAAJ,EAAe;AACb,eAAOJ,IAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAC1BC,kBAAO,GADmB;AAE1BC,mBAAS,qBAFiB;AAG1Ba,mBAASZ;AAHiB,SAArB,CAAP;AAKD,OAND,MAMO;AACLJ,YAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACnBC,kBAAO,GADY;AAEnBe,iBAAO;AAFY,SAArB;AAID;AACF;AACF;;;;oCAEwBlB,G,EAAKC,G,EAAK;AAAA,UACzBM,EADyB,GAClBP,IAAIc,MADc,CACzBP,EADyB;;AAE/B,UAAMY,gBAAgBb,qBAAWc,SAAX,CAAqB,gBAAQ;AACjD,eAAOC,KAAKd,EAAL,IAAWC,SAASD,EAAT,EAAa,EAAb,CAAlB;AACD,OAFqB,CAAtB;;AAIA,UAAIY,gBAAe,CAAC,CAApB,EAAuB;;AAErBb,6BAAWgB,MAAX,CAAkBH,aAAlB,EAAgC,CAAhC;;AAEA,YAAMT,eAAeJ,qBAAWiB,MAAX,CAAkB,gBAAQ;AAC7C,iBAAOF,SAASF,aAAhB;AACD,SAFoB,CAArB;AAGAlB,YAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACnBC,kBAAO,GADY;AAEnBC,mBAAS,gCAFU;AAGnBoB,iBAAOL,cAAcZ;AAHF,SAArB;AAKD,OAZD,MAYO;AACLN,YAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACnBC,kBAAO,GADY;AAEnBe,iBAAO;AAFY,SAArB;AAID;AACF;;;;;;kBAKYnB,oB","file":"candidateController.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/Politico/controller","sourcesContent":["import candidates from \"../db/candidates\";\r\n\r\n\r\n\r\nclass candidatesController {\r\nstatic getcandidates(req, res) {\r\n    return res.json({\r\n      status:200,  \r\n      message: \"List of all candidates\",\r\n      candidate: candidates\r\n    });\r\n\r\n  }\r\n\r\n  static createcandidates(req, res) {\r\n    const id = parseInt(candidates.length) + 1;\r\n\r\n    const newcandidate = {\r\n      id,\r\n      office:1,\r\n      party:2,\r\n      candidate:3,\r\n      \r\n    };\r\n    candidates.push(newcandidate);\r\n    return res.status(200).json({  \r\n      status:200,\r\n      message: \"created a new candidate\"\r\n    });\r\n  \r\n}\r\n\r\n//get candidate by id\r\nstatic getOnecandidate(req, res) {\r\n    const { id } = req.params;\r\n    const candidate = candidates.find(onecandidates => onecandidates.id == id);\r\n    if (candidate) {\r\n      return res.status(200).json({\r\n        status:200,\r\n        message: \"one candidate found\",\r\n        onePost: candidate\r\n      });\r\n    } else {\r\n      res.status(404).json({\r\n        status:404,\r\n        error: \"no candidate found with that id\"\r\n      });\r\n    }\r\n  }\r\n //delete candidates\r\n\r\n  static deletecandidate(req, res) {\r\n    let { id } = req.params;\r\n    const findcandidate = candidates.findIndex(post => {\r\n      return post.id == parseInt(id, 10);\r\n    });\r\n    \r\n    if (findcandidate >-1) {\r\n\r\n      candidates.splice(findcandidate,1);\r\n      \r\n      const newcandidate = candidates.filter(post => {\r\n        return post !== findcandidate;\r\n      });\r\n      res.status(200).json({\r\n        status:200,\r\n        message: \"candidate successfully deleted\",\r\n        Posts: findcandidate.id,\r\n      });\r\n    } else {\r\n      res.status(404).json({\r\n        status:404,\r\n        error: \"could not delete a candidate\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\n}\r\nexport default candidatesController;\r\n\r\n\r\n\r\n\r\n"]}