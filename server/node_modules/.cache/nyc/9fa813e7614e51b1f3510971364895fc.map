{"version":3,"sources":["authentication.js"],"names":["encodeToken","user","payload","expiration","add","unix","iat","sub","token","jwt","encode","decodeToken","decoded","decode","accessTokenRequired","req","res","next","headers","undefined","status","send","error","now","decodedToken","body","userId","isadmin","adminTokenRequired"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,SAAdA,WAAc,CAACC,IAAD,EAAU;AAC5B,MAAMC,UAAU;AACdC,gBAAY,wBACTC,GADS,CACL,EADK,EACD,OADC,EAETC,IAFS,EADE;AAIdC,SAAK,wBAASD,IAAT,EAJS;AAKdE,SAAKN;AALS,GAAhB;AAOA,MAAMO,QAAQC,oBAAIC,MAAJ,CAAWR,OAAX,EAAoB,QAApB,CAAd;AACA,SAAOM,KAAP;AACD,CAVD;;AAYA,IAAMG,cAAc,SAAdA,WAAc,CAACH,KAAD,EAAW;AAC7B,MAAMI,UAAUH,oBAAII,MAAJ,CAAWL,KAAX,EAAkB,QAAlB,CAAhB;AACA,SAAOI,OAAP;AACD,CAHD;AAIA;AACA,IAAME,sBAAsB,SAAtBA,mBAAsB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,MACtCT,KADsC,GAC5BO,IAAIG,OADwB,CACtCV,KADsC;;AAE9C,MAAIA,UAAUW,SAAV,IAAuBX,UAAU,IAArC,EAA2C;AACzCQ,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,6BAAT,EAArB;AACD,GAFD,MAEO;AACL,QAAMC,MAAM,wBAASlB,IAAT,EAAZ;AACA,QAAMmB,eAAeb,YAAYH,KAAZ,CAArB;AACA,QAAIe,MAAMC,aAAarB,UAAvB,EAAmC;AACjCa,UAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,eAAT,EAArB;AACD,KAFD,MAEO;AACLP,UAAIU,IAAJ,CAASC,MAAT,GAAkBF,aAAajB,GAAb,CAAiBmB,MAAnC;AACAX,UAAIU,IAAJ,CAASE,OAAT,GAAmBH,aAAajB,GAAb,CAAiBoB,OAApC;AACAV;AACD;AACF;AACF,CAfD;;AAiBA,IAAMW,qBAAqB,SAArBA,kBAAqB,CAACb,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7C,MAAMT,QAAQO,IAAIG,OAAJ,CAAYV,KAA1B;AACA,MAAIA,SAASW,SAAb,EAAwB;AACtB,QAAMI,MAAM,wBAASlB,IAAT,EAAZ;AACA,QAAMmB,eAAeb,YAAYH,KAAZ,CAArB;AACA,QAAIe,MAAMC,aAAarB,UAAvB,EAAmC;AACjCa,UAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,eAAT,EAArB;AACD,KAFD,MAEO;AACLP,UAAIU,IAAJ,CAASC,MAAT,GAAkBF,aAAajB,GAAb,CAAiBmB,MAAnC;AACAX,UAAIU,IAAJ,CAASE,OAAT,GAAmBH,aAAajB,GAAb,CAAiBoB,OAApC;AACA,UAAIZ,IAAIU,IAAJ,CAASE,OAAT,KAAqB,MAAzB,EAAiC;AAC/BV;AACD,OAFD,MAEO;AACLD,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,6BAAT,EAArB;AACD;AACF;AACF,GAdD,MAcO;AACLN,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,6BAAT,EAArB;AACD;AACF,CAnBD;kBAoBe,EAAER,wCAAF,EAAuBd,wBAAvB,EAAoC4B,sCAApC,E","file":"authentication.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/politico2/helpers","sourcesContent":["import jwt from 'jwt-simple';\nimport moment from 'moment';\n\nconst encodeToken = (user) => {\n  const payload = {\n    expiration: moment()\n      .add(10, 'weeks')\n      .unix(),\n    iat: moment().unix(),\n    sub: user,\n  };\n  const token = jwt.encode(payload, 'secret');\n  return token;\n};\n\nconst decodeToken = (token) => {\n  const decoded = jwt.decode(token, 'secret');\n  return decoded;\n};\n// Access token required for a user\nconst accessTokenRequired = (req, res, next) => {\n  const { token } = req.headers;\n  if (token === undefined || token === null) {\n    res.status(400).send({ error: 'Not authorized to this page' });\n  } else {\n    const now = moment().unix();\n    const decodedToken = decodeToken(token);\n    if (now > decodedToken.expiration) {\n      res.status(400).send({ error: 'Token expired' });\n    } else {\n      req.body.userId = decodedToken.sub.userId;\n      req.body.isadmin = decodedToken.sub.isadmin;\n      next();\n    }\n  }\n};\n\nconst adminTokenRequired = (req, res, next) => {\n  const token = req.headers.token;\n  if (token != undefined) {\n    const now = moment().unix();\n    const decodedToken = decodeToken(token);\n    if (now > decodedToken.expiration) {\n      res.status(400).send({ error: 'Token expired' });\n    } else {\n      req.body.userId = decodedToken.sub.userId;\n      req.body.isadmin = decodedToken.sub.isadmin;\n      if (req.body.isadmin === 'true') {\n        next();\n      } else {\n        res.status(403).send({ error: 'Not authorized to this page' });\n      }\n    }\n  } else {\n    res.status(400).send({ error: 'Not authorized to this page' });\n  }\n};\nexport default { accessTokenRequired, encodeToken, adminTokenRequired };\n"]}