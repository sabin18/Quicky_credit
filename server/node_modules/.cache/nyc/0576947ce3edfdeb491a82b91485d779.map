{"version":3,"sources":["petitionController.js"],"names":["petitionsController","req","res","json","status","message","petition","petitions","id","parseInt","length","body","newpetition","createdon","moment","utc","format","createdby","office","push","params","find","onepetition","onePetition","error","findpetition","findIndex","post","splice","filter"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEMA,mB;;;;;;;gCAEaC,G,EAAKC,G,EAAK;AACzB,aAAOA,IAAIC,IAAJ,CAAS;AACfC,gBAAO,GADQ;AAEfC,iBAAS,uBAFM;AAGfC,kBAAUC;AAHK,OAAT,CAAP;AAKH;;AAED;;;;mCAEsBN,G,EAAKC,G,EAAK;AAC5B,UAAMM,KAAKC,SAASF,mBAAUG,MAAnB,IAA6B,CAAxC;AAD4B,UAErBC,IAFqB,GAEbV,IAAIU,IAFS,CAErBA,IAFqB;;AAG5B,UAAMC,cAAc;AAClBJ,cADkB;AAElBK,mBAAUC,iBAAOC,GAAP,GAAaC,MAAb,EAFQ;AAGlBC,mBAAU,CAHQ;AAIlBC,gBAAO,CAJW;AAKlBP;AALkB,OAApB;AAOAJ,yBAAUY,IAAV,CAAeP,WAAf;AACA,aAAOV,IAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAC1BC,gBAAO,GADmB;AAE1BC,iBAAS;AAFiB,OAArB,CAAP;AAID;;AAEH;;;;mCACsBJ,G,EAAKC,G,EAAK;AAAA,UACpBM,EADoB,GACbP,IAAImB,MADS,CACpBZ,EADoB;;AAE5B,UAAMF,WAAWC,mBAAUc,IAAV,CAAe;AAAA,eAAeC,YAAYd,EAAZ,IAAkBA,EAAjC;AAAA,OAAf,CAAjB;AACA,UAAIF,QAAJ,EAAc;AACZ,eAAOJ,IAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAC1BC,kBAAO,GADmB;AAE1BC,mBAAS,oBAFiB;AAG1BkB,uBAAajB;AAHa,SAArB,CAAP;AAKD,OAND,MAMO;AACLJ,YAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACnBC,kBAAO,GADY;AAEnBoB,iBAAO;AAFY,SAArB;AAID;AACF;;AAEH;;;;mCAEwBvB,G,EAAKC,G,EAAK;AAAA,UACxBM,EADwB,GACjBP,IAAImB,MADa,CACxBZ,EADwB;;AAE9B,UAAMiB,eAAelB,mBAAUmB,SAAV,CAAoB,gBAAQ;AAC/C,eAAOC,KAAKnB,EAAL,IAAWC,SAASD,EAAT,EAAa,EAAb,CAAlB;AACD,OAFoB,CAArB;AAGA,UAAIiB,eAAe,CAAC,CAApB,EAAsB;AACpBlB,2BAAUqB,MAAV,CAAiBH,YAAjB,EAA8B,CAA9B;AACA,YAAMb,cAAcL,mBAAUsB,MAAV,CAAiB,gBAAQ;AAC3C,iBAAOF,SAASF,YAAhB;AACD,SAFmB,CAApB;AAGAvB,YAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACnBC,kBAAO,GADY;AAEnBC,mBAAS,+BAFU;AAGnBC,oBAAUM;AAHS,SAArB;AAKD,OAVD,MAUO;AACLV,YAAIE,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AACnBC,kBAAO,GADY;AAEnBoB,iBAAO;AAFY,SAArB;AAID;AACF;;;;;;kBAKYxB,mB","file":"petitionController.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/Politico/controller","sourcesContent":["import petitions from \"../db/Petition\";\r\nimport moment from \"moment\";\r\n\r\nclass petitionsController {\r\n\r\nstatic getpetition(req, res) {\r\n    return res.json({\r\n     status:200,  \r\n     message: \"List of all petitions\",\r\n     petition: petitions\r\n   });\r\n} \r\n\r\n//create petition\r\n\r\nstatic createpetition(req, res) {\r\n    const id = parseInt(petitions.length) + 1;\r\n    const {body} = req.body;\r\n    const newpetition = {\r\n      id,\r\n      createdon:moment.utc().format(),\r\n      createdby:1,\r\n      office:3,\r\n      body,\r\n    };\r\n    petitions.push(newpetition);\r\n    return res.status(200).json({  \r\n      status:200,\r\n      message: \"created a new petition\"\r\n    });\r\n  }\r\n\r\n//get petition by id\r\nstatic getOnepetition(req, res) {\r\n    const { id } = req.params;\r\n    const petition = petitions.find(onepetition => onepetition.id == id);\r\n    if (petition) {\r\n      return res.status(200).json({\r\n        status:200,\r\n        message: \"one petition found\",\r\n        onePetition: petition\r\n      });\r\n    } else {\r\n      res.status(404).json({\r\n        status:404,\r\n        error: \"no petition found with that id\"\r\n      });\r\n    }\r\n  }\r\n\r\n//delete function\r\n\r\n  static deletepetition(req, res) {\r\n    let { id } = req.params;\r\n    const findpetition = petitions.findIndex(post => {\r\n      return post.id == parseInt(id, 10);\r\n    });\r\n    if (findpetition  >-1){\r\n      petitions.splice(findpetition,1);\r\n      const newpetition = petitions.filter(post => {\r\n        return post !== findpetition;\r\n      });\r\n      res.status(200).json({\r\n        status:200,\r\n        message: \"petition successfully deleted\",\r\n        petition: newpetition\r\n      });\r\n    } else {\r\n      res.status(404).json({\r\n        status:404,\r\n        error: \"could not find that a petition\"\r\n      });\r\n    }\r\n  }\r\n  }\r\n\r\n\r\n\r\nexport default petitionsController;"]}