{"version":3,"sources":["repaymentcontroller.js"],"names":["repaymentsController","req","res","status","json","message","repayments","loanid","params","paidamount","body","joi","validate","Schema","paidamountSchema","error","value","send","details","getloan","model","findOne","parseFloat","balance","Repayment","model1","createRepayments","id","getpayment","findOnepayments","length"],"mappings":";;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAGMA,oB;;;;;;;kCAEiBC,G,EAAKC,G,EAAK;AAC7B,aAAOA,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BE,iBAAS,wBAFiB;AAG1BC;AAH0B,OAArB,CAAP;AAKD;;AAED;;;;qCAEwBL,G,EAAKC,G,EAAK;AAAA,UACxBK,MADwB,GACbN,IAAIO,MADS,CACxBD,MADwB;AAAA,UAExBE,UAFwB,GAETR,IAAIS,IAFK,CAExBD,UAFwB;;AAAA,0BAGPE,cAAIC,QAAJ,CACvB;AACEH;AADF,OADuB,EAIvBI,0BAAOC,gBAJgB,CAHO;AAAA,UAGxBC,KAHwB,iBAGxBA,KAHwB;AAAA,UAGjBC,KAHiB,iBAGjBA,KAHiB;;AAShC,UAAID,KAAJ,EAAW;AACTb,YAAIC,MAAJ,CAAW,GAAX,EAAgBc,IAAhB,CAAqB,EAAEF,OAAOA,MAAMG,OAAN,CAAc,CAAd,EAAiBb,OAA1B,EAArB;AACD,OAFD,MAEO;AACL,YAAMc,UAAUC,gBAAMC,OAAN,CAAcd,MAAd,CAAhB;AACA,YAAIY,OAAJ,EAAa;AACX,cAAIG,WAAWH,QAAQI,OAAnB,IAA8Bd,UAAlC,EAA8C;AAC5C,mBAAOP,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,sBAAQ,GADkB;AAE1BE,uBAAS;AAFiB,aAArB,CAAP;AAID;AACD,cAAIc,QAAQhB,MAAR,IAAkB,UAAtB,EAAkC;AAChC,mBAAOD,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,sBAAQ,GADkB;AAE1BE,uBAAS;AAFiB,aAArB,CAAP;AAID;;AAED,cAAMmB,YAAYC,qBAAOC,gBAAP,CAAwBzB,IAAIS,IAA5B,EAAkCH,MAAlC,CAAlB;AACA,iBAAOL,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,oBAAQ,GADkB;AAE1BE,qBAAS,2BAFiB;AAG1BmB;AAH0B,WAArB,CAAP;AAKD;AACD,eAAOtB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,mBAAS;AAFiB,SAArB,CAAP;AAID;AACF;;AAED;;;;kCACqBJ,G,EAAKC,G,EAAK;AAAA,UACrByB,EADqB,GACd1B,IAAIO,MADU,CACrBmB,EADqB;;AAE7B,UAAMC,aAAaH,qBAAOI,eAAP,CAAuBF,EAAvB,CAAnB;AACA,UAAIC,WAAWE,MAAX,IAAmB,CAAvB,EAA0B;AACvB,eAAO5B,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC3BD,kBAAO,GADoB;AAE3BE,mBAAS,eAFkB;AAG3BuB;AAH2B,SAArB,CAAP;AAKF,OAND,MAOI;AACJ1B,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,kBAAQ,GADW;AAEnBY,iBAAO;AAFY,SAArB;AAID;AACF;;;;;;kBAKcf,oB","file":"repaymentcontroller.js","sourceRoot":"C:/Users/PIH/Documents/challenge/controller","sourcesContent":["\r\nimport joi from 'joi';\r\nimport repayments from '../models/repayments';\r\nimport Schema from '../helpers/inputvalidation';\r\nimport model from '../models/loans';\r\nimport model1 from '../models/repayments';\r\n\r\nclass repaymentsController {\r\n\r\n  static getrepayments(req, res) {\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'List of all repayments',\r\n      repayments,\r\n    });\r\n  }\r\n  \r\n  // create repayments function\r\n\r\n  static createrepayments(req, res) {\r\n    const { loanid } = req.params;\r\n    const { paidamount } = req.body;\r\n    const { error, value } = joi.validate(\r\n      {\r\n        paidamount,\r\n      },\r\n      Schema.paidamountSchema,\r\n    );\r\n    if (error) {\r\n      res.status(400).send({ error: error.details[0].message });\r\n    } else {\r\n      const getloan = model.findOne(loanid);\r\n      if (getloan) {\r\n        if (parseFloat(getloan.balance) < paidamount) {\r\n          return res.status(400).json({\r\n            status: 400,\r\n            message: 'you payed much money than that you must pay on the balance !',\r\n          });\r\n        }\r\n        if (getloan.status != 'approved') {\r\n          return res.status(400).json({\r\n            status: 400,\r\n            message: 'this loan is not approved !',\r\n          });\r\n        }\r\n\r\n        const Repayment = model1.createRepayments(req.body, loanid);\r\n        return res.status(200).json({\r\n          status: 200,\r\n          message: 'payment done successfully',\r\n          Repayment,\r\n        });\r\n      }\r\n      return res.status(400).json({\r\n        status: 400,\r\n        message: \"that loan doesn't exist\",\r\n      });\r\n    }\r\n  }\r\n  \r\n  // get payment by id\r\n  static getOnepayment(req, res) {\r\n    const { id } = req.params;\r\n    const getpayment = model1.findOnepayments(id);\r\n    if (getpayment.length>=1) {\r\n       return res.status(200).json({\r\n        status:200, \r\n        message: 'payment found',\r\n        getpayment,\r\n      });\r\n    }\r\n    else{\r\n    res.status(400).json({\r\n      status: 400,\r\n      error: 'no payment found with that loan id',\r\n    });\r\n  }\r\n}\r\n\r\n}\r\n\r\n\r\nexport default repaymentsController;\r\n"]}