{"version":3,"sources":["userscontroller.js"],"names":["userController","req","res","body","email","firstname","lastname","password","address","isadmin","joi","validate","Schema","userSchema","error","value","status","send","details","message","id","parseInt","users","length","token","authentication","encodeToken","userId","checkemail","find","oneusers","json","insertuser","push","user","params","oneuser","onePost","specificUser","getuser","updateuser"],"mappings":"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","file":"userscontroller.js","sourceRoot":"C:/Users/PIH/Documents/challenge/controller","sourcesContent":["//import passwordHash from 'password-hash';\r\nimport joi from 'joi';\r\nimport authentication from '../helpers/authentication';\r\nimport users from \"../models/user\";\r\nimport Schema from '../helpers/inputvalidation';\r\n\r\nclass userController {\r\n\r\n\r\nstatic createUser (req, res)  {\r\n    const {\r\n        email,firstname, lastname, password,address, isadmin,\r\n    } = req.body;\r\n    const { error, value } = joi.validate(\r\n      {\r\n        email,\r\n        firstname,\r\n        lastname, \r\n        password,\r\n        address,\r\n      },\r\n      Schema.userSchema,\r\n    );\r\n    if (error) {\r\n      res.status(400).send({ error: error.details[0].message });\r\n    } else {\r\n      // generate the id and pass it to a user\r\n      const id = parseInt(users.length) + 1;\r\n      const token = authentication.encodeToken({\r\n        email,\r\n        firstname,\r\n        lastname, \r\n        password,\r\n        address,\r\n        userId:id,\r\n        status:\"unverified\",\r\n        isadmin,\r\n      });\r\n      \r\n      const checkemail = users.find(oneusers => oneusers.email == req.body.email);\r\n      if (checkemail) {\r\n        return res.status(400).json({\r\n          \r\n          message: \"email already exist please use another email!\",  \r\n        });\r\n      } else {\r\n        const insertuser = {\r\n          id,\r\n          email,\r\n          firstname,\r\n          lastname, \r\n          password,\r\n          address,\r\n          status:\"unverified\",\r\n          isadmin,\r\n          \r\n        };\r\n        users.push(insertuser);\r\n      }\r\n     \r\n          res.status(200).send({\r\n            message: 'user registered successfully',\r\n            user: {\r\n              token, \r\n              id,\r\n              firstname,\r\n              lastname,\r\n              email,\r\n            },\r\n            \r\n          });\r\n       \r\n    }\r\n  };\r\n  \r\n  static getuser(req, res) {\r\n    return res.json({\r\n      status:200,  \r\n      message: \"List of all users\",\r\n      user: users\r\n    });\r\n}\r\n\r\n//get user by id\r\nstatic getOneuser(req, res) {\r\n  const { id } = req.params;\r\n  const user = users.find(oneuser => oneuser.id == id);\r\n  if (user) {\r\n    return res.status(200).json({\r\n      message: \"one user found\",\r\n      onePost: user\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no user found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n  // Login data processing\r\n  static login (req, res)  {\r\n    const { email, password } = req.body;\r\n    const specificUser = users.find(oneuser => oneuser.email == email);\r\n    if (!specificUser) {\r\n        return res.status(400).json({\r\n          \r\n          message: \"No user with that email !\",  \r\n        });\r\n      } else {\r\n    \r\n        if (specificUser) {\r\n          if ( specificUser.password==password) {\r\n            const {\r\n              firstname, lastname, email, password,\r\n            } = specificUser;\r\n            const user = {\r\n              firstname,\r\n              lastname,\r\n              email,\r\n              password,\r\n              isadmin: specificUser.isadmin,\r\n              id: specificUser.id,\r\n            };\r\n            const token = authentication.encodeToken(user);\r\n            res.status(200).send({\r\n              message: 'Logged in successfully',\r\n              token,\r\n              id: specificUser.id,\r\n              firstname,\r\n              lastname,\r\n              email,\r\n              \r\n            });\r\n          } else {\r\n            res.status(400).send({ error: 'incorrect Password !' });\r\n          }\r\n        } else {\r\n          res.status(400).send({ error: 'problem apair try again' });\r\n        }\r\n      \r\n      \r\n  };\r\n\r\n  }\r\n\r\n  //update function (patch)\r\nstatic verifyuser(req, res) {\r\n  const { email } = req.params;\r\n  \r\n  const getuser = users.find(updateuser => updateuser.email == email);\r\n  if (getuser) {\r\n    (getuser.status = req.body.status);\r\n    return res.status(201).json({\r\n      message: \"user is verified succesfully\",\r\n      user: getuser\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"can't find user with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default userController;"]}