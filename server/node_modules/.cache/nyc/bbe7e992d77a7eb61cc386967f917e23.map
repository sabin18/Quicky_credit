{"version":3,"sources":["controller.js"],"names":["postsController","req","res","json","message","posts","parties","status","users","offices","candidates","votes","petitions","id","parseInt","length","body","name","HQAddress","logourl","newparty","created_at","moment","utc","format","push","firstname","lastname","othername","email","phonenumber","passporturl","newuser","isadmin","newcandidate","office","party","candidate","newpetition","createdon","createdby","type","newoffice","params","user","find","oneuser","onePost","error","oneparties","oneoffice","onecandidates","vote","onevotes","petition","onepetition","updatePost","partyname","findparty","post","pop","filter","Posts","finduser","findcandidate","findoffice","findpetition"],"mappings":"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","file":"controller.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/Politico/controller","sourcesContent":["import users from \"../db/user\";\r\nimport parties from \"../db/parties\";\r\nimport offices from \"../db/office\";\r\nimport candidates from \"../db/candidates\";\r\nimport votes from \"../db/votes\";\r\nimport petitions from \"../db/Petition\";\r\nimport moment from \"moment\";\r\n\r\nclass postsController {\r\n  static getparties(req, res) {\r\n    if(req){\r\n    return res.json({\r\n      message: \"List of all parties\",\r\n      posts: parties\r\n\r\n    });\r\n  }\r\n}\r\n    static getuser(req, res) {\r\n        return res.json({\r\n          status:200,  \r\n          message: \"List of all users\",\r\n          posts: users\r\n        });\r\n    }\r\n\r\n        static getoffice(req, res) {\r\n            return res.json({\r\n              status:200,  \r\n              message: \"List of all offices\",\r\n              posts: offices\r\n            });\r\n  }\r\n\r\n  static getcandidates(req, res) {\r\n    return res.json({\r\n      status:200,  \r\n      message: \"List of all candidates\",\r\n      posts: candidates\r\n    });\r\n\r\n  }\r\n    static getvotes(req, res) {\r\n        return res.json({\r\n          status:200,  \r\n          message: \"List of all votes\",\r\n          posts: votes\r\n        });\r\n    }\r\n\r\n        static getpetition(req, res) {\r\n            return res.json({\r\n              status:200,  \r\n              message: \"List of all petitions\",\r\n              posts: petitions\r\n            });\r\n} \r\n\r\n//create function\r\nstatic createparties(req, res) {\r\n    const id = parseInt(parties.length) + 1;\r\n    const {name,HQAddress,logourl} = req.body;\r\n    const newparty = {\r\n      id,\r\n      name,\r\n      HQAddress,\r\n      logourl,\r\n      created_at: moment.utc().format()\r\n    };\r\n    parties.push(newparty);\r\n    return res.status(200).json({  \r\n      message: \"created a new party\"\r\n    });\r\n\r\n  }\r\n\r\n  static createuser(req, res) {\r\n    const id = parseInt(users.length) + 1;\r\n    const {firstname,lastname,othername,email,phonenumber,passporturl} = req.body;\r\n    const newuser = {\r\n      id,\r\n      firstname,\r\n      lastname,\r\n      othername,\r\n      email,\r\n      phonenumber,\r\n      passporturl,\r\n      isadmin:'false',\r\n      \r\n    };\r\n    users.push(newuser);\r\n    return res.status(200).json({  \r\n      message: \"created a new user\"\r\n    });\r\n  }\r\n\r\n  static createcandidates(req, res) {\r\n    const id = parseInt(candidates.length) + 1;\r\n\r\n    const newcandidate = {\r\n      id,\r\n      office:1,\r\n      party:2,\r\n      candidate:3,\r\n      \r\n    };\r\n    candidates.push(newcandidate);\r\n    return res.status(200).json({  \r\n      message: \"created a new candidate\"\r\n    });\r\n  }\r\n\r\n\r\n  static createpetition(req, res) {\r\n    const id = parseInt(petitions.length) + 1;\r\n\r\n    const {body} = req.body;\r\n    const newpetition = {\r\n      id,\r\n      createdon:moment.utc().format(),\r\n      createdby:1,\r\n      office:3,\r\n      body,\r\n    };\r\n    petitions.push(newpetition);\r\n    return res.status(200).json({  \r\n      message: \"created a new petition\"\r\n    });\r\n  }\r\n\r\n  \r\n\r\n  static createoffice(req, res) {\r\n    const id = parseInt(offices.length) + 1;\r\n    const {type,name}= req.body;\r\n    const newoffice = {\r\n      created_at: moment.utc().format(),\r\n      id,\r\n      type,\r\n      name,\r\n     \r\n    };\r\n    offices.push(newoffice);\r\n    return res.status(200).json({  \r\n      message: \"created a new office\"\r\n    });\r\n  }\r\n\r\n////////////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////////\r\n//get user by id\r\nstatic getOneuser(req, res) {\r\n  const { id } = req.params;\r\n  const user = users.find(oneuser => oneuser.id == id);\r\n  if (user) {\r\n    return res.status(200).json({\r\n      message: \"one user found\",\r\n      onePost: user\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no user found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get parties by id\r\nstatic getOneparty(req, res) {\r\n  const { id } = req.params;\r\n  const party = parties.find(oneparties => oneparties.id == id);\r\n  if (party) {\r\n    return res.status(200).json({\r\n      message: \"one party found\",\r\n      onePost: party\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no party found with that id\"\r\n    });\r\n  }\r\n}\r\n// get office by id\r\nstatic getOneoffice(req, res) {\r\n  const { id } = req.params;\r\n  const office = offices.find(oneoffice => oneoffice.id == id);\r\n  if (office) {\r\n    return res.status(200).json({\r\n      message: \"one office found\",\r\n      onePost: office\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no office found with that id\"\r\n    });\r\n  }\r\n}\r\n//get candidate by id\r\nstatic getOnecandidate(req, res) {\r\n  const { id } = req.params;\r\n  const candidate = candidates.find(onecandidates => onecandidates.id == id);\r\n  if (candidate) {\r\n    return res.status(200).json({\r\n      message: \"one candidate found\",\r\n      onePost: candidate\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no candidate found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get votes by id\r\nstatic getOnevote(req, res) {\r\n  const { id } = req.params;\r\n  const vote = votes.find(onevotes => onevotes.id == id);\r\n  if (vote) {\r\n    return res.status(200).json({\r\n      message: \"one vote found\",\r\n      onePost: vote\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no vote found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get petition by id\r\nstatic getOnepetition(req, res) {\r\n  const { id } = req.params;\r\n  const petition = petitions.find(onepetition => onepetition.id == id);\r\n  if (petition) {\r\n    return res.status(200).json({\r\n      message: \"one petition found\",\r\n      onePost: petition\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no petition found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//update data function\r\n\r\nstatic updateoffice(req, res) {\r\n  const { id } = req.params;\r\n  const office = offices.find(updatePost => updatePost.id == id);\r\n  if (office) {\r\n    (office.name = req.body.name), (office.type=req.body.type),(office.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"successfully updated\",\r\n      updatePost: office\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"office cannot be updated\"\r\n    });\r\n  }\r\n}\r\n \r\nstatic updateparty(req, res) {\r\n  const { id } = req.params;\r\n  const party = parties.find(updatePost => updatePost.id == id);\r\n  if (party) {\r\n    (party.name = req.body.name), (party.HQAddress=req.body.HQAddress), (party.logourl=req.body.logourl), (party.body = req.body.body);\r\n    return res.status(200).json({\r\n      message: \"successfully updated\",\r\n      updatePost: party\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      error: \"party cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n\r\n//update function (patch)\r\nstatic updatepartyname(req, res) {\r\n  const { id } = req.params;\r\n  const { name } = req.params;\r\n  const party = parties.find(updatePost => updatePost.id == id);\r\n  const partyname = parties.find(updatePost => updatePost.name == name);\r\n\r\n  if (party&&partyname) {\r\n    (party.name = req.body.name),(party.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"party successfully  updated\",\r\n      updatePost: party\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"party cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\nstatic updateuser(req, res) {\r\n  const { id } = req.params;\r\n  const user = users.find(updatePost => updatePost.id == id);\r\n  if (user) {\r\n        (user.firstname = req.body.firstname), (user.lastname=req.body.lastname), (user.othername=req.body.othername),(user.email=req.body.email),(user.phonenumber=req.body.phonenumber),(user.passporturl=req.body.passporturl),(user.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"user successfully updated\",\r\n      updatePost: user\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"user cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n// delete data functions \r\n\r\n  static deleteparties(req, res) {\r\n    let { id } = req.params;\r\n    const findparty = parties.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findparty) {\r\n      parties.pop(findparty);\r\n      const newparty = parties.filter(post => {\r\n        return post !== findparty;\r\n      });\r\n      res.status(200).json({\r\n        message: \"party successfully deleted\",\r\n        Posts: newparty\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a party\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static deleteuser(req, res) {\r\n    let { id } = req.params;\r\n    const finduser = users.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (finduser) {\r\n      users.pop(finduser);\r\n      const newuser = users.filter(post => {\r\n        return post !== finduser;\r\n      });\r\n      res.status(200).json({\r\n        message: \"user successfully deleted\",\r\n        Posts: newuser\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a user\"\r\n      });\r\n    }\r\n  }\r\n\r\n  \r\n  static deletecandidate(req, res) {\r\n    let { id } = req.params;\r\n    const findcandidate = candidates.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findcandidate) {\r\n      candidates.pop(findcandidate);\r\n      const newcandidate = candidates.filter(post => {\r\n        return post !== findcandidate;\r\n      });\r\n      res.status(200).json({\r\n        message: \"candidate successfully deleted\",\r\n        Posts: newcandidate\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a candidate\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static deleteoffice(req, res) {\r\n    let { id } = req.params;\r\n    const findoffice = offices.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findoffice) {\r\n      offices.pop(findoffice);\r\n      const newoffice = offices.filter(post => {\r\n        return post !== findoffice;\r\n      });\r\n      res.status(200).json({\r\n        message: \"office successfully deleted\",\r\n        Posts: newoffice\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete an office\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\nstatic deletepetition(req, res) {\r\n  let { id } = req.params;\r\n  const findpetition = petitions.find(post => {\r\n    return post.id == id;\r\n  });\r\n  if (findpetition) {\r\n    petitions.pop(findpetition);\r\n    const newpetition = petitions.filter(post => {\r\n      return post !== findpetition;\r\n    });\r\n    res.status(200).json({\r\n      message: \"petition successfully deleted\",\r\n      Posts: newpetition\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"could not delete a petition\"\r\n    });\r\n  }\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default postsController;"]}