{"version":3,"sources":["authentication.js"],"names":["encodeToken","user","payload","expiration","add","unix","iat","sub","token","jwt","encode","decodeToken","decoded","decode","UseraccessRequired","req","res","next","headers","undefined","status","send","error","now","decodedToken","body","userId","isadmin","staus","adminAccessRequired","accessTokenRequired","adminTokenRequired"],"mappings":"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","file":"authentication.js","sourceRoot":"C:/Users/PIH/Documents/challenge/helpers","sourcesContent":["import jwt from 'jwt-simple';\nimport moment from 'moment';\n\n\nconst encodeToken = (user) => {\n  const payload = {\n    expiration: moment()\n      .add(2, 'hour')\n      .unix(),\n    iat: moment().unix(),\n    sub: user,\n  };\n  const token = jwt.encode(payload, 'mysecret');\n  return token;\n};\n\nconst decodeToken = (token) => {\n  const decoded = jwt.decode(token, 'mysecret');\n  return decoded;\n};\n// Access token required for a user\nconst UseraccessRequired = (req, res, next) => {\n  const { token } = req.headers;\n  if (token != '') {\n    if (token == undefined || token == null) {\n      res.status(403).send({\n        status: 403,\n        error: 'Not authorized to this page Login first!',\n      });\n    } else {\n      const now = moment().unix();\n      const decodedToken = decodeToken(token);\n      if (now > decodedToken.expiration) {\n        res.status(400).send({ error: 'Token expired' });\n      } else {\n        req.body.userId = decodedToken.sub.userId;\n        req.body.isadmin = decodedToken.sub.isadmin;\n        if (decodedToken.sub.status == 'verified') {\n          next();\n        } else {\n          res.status(403).send({\n            status: 403,\n            error: 'Not authorized to this page you must be verified before accessing to this page',\n          });\n        }\n      }\n    }\n  } else {\n    res.status(400).send({\n      staus: 400,\n      error: 'Token needed to get access to this page',\n    });\n  }\n};\n\nconst adminAccessRequired = (req, res, next) => {\n  const token = req.headers.token;\n  if (token != '') {\n    if (token != undefined) {\n      const now = moment().unix();\n      const decodedToken = decodeToken(token);\n      if (now > decodedToken.expiration) {\n        res.status(400).send({ error: 'Token expired' });\n      } else {\n        req.body.userId = decodedToken.sub.userId;\n        req.body.isadmin = decodedToken.sub.isadmin;\n        if (decodedToken.sub.isadmin == 'true') {\n          next();\n        } else {\n          res.status(403).send({\n            status: 403,\n            error: 'Not authorized to this page admin only',\n          });\n        }\n      }\n    }\n  } else {\n    res.status(400).send({ error: 'admin Token needed to get access to this page' });\n  }\n};\nexport default { accessTokenRequired, encodeToken, adminTokenRequired };\n"]}