{"version":3,"sources":["officecontroller.js"],"names":["controllers","GetofficeById","req","res","officeId","params","id","office","queries","getSpecificoffice","then","response","length","status","send","message","catch","console","log","error","createoffice","body","name","type","joi","validate","Schema","officeSchema","value","details","officeinsert","promise","insertoffice","Alloffice","getalloffices","getalloffice","offices","updateoffice","changeoffice","Updateoffice","err","deleteoffice"],"mappings":"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","file":"officecontroller.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/politico2/controller","sourcesContent":["// src/usingDB/controllers/Reflection.js\r\nimport joi from 'joi';\r\nimport uuidv1 from 'uuid/v1';\r\nimport office from '../models/officemodel';\r\nimport queries from '../db/Queries';\r\nimport execute from '../src/connection';\r\nimport Schema from '../helpers/Validationoffice';\r\n\r\nconst controllers = {};\r\n\r\n// fetch an office by id\r\nconst GetofficeById = (req, res) => {\r\n  const officeId = req.params.id;\r\n//send office\r\n  const office = execute(queries.getSpecificoffice,[officeId]);\r\n  office\r\n    .then((response) => {\r\n      if (response.length >=1) {\r\n        res.status(200).send(response[0]);\r\n      } else {\r\n        res.status(404).send({ message: 'sorry no office  found it is empty' });\r\n      }\r\n    })\r\n    .catch(error => console.log(error));\r\n};\r\n\r\n// create an office methode\r\nconst createoffice = (req, res) => {\r\n  const {\r\n    name,type\r\n  } = req.body;\r\n  const { error, value } = joi.validate(\r\n    {\r\n      name,\r\n      type,\r\n    },\r\n    \r\n     Schema.officeSchema,\r\n  );\r\n  if (error !== null) { \r\n    res.status(400).send({ error: error.details[0].message });\r\n  } else {\r\n    const id = uuidv1();\r\n    const officeinsert = new office(id, name,type);\r\n    const promise = execute(queries.insertoffice, [\r\n      officeinsert.id,\r\n      officeinsert.name,\r\n      officeinsert.type,\r\n      \r\n    ]);\r\n    \r\n    console.log(promise);\r\n    promise\r\n    .then((response) => {\r\n      if (response.length >= 1) {\r\n        res.status(201).send({\r\n          message: 'The office was successfully created',\r\n          response: response[0],\r\n        });\r\n\r\n      } else {\r\n        res.send({ error: 'Duplicate key error' });\r\n      }\r\n    })\r\n    .catch(error => res.status(400).send(error));\r\n}\r\n};\r\n\r\n// fetch all parties\r\nconst Alloffice = (req, res) => {\r\n  const getalloffices = execute(queries.getalloffice);\r\n     \r\n  getalloffices\r\n    .then((response) => {\r\n      if (response) {\r\n        res.send({ \r\n          status:200,\r\n          offices:\r\n          response });\r\n      } else {\r\n        res.send({ \r\n          offices:[],\r\n          message: 'There is no office at the moment.' });\r\n      }\r\n    })\r\n    .catch(error => console.log(error));\r\n  };\r\n \r\n \r\n  //update an office\r\nconst updateoffice = (req, res) => {\r\n  const { id } = req.params;\r\n   const {\r\n    name,type\r\n  } = req.body;\r\n  const { error, value } = joi.validate(\r\n    {\r\n      name,\r\n      type,\r\n    },\r\n     Schema.officeSchema,\r\n  );\r\n  if (error) {\r\n    res.status(400).send({ error: error.details[0].message });\r\n  } else {\r\n    const changeoffice = execute(queries.Updateoffice,[name,type,id]);\r\n    changeoffice\r\n      .then((response) => {\r\n        if (response) {\r\n          const message = 'The office was updated successfully';\r\n          res.status(200).send({ message, response: response[0] });\r\n        } else {\r\n          res.status(404).send({ error: 'No office with that id' });\r\n        }\r\n      })\r\n      .catch(err => res.status(400).send({ err }));\r\n  }\r\n};\r\n\r\n// Delete an office.\r\nconst deleteoffice = (req, res) => {\r\n  const officeId = req.params.id;\r\n//send office\r\nconst deleteoffice = execute(queries.deleteoffice,[officeId]);\r\n  deleteoffice\r\n  .then((response) => {\r\n    if (response) {\r\n      const message = 'The office was updated successfully';\r\n      res.status(200).send({ message, response: response[0] });\r\n    } \r\n    \r\n    else {\r\n      res.status(404).send({ error: 'No office with that id' });\r\n    }\r\n  })\r\n  .catch(err => res.status(400).send({ err }));\r\n}\r\n\r\n\r\n\r\ncontrollers.GetofficeById = GetofficeById;\r\ncontrollers.createoffice = createoffice;\r\ncontrollers.Alloffice = Alloffice;\r\ncontrollers.updateoffice = updateoffice;\r\ncontrollers.deleteoffice = deleteoffice;\r\n\r\n\r\nexport default controllers;"]}