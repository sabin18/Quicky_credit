{"version":3,"sources":["inputvalidation.js"],"names":["userSchema","joi","object","keys","firstname","string","alphanum","min","max","required","lastname","address","password","regex","email","isadmin","valid","trim","verifySchema","status","paidamountSchema","paidamount","number","integer","loanSchema","tenor","amount","approveSchema"],"mappings":";;;;;;AAAA;;;;;;AAGA,IAAMA,aAAaC,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACnCC,aAAWH,cAAII,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,EAAnC,EACRC,QADQ,EADwB;AAGnCC,YAAUT,cAAII,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,EAAnC,EACPC,QADO,EAHyB;AAKnCE,WAASV,cAAII,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,EAAnC,EACNC,QADM,EAL0B;AAOnCG,YAAUX,cAAII,MAAJ,GAAaQ,KAAb,CAAmB,qBAAnB,EAA0CJ,QAA1C,EAPyB;AAQnCK,SAAOb,cAAII,MAAJ,GAAaS,KAAb,GAAqBL,QAArB,EAR4B;AASnCM,WAASd,cAAII,MAAJ,GAAaE,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,CAAxB,EAA2BQ,KAA3B,CAAiC,CAAC,OAAD,EAAU,MAAV,CAAjC,EACNP,QADM,GAENQ,IAFM;;AAT0B,CAAlB,CAAnB;;AAgBA,IAAMC,eAAejB,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACrCgB,UAAQlB,cAAII,MAAJ,GAAaE,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,CAAxB,EAA2BQ,KAA3B,CAAiC,CAAC,UAAD,CAAjC,EACLP,QADK,GAELQ,IAFK;;AAD6B,CAAlB,CAArB;;AAOA,IAAMG,mBAAmBnB,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACzCkB,cAAYpB,cAAIqB,MAAJ,GAAaC,OAAb,GAAuBhB,GAAvB,CAA2B,CAA3B,EAA8BE,QAA9B;;AAD6B,CAAlB,CAAzB;;AAKA,IAAMe,aAAavB,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACnCC,aAAWH,cAAII,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,EAAnC,EACRC,QADQ,EADwB;AAGnCC,YAAUT,cAAII,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,EAAnC,EACPC,QADO,EAHyB;AAKnCK,SAAOb,cAAII,MAAJ,GAAaS,KAAb,GAAqBL,QAArB,EAL4B;AAMnCgB,SAAOxB,cAAIqB,MAAJ,GAAaC,OAAb,GAAuBhB,GAAvB,CAA2B,CAA3B,EAA8BC,GAA9B,CAAkC,EAAlC,EACJC,QADI,EAN4B;AAQnCiB,UAAQzB,cAAIqB,MAAJ,GAAaC,OAAb,GAAuBhB,GAAvB,CAA2B,CAA3B,EAA8BE,QAA9B;AAR2B,CAAlB,CAAnB;;AAWA,IAAMkB,gBAAgB1B,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACtCgB,UAAQlB,cAAII,MAAJ,GAAaE,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,CAAxB,EAA2BQ,KAA3B,CAAiC,CAAC,UAAD,CAAjC,EACLP,QADK,GAELQ,IAFK;AAD8B,CAAlB,CAAtB;;kBAOe;AACbjB,wBADa,EACDoB,kCADC,EACiBF,0BADjB,EAC+BM,sBAD/B,EAC2CG;AAD3C,C","file":"inputvalidation.js","sourceRoot":"C:/Users/PIH/Documents/challenge/helpers","sourcesContent":["import joi from 'joi';\n\n\nconst userSchema = joi.object().keys({\n  firstname: joi.string().alphanum().min(3).max(15)\n    .required(),\n  lastname: joi.string().alphanum().min(3).max(15)\n    .required(),\n  address: joi.string().alphanum().min(3).max(15)\n    .required(),\n  password: joi.string().regex(/^[a-zA-Z0-9]{3,30}$/).required(),\n  email: joi.string().email().required(),\n  isadmin: joi.string().min(5).max(5).valid(['false', 'true'])\n    .required()\n    .trim(),\n\n});\n\n\nconst verifySchema = joi.object().keys({\n  status: joi.string().min(8).max(8).valid(['verified'])\n    .required()\n    .trim(),\n\n});\n\nconst paidamountSchema = joi.object().keys({\n  paidamount: joi.number().integer().min(1).required(),\n\n});\n\nconst loanSchema = joi.object().keys({\n  firstname: joi.string().alphanum().min(3).max(15)\n    .required(),\n  lastname: joi.string().alphanum().min(3).max(15)\n    .required(),\n  email: joi.string().email().required(),\n  tenor: joi.number().integer().min(1).max(12)\n    .required(),\n  amount: joi.number().integer().min(1).required(),\n});\n\nconst approveSchema = joi.object().keys({\n  status: joi.string().min(7).max(7).valid(['approved'])\n    .required()\n    .trim(),\n});\n\n\nexport default {\n  userSchema, paidamountSchema, verifySchema, loanSchema, approveSchema,\n};\n"]}