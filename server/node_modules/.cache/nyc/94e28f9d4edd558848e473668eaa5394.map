{"version":3,"sources":["usercontroller.js"],"names":["userControllers","createUser","req","res","body","firstname","lastname","othername","email","phonenumber","password","passporturl","isadmin","joi","validate","Schema","userSchema","error","value","status","send","details","message","id","userin","User","token","authentication","encodeToken","userId","promise","queries","registerUser","then","response","user","catch","getUser","params","specificUser","login","checkUser","length","passwordHash","verify","userid","deleteUsers","parcels"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,kBAAkB,EAAxB;;AAEA;AACA,IAAMC,aAAa,SAAbA,UAAa,CAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAG3BD,IAAIE,IAHuB;AAAA,MAE7BC,SAF6B,aAE7BA,SAF6B;AAAA,MAElBC,QAFkB,aAElBA,QAFkB;AAAA,MAETC,SAFS,aAETA,SAFS;AAAA,MAECC,KAFD,aAECA,KAFD;AAAA,MAEOC,WAFP,aAEOA,WAFP;AAAA,MAEoBC,QAFpB,aAEoBA,QAFpB;AAAA,MAE6BC,WAF7B,aAE6BA,WAF7B;AAAA,MAEyCC,OAFzC,aAEyCA,OAFzC;;AAAA,sBAINC,cAAIC,QAAJ,CACvB;AACET,wBADF;AAEEC,sBAFF;AAGEC,wBAHF;AAIEC,gBAJF;AAKEC,4BALF;AAMEE,4BANF;AAOED,sBAPF;AAQEE;AARF,GADuB,EAWvBG,yBAAOC,UAXgB,CAJM;AAAA,MAIvBC,KAJuB,iBAIvBA,KAJuB;AAAA,MAIhBC,KAJgB,iBAIhBA,KAJgB;;AAiB/B,MAAID,KAAJ,EAAW;AACTd,QAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEH,OAAOA,MAAMI,OAAN,CAAc,CAAd,EAAiBC,OAA1B,EAArB;AACD,GAFD,MAEO;AACL;AACA,QAAMC,KAAK,kBAAX;AACA,QAAMC,SAAS,IAAIC,mBAAJ,CAASF,EAAT,EAAalB,SAAb,EAAwBC,QAAxB,EAAiCC,SAAjC,EAA2CC,KAA3C,EAAiDC,WAAjD,EAA6DE,WAA7D,EAAyED,QAAzE,EAAmFE,OAAnF,CAAf;AACA,QAAMc,QAAQC,yBAAeC,WAAf,CAA2B;AACvCvB,0BADuC;AAEvCC,wBAFuC;AAGvCC,0BAHuC;AAIvCC,kBAJuC;AAKvCC,8BALuC;AAMvCE,8BANuC;AAOvCD,wBAPuC;AAQvCmB,cAAQN,EAR+B;AASvCX,eAAQY,OAAOZ;AATwB,KAA3B,CAAd;AAWA,QAAMkB,UAAU,0BAAQC,kBAAQC,YAAhB,EAA8B,CAC5CR,OAAOD,EADqC,EAE5CC,OAAOnB,SAFqC,EAG5CmB,OAAOlB,QAHqC,EAI5CkB,OAAOjB,SAJqC,EAK5CiB,OAAOhB,KALqC,EAM5CgB,OAAOf,WANqC,EAO5Ce,OAAOb,WAPqC,EAQ5Ca,OAAOd,QARqC,EAS5Cc,OAAOZ,OATqC,CAA9B,CAAhB;AAWAkB,YACGG,IADH,CACQ,UAACC,QAAD,EAAc;AAAA,uBAGdA,SAAS,CAAT,CAHc;AAAA,UAEhB7B,SAFgB,cAEhBA,SAFgB;AAAA,UAELC,QAFK,cAELA,QAFK;AAAA,UAEKE,KAFL,cAEKA,KAFL;AAAA,UAEYI,OAFZ,cAEYA,OAFZ;;AAIlBT,UAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,gBAAO,GADY;AAEnBG,iBAAS,8BAFU;;AAInBa,cAAM;AACJZ,gBADI;AAEJlB,8BAFI;AAGJC,4BAHI;AAIJE;AAJI,SAJa;AAUnBkB;AAVmB,OAArB;AAYD,KAjBH,EAkBGU,KAlBH,CAkBS,UAACnB,KAAD,EAAW;AAChBd,UAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEH,YAAF,EAArB;AACD,KApBH;AAqBD;AACF,CAnED;;AAqEA;AACA,IAAMoB,UAAU,SAAVA,OAAU,CAACnC,GAAD,EAAMC,GAAN,EAAc;AAC5B,MAAMoB,KAAKrB,IAAIoC,MAAJ,CAAWf,EAAtB;AACA;AACA,MAAMgB,eAAe,0BAAQ,kCAAR,EAA4C,CAAChB,EAAD,CAA5C,CAArB;AACAgB,eACGN,IADH,CACQ,UAACC,QAAD,EAAc;AAClB,QAAIA,QAAJ,EAAc;AACZ/B,UAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBc,SAAS,CAAT,CAArB;AACD,KAFD,MAEO;AACL/B,UAAIiB,IAAJ,CAAS,EAAEE,SAAS,+BAAX,EAAT;AACD;AACF,GAPH,EAQGc,KARH,CAQS;AAAA,WAASjC,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEH,YAAF,EAArB,CAAT;AAAA,GART;AASD,CAbD;;AAeA;AACA,IAAMuB,QAAQ,SAARA,KAAQ,CAACtC,GAAD,EAAMC,GAAN,EAAc;AAAA,mBACED,IAAIE,IADN;AAAA,MAClBI,KADkB,cAClBA,KADkB;AAAA,MACXE,QADW,cACXA,QADW;;AAE1B,MAAM6B,eAAe,0BAAQR,kBAAQU,SAAhB,EAA0B,CAACjC,KAAD,CAA1B,CAArB;AACA+B,eACGN,IADH,CACQ,UAACC,QAAD,EAAc;AAClB,QAAIA,SAASQ,MAAT,GAAkB,CAAtB,EAAyB;AACvB,UAAIC,uBAAaC,MAAb,CAAoBlC,QAApB,EAA8BwB,SAAS,CAAT,EAAYxB,QAA1C,CAAJ,EAAyD;AAAA,0BAGnDwB,SAAS,CAAT,CAHmD;AAAA,YAErD7B,SAFqD,eAErDA,SAFqD;AAAA,YAE1CC,QAF0C,eAE1CA,QAF0C;AAAA,YAEjCC,SAFiC,eAEjCA,SAFiC;AAAA,YAEtBE,WAFsB,eAEtBA,WAFsB;AAAA,YAEVD,MAFU,eAEVA,KAFU;AAAA,YAEJG,WAFI,eAEJA,WAFI;AAAA,YAEQD,SAFR,eAEQA,QAFR;;AAIvD,YAAMyB,OAAO;AACX9B,8BADW;AAEXC,4BAFW;AAGXC,8BAHW;AAIXC,uBAJW;AAKXC,kCALW;AAMXE,kCANW;AAOXD,6BAPW;AAQXE,mBAASsB,SAAS,CAAT,EAAYtB,OARV;AASXiB,kBAAQK,SAAS,CAAT,EAAYX;AATT,SAAb;AAWA,YAAMG,QAAQC,yBAAeC,WAAf,CAA2BO,IAA3B,CAAd;AACAhC,YAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBE,mBAAS,wBADU;AAEnBI,sBAFmB;AAGnBrB,8BAHmB;AAInBC,4BAJmB;AAKnBuC,kBAAQX,SAAS,CAAT,EAAYX;AALD,SAArB;AAOD,OAvBD,MAuBO;AACLpB,YAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEH,OAAO,uBAAT,EAArB;AACD;AACF,KA3BD,MA2BO;AACLd,UAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEH,OAAO,yBAAT,EAArB;AACD;AACF,GAhCH,EAiCGmB,KAjCH,CAiCS,UAACnB,KAAD,EAAW;AAChBd,QAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEH,YAAF,EAArB;AACD,GAnCH;AAoCD,CAvCD;;AAyCA;AACA,IAAM6B,cAAc,SAAdA,WAAc,CAAC5C,GAAD,EAAMC,GAAN,EAAc;AAChC,MAAM4C,UAAU,0BAAQ,oBAAR,CAAhB;AACAA,UACGd,IADH,CACQ,UAACC,QAAD,EAAc;AAClB/B,QAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,SAAS,4BAAX,EAAyCY,kBAAzC,EAArB;AACD,GAHH,EAIGE,KAJH,CAIS,UAACnB,KAAD,EAAW;AAChBd,QAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEH,YAAF,EAArB;AACD,GANH;AAOD,CATD;;AAWA;AACAjB,gBAAgBqC,OAAhB,GAA0BA,OAA1B;AACArC,gBAAgBC,UAAhB,GAA6BA,UAA7B;AACAD,gBAAgBwC,KAAhB,GAAwBA,KAAxB;AACAxC,gBAAgB8C,WAAhB,GAA8BA,WAA9B;;kBAEe9C,e","file":"usercontroller.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/politico2/controller","sourcesContent":["import passwordHash from 'password-hash';\r\nimport joi from 'joi';\r\nimport uuidv1 from 'uuid/v1';\r\nimport queries from '../db/Queries';\r\nimport execute from '../src/connection';\r\nimport authentication from '../helpers/authentication';\r\nimport User from '../models/usermodel';\r\nimport Schema from '../helpers/userValidation';\r\n\r\nconst userControllers = {};\r\n\r\n// create a user\r\nconst createUser = (req, res) => {\r\n  const {\r\n    firstname, lastname,othername,email,phonenumber, password,passporturl,isadmin,\r\n  } = req.body;\r\n  const { error, value } = joi.validate(\r\n    {\r\n      firstname,\r\n      lastname,\r\n      othername,\r\n      email,\r\n      phonenumber,\r\n      passporturl,\r\n      password,\r\n      isadmin,\r\n    },\r\n    Schema.userSchema,\r\n  );\r\n  if (error) {\r\n    res.status(400).send({ error: error.details[0].message });\r\n  } else {\r\n    // generate the id and pass it to a user\r\n    const id = uuidv1();\r\n    const userin = new User(id, firstname, lastname,othername,email,phonenumber,passporturl,password, isadmin);\r\n    const token = authentication.encodeToken({\r\n      firstname,\r\n      lastname,\r\n      othername,\r\n      email,\r\n      phonenumber,\r\n      passporturl,\r\n      password,\r\n      userId: id,\r\n      isadmin:userin.isadmin,\r\n    });\r\n    const promise = execute(queries.registerUser, [\r\n      userin.id,\r\n      userin.firstname,\r\n      userin.lastname,\r\n      userin.othername,\r\n      userin.email,\r\n      userin.phonenumber,\r\n      userin.passporturl,\r\n      userin.password,\r\n      userin.isadmin,\r\n    ]);\r\n    promise\r\n      .then((response) => {\r\n        const {\r\n          firstname, lastname, email, isadmin,\r\n        } = response[0];\r\n        res.status(200).send({\r\n          status:200,\r\n          message: 'user registered successfully',\r\n          \r\n          user: {\r\n            id,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n          },\r\n          token,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        res.status(400).send({ error });\r\n      });\r\n  }\r\n};\r\n\r\n// get a user\r\nconst getUser = (req, res) => {\r\n  const id = req.params.id;\r\n  // const specificUser = users.find(item => item.id === id);\r\n  const specificUser = execute('SELECT * FROM users WHERE id =$1', [id]);\r\n  specificUser\r\n    .then((response) => {\r\n      if (response) {\r\n        res.status(200).send(response[0]);\r\n      } else {\r\n        res.send({ message: 'There is no user with that id' });\r\n      }\r\n    })\r\n    .catch(error => res.status(400).send({ error }));\r\n};\r\n\r\n// Login data processing\r\nconst login = (req, res) => {\r\n  const { email, password } = req.body;\r\n  const specificUser = execute(queries.checkUser,[email]);\r\n  specificUser\r\n    .then((response) => {\r\n      if (response.length > 0) {\r\n        if (passwordHash.verify(password, response[0].password)) {\r\n          const {\r\n            firstname, lastname,othername, phonenumber,email,passporturl,password,\r\n          } = response[0];\r\n          const user = {\r\n            firstname,\r\n            lastname,\r\n            othername,\r\n            email,\r\n            phonenumber,\r\n            passporturl,\r\n            password,\r\n            isadmin: response[0].isadmin,\r\n            userId: response[0].id,\r\n          };\r\n          const token = authentication.encodeToken(user);\r\n          res.status(200).send({\r\n            message: 'Logged in successfully',\r\n            token,\r\n            firstname,\r\n            lastname,\r\n            userid: response[0].id,\r\n          });\r\n        } else {\r\n          res.status(400).send({ error: 'Password not matching' });\r\n        }\r\n      } else {\r\n        res.status(400).send({ error: 'No user with that email' });\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      res.status(400).send({ error });\r\n    });\r\n};\r\n\r\n// Delete all users from users table.\r\nconst deleteUsers = (req, res) => {\r\n  const parcels = execute('DELETE FROM users ');\r\n  parcels\r\n    .then((response) => {\r\n      res.status(200).send({ message: 'Users deleted successfully', response });\r\n    })\r\n    .catch((error) => {\r\n      res.status(400).send({ error });\r\n    });\r\n};\r\n\r\n//userControllers.fetchAllUsers = fetchAllUsers;\r\nuserControllers.getUser = getUser;\r\nuserControllers.createUser = createUser;\r\nuserControllers.login = login;\r\nuserControllers.deleteUsers = deleteUsers;\r\n\r\nexport default userControllers;\r\n"]}