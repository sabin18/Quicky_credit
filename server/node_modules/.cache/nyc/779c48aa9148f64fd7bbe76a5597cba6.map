{"version":3,"sources":["candidatecontroller.js"],"names":["controllers","Getcandidate","req","res","candidateId","params","id","candidate","queries","getSpecificandidate","then","response","length","status","send","message","catch","console","log","error","createcandidates","officeId","body","joi","validate","office","Schema","candidateSchema","value","details","specific_candidate","specific_coffice","candidateinsert","promise","insertcandidates","parties"],"mappings":";;;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,EAApB;;AAGA;;AARA;AAHA;AAYA,IAAMC,eAAe,SAAfA,YAAe,CAACC,GAAD,EAAMC,GAAN,EAAc;AACjC,MAAMC,cAAcF,IAAIG,MAAJ,CAAWC,EAA/B;AACF,MAAMC,YAAY,0BAAQC,kBAAQC,mBAAhB,EAAoC,CAACL,WAAD,CAApC,CAAlB;AACAG,YACCG,IADD,CACM,UAACC,QAAD,EAAc;AAClB;AACA,QAAIA,SAASC,MAAT,IAAkB,CAAtB,EAAyB;AACvBT,UAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,SAAS,CAAT,CAArB;AACD,KAFD,MAEO;AACL;AACAR,UAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAQ,uCAAV,EAArB;AACD;AACF,GATD,EAUCC,KAVD,CAUO;AAAA,WAASC,QAAQC,GAAR,CAAYC,KAAZ,CAAT;AAAA,GAVP;AAWC,CAdD;AAeA;AACA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAAClB,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAMkB,WAAWnB,IAAIG,MAAJ,CAAWC,EAA5B;AADqC,MAGnCC,SAHmC,GAIjCL,IAAIoB,IAJ6B,CAGnCf,SAHmC;;AAAA,sBAKZgB,cAAIC,QAAJ,CACvB;AACEC,kBADF;AAEElB;AAFF,GADuB,EAMtBmB,0BAAOC,eANe,CALY;AAAA,MAK7BR,KAL6B,iBAK7BA,KAL6B;AAAA,MAKtBS,KALsB,iBAKtBA,KALsB;;AAarC,MAAIT,UAAU,IAAd,EAAoB;AAClBhB,QAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEK,OAAOA,MAAMU,OAAN,CAAc,CAAd,EAAiBd,OAA1B,EAArB;AACD,GAFD,MAEO;AACL,QAAMe,qBAAqB,0BAAQ,oCAAR,EAA8C,CAACvB,SAAD,CAA9C,CAA3B;AACAuB,uBAAmBxB,EAAnB;AACA,QAAMyB,mBAAmB,0BAAQ,qCAAR,EAA+C,CAACN,MAAD,CAA/C,CAAzB;AACAM,qBAAiBzB,EAAjB;;AAEA,QAAM0B,kBAAkB,IAAIzB,SAAJ,CAAcuB,mBAAmBxB,EAAjC,CAAxB;AACA,QAAM2B,UAAU,0BAAQzB,kBAAQ0B,gBAAR,CAA0Bb,QAA1B,CAAR,EAA6C,CAC3DW,gBAAgBF,kBAAhB,CAAmCxB,EADwB,EAE3D0B,gBAAgBD,gBAAhB,CAAiCzB,EAF0B,CAA7C,CAAhB;;AAMAW,YAAQC,GAAR,CAAYe,OAAZ;AACAA,YACCvB,IADD,CACM,UAACC,QAAD,EAAc;AAClB,UAAIA,SAASC,MAAT,IAAmB,CAAvB,EAA0B;AACxBT,YAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,kBAAO,GADY;AAEnBE,mBAAS,wCAFU;AAGnBoB,mBAASxB,SAAS,CAAT;AAHU,SAArB;AAMD,OAPD,MAOO;AACLR,YAAIW,IAAJ,CAAS,EAAEK,OAAO,qBAAT,EAAT;AACD;AACF,KAZD,EAaCH,KAbD,CAaO;AAAA,aAASb,IAAIU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBK,KAArB,CAAT;AAAA,KAbP;AAcH;AACA,CA5CD;;AAgDAnB,YAAYoB,gBAAZ,GAA+BA,gBAA/B;;kBAGepB,W","file":"candidatecontroller.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/politico2/controller","sourcesContent":["// src/usingDB/controllers/Reflection.js\r\nimport joi from 'joi';\r\nimport uuidv1 from 'uuid/v1';\r\n//import candidate from '../models/candidatemodel';\r\nimport queries from '../db/Queries';\r\nimport execute from '../src/connection';\r\nimport Schema from '../helpers/Validationparty';\r\n\r\nconst controllers = {};\r\n\r\n\r\n// fetch a party by id  method\r\nconst Getcandidate = (req, res) => {\r\n  const candidateId = req.params.id;\r\nconst candidate = execute(queries.getSpecificandidate,[candidateId]);\r\ncandidate\r\n.then((response) => {\r\n  // send it.\r\n  if (response.length >=1) {\r\n    res.status(200).send(response[0]);\r\n  } else {\r\n    // send the error on page\r\n    res.status(404).send({ message:'sorry no candidate  found it is empty' });\r\n  }\r\n})\r\n.catch(error => console.log(error));\r\n};\r\n// create candidates\r\nconst createcandidates = (req, res) => {\r\n  const officeId = req.params.id;\r\n  const {\r\n    candidate,\r\n  } = req.body;\r\n  const { error, value } = joi.validate(\r\n    {\r\n      office,\r\n      candidate,\r\n    },\r\n    \r\n     Schema.candidateSchema,\r\n  );\r\n  if (error !== null) { \r\n    res.status(400).send({ error: error.details[0].message });\r\n  } else {\r\n    const specific_candidate = execute('SELECT * FROM users WHERE name =$1', [candidate]);\r\n    specific_candidate.id;\r\n    const specific_coffice = execute('SELECT * FROM office WHERE name =$1', [office]);\r\n    specific_coffice.id;\r\n\r\n    const candidateinsert = new candidate(specific_candidate.id,);\r\n    const promise = execute(queries.insertcandidates [officeId], [\r\n      candidateinsert.specific_candidate.id,\r\n      candidateinsert.specific_coffice.id,\r\n    \r\n    ]);\r\n    \r\n    console.log(promise);\r\n    promise\r\n    .then((response) => {\r\n      if (response.length >= 1) {\r\n        res.status(201).send({\r\n          status:200,\r\n          message: 'The candidate was successfully created',\r\n          parties: response[0],\r\n        });\r\n\r\n      } else {\r\n        res.send({ error: 'Duplicate key error' });\r\n      }\r\n    })\r\n    .catch(error => res.status(400).send(error));\r\n}\r\n};\r\n\r\n\r\n\r\ncontrollers.createcandidates = createcandidates;\r\n\r\n\r\nexport default controllers;"]}