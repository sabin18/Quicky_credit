{"version":3,"sources":["controller.js"],"names":["postsController","req","res","status","json","message","party","parties","error","user","users","office","offices","candidate","candidates","posts","votes","petition","petitions","id","parseInt","length","body","name","HQAddress","logourl","newparty","created_at","moment","utc","format","push","firstname","lastname","othername","email","phonenumber","passporturl","newuser","isadmin","newcandidate","newpetition","createdon","createdby","type","newoffice","params","find","oneuser","onePost","oneparties","oneoffice","onecandidates","vote","onevotes","onepetition","updatePost","partyname","findparty","post","pop","filter","Posts","finduser","findcandidate","findoffice","findpetition"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEMA,e;;;;;;;+BACcC,G,EAAKC,G,EAAK;AAC1B,UAAGD,GAAH,EAAO;AACL,eAAOC,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC5BD,kBAAO,GADqB;AAE5BE,mBAAS,qBAFmB;AAG5BC,iBAAOC;AAHqB,SAArB,CAAP;AAKH,OANC,MAOG;AACHL,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGH;AACE;;;4BAKgBP,G,EAAKC,G,EAAK;AACvB,UAAGD,GAAH,EAAO;AACL,eAAOC,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC5BD,kBAAO,GADqB;AAE1BE,mBAAS,mBAFiB;AAG1BI,gBAAMC;AAHoB,SAArB,CAAP;AAKH,OANC,MAOG;AACHR,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGH;AACA;;;8BAGkBP,G,EAAKC,G,EAAK;AACzB,UAAGD,GAAH,EAAO;AACP,eAAOC,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC9BC,mBAAS,qBADqB;AAE9BM,kBAAQC;AAFsB,SAArB,CAAP;AAII,OALJ,MAOC;AACHV,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGH;AACA;;;kCAGsBP,G,EAAKC,G,EAAK;AAC7B,UAAGD,GAAH,EAAO;AACL,eAAOC,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC5BC,mBAAS,wBADmB;AAE5BQ,qBAAWC;AAFiB,SAArB,CAAP;AAIH,OALC,MAOG;AACHZ,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGF;AACA;;;6BAGkBP,G,EAAKC,G,EAAK;AACtB,aAAOA,IAAIE,IAAJ,CAAS;AACdD,gBAAO,GADO;AAEdE,iBAAS,mBAFK;AAGdU,eAAOC;AAHO,OAAT,CAAP;AAKH;;;gCAEsBf,G,EAAKC,G,EAAK;AAC3B,UAAGD,GAAH,EAAO;AACL,eAAOC,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,uBADiB;AAE1BY,oBAAUC;AAFgB,SAArB,CAAP;AAIX,OALS,MAML;AACHhB,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACA;;AAID;;;;kCACqBP,G,EAAKC,G,EAAK;AAC3B,UAAMiB,KAAKC,SAASb,kBAAQc,MAAjB,IAA2B,CAAtC;AAD2B,sBAEMpB,IAAIqB,IAFV;AAAA,UAEpBC,IAFoB,aAEpBA,IAFoB;AAAA,UAEfC,SAFe,aAEfA,SAFe;AAAA,UAELC,OAFK,aAELA,OAFK;;AAG3B,UAAMC,WAAW;AACfP,cADe;AAEfI,kBAFe;AAGfC,4BAHe;AAIfC,wBAJe;AAKfE,oBAAYC,iBAAOC,GAAP,GAAaC,MAAb;AALG,OAAjB;AAOAvB,wBAAQwB,IAAR,CAAaL,QAAb;AACA,aAAOxB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAID;;;+BAEiBJ,G,EAAKC,G,EAAK;AAC1B,UAAMiB,KAAKC,SAASV,eAAMW,MAAf,IAAyB,CAApC;AAD0B,uBAE2CpB,IAAIqB,IAF/C;AAAA,UAEnBU,SAFmB,cAEnBA,SAFmB;AAAA,UAETC,QAFS,cAETA,QAFS;AAAA,UAEAC,SAFA,cAEAA,SAFA;AAAA,UAEUC,KAFV,cAEUA,KAFV;AAAA,UAEgBC,WAFhB,cAEgBA,WAFhB;AAAA,UAE4BC,WAF5B,cAE4BA,WAF5B;;AAG1B,UAAMC,UAAU;AACdnB,cADc;AAEda,4BAFc;AAGdC,0BAHc;AAIdC,4BAJc;AAKdC,oBALc;AAMdC,gCANc;AAOdC,gCAPc;AAQdE,iBAAQ;;AARM,OAAhB;AAWA7B,qBAAMqB,IAAN,CAAWO,OAAX;AACA,aAAOpC,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAGD;;;qCAEuBJ,G,EAAKC,G,EAAK;AAChC,UAAMiB,KAAKC,SAASN,qBAAWO,MAApB,IAA8B,CAAzC;;AAEA,UAAMmB,eAAe;AACnBrB,cADmB;AAEnBR,gBAAO,CAFY;AAGnBL,eAAM,CAHa;AAInBO,mBAAU;;AAJS,OAArB;AAOAC,2BAAWiB,IAAX,CAAgBS,YAAhB;AACA,aAAOtC,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAGD;;;mCAGqBJ,G,EAAKC,G,EAAK;AAC9B,UAAMiB,KAAKC,SAASF,mBAAUG,MAAnB,IAA6B,CAAxC;;AAD8B,UAGvBC,IAHuB,GAGfrB,IAAIqB,IAHW,CAGvBA,IAHuB;;AAI9B,UAAMmB,cAAc;AAClBtB,cADkB;AAElBuB,mBAAUd,iBAAOC,GAAP,GAAaC,MAAb,EAFQ;AAGlBa,mBAAU,CAHQ;AAIlBhC,gBAAO,CAJW;AAKlBW;AALkB,OAApB;AAOAJ,yBAAUa,IAAV,CAAeU,WAAf;AACA,aAAOvC,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAGD;;;iCAImBJ,G,EAAKC,G,EAAK;AAC5B,UAAMiB,KAAKC,SAASR,iBAAQS,MAAjB,IAA2B,CAAtC;AAD4B,uBAETpB,IAAIqB,IAFK;AAAA,UAErBsB,IAFqB,cAErBA,IAFqB;AAAA,UAEhBrB,IAFgB,cAEhBA,IAFgB;;AAG5B,UAAMsB,YAAY;AAChBlB,oBAAYC,iBAAOC,GAAP,GAAaC,MAAb,EADI;AAEhBX,cAFgB;AAGhByB,kBAHgB;AAIhBrB;;AAJgB,OAAlB;AAOAX,uBAAQmB,IAAR,CAAac,SAAb;AACA,aAAO3C,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS;AADiB,OAArB,CAAP;AAGD;;AAEH;;AAEA;AACA;;;;+BACkBJ,G,EAAKC,G,EAAK;AAAA,UAClBiB,EADkB,GACXlB,IAAI6C,MADO,CAClB3B,EADkB;;AAE1B,UAAMV,OAAOC,eAAMqC,IAAN,CAAW;AAAA,eAAWC,QAAQ7B,EAAR,IAAcA,EAAzB;AAAA,OAAX,CAAb;AACA,UAAIV,IAAJ,EAAU;AACR,eAAOP,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,gBADiB;AAE1B4C,mBAASxC;AAFiB,SAArB,CAAP;AAID,OALD,MAKO;AACLP,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;AAED;;;;gCACmBP,G,EAAKC,G,EAAK;AAAA,UACnBiB,EADmB,GACZlB,IAAI6C,MADQ,CACnB3B,EADmB;;AAE3B,UAAMb,QAAQC,kBAAQwC,IAAR,CAAa;AAAA,eAAcG,WAAW/B,EAAX,IAAiBA,EAA/B;AAAA,OAAb,CAAd;AACA,UAAIb,KAAJ,EAAW;AACT,eAAOJ,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,iBADiB;AAE1B4C,mBAAS3C;AAFiB,SAArB,CAAP;AAID,OALD,MAKO;AACLJ,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;AACD;;;;iCACoBP,G,EAAKC,G,EAAK;AAAA,UACpBiB,EADoB,GACblB,IAAI6C,MADS,CACpB3B,EADoB;;AAE5B,UAAMR,SAASC,iBAAQmC,IAAR,CAAa;AAAA,eAAaI,UAAUhC,EAAV,IAAgBA,EAA7B;AAAA,OAAb,CAAf;AACA,UAAIR,MAAJ,EAAY;AACV,eAAOT,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,kBADiB;AAE1B4C,mBAAStC;AAFiB,SAArB,CAAP;AAID,OALD,MAKO;AACLT,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;AACD;;;;oCACuBP,G,EAAKC,G,EAAK;AAAA,UACvBiB,EADuB,GAChBlB,IAAI6C,MADY,CACvB3B,EADuB;;AAE/B,UAAMN,YAAYC,qBAAWiC,IAAX,CAAgB;AAAA,eAAiBK,cAAcjC,EAAd,IAAoBA,EAArC;AAAA,OAAhB,CAAlB;AACA,UAAIN,SAAJ,EAAe;AACb,eAAOX,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,qBADiB;AAE1B4C,mBAASpC;AAFiB,SAArB,CAAP;AAID,OALD,MAKO;AACLX,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;AAED;;;;+BACkBP,G,EAAKC,G,EAAK;AAAA,UAClBiB,EADkB,GACXlB,IAAI6C,MADO,CAClB3B,EADkB;;AAE1B,UAAMkC,OAAOrC,gBAAM+B,IAAN,CAAW;AAAA,eAAYO,SAASnC,EAAT,IAAeA,EAA3B;AAAA,OAAX,CAAb;AACA,UAAIkC,IAAJ,EAAU;AACR,eAAOnD,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,gBADiB;AAE1B4C,mBAASI;AAFiB,SAArB,CAAP;AAID,OALD,MAKO;AACLnD,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;AAED;;;;mCACsBP,G,EAAKC,G,EAAK;AAAA,UACtBiB,EADsB,GACflB,IAAI6C,MADW,CACtB3B,EADsB;;AAE9B,UAAMF,WAAWC,mBAAU6B,IAAV,CAAe;AAAA,eAAeQ,YAAYpC,EAAZ,IAAkBA,EAAjC;AAAA,OAAf,CAAjB;AACA,UAAIF,QAAJ,EAAc;AACZ,eAAOf,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,oBADiB;AAE1B4C,mBAAShC;AAFiB,SAArB,CAAP;AAID,OALD,MAKO;AACLf,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;AAED;;;;iCAEoBP,G,EAAKC,G,EAAK;AAAA,UACpBiB,EADoB,GACblB,IAAI6C,MADS,CACpB3B,EADoB;;AAE5B,UAAMR,SAASC,iBAAQmC,IAAR,CAAa;AAAA,eAAcS,WAAWrC,EAAX,IAAiBA,EAA/B;AAAA,OAAb,CAAf;AACA,UAAIR,MAAJ,EAAY;AACTA,eAAOY,IAAP,GAActB,IAAIqB,IAAJ,CAASC,IAAxB,EAAgCZ,OAAOiC,IAAP,GAAY3C,IAAIqB,IAAJ,CAASsB,IAArD,EAA4DjC,OAAOW,IAAP,GAAcrB,IAAIqB,IAAJ,CAASA,IAAnF;AACA,eAAOpB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,sBADiB;AAE1BmD,sBAAY7C;AAFc,SAArB,CAAP;AAID,OAND,MAMO;AACLT,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;;gCAEkBP,G,EAAKC,G,EAAK;AAAA,UACnBiB,EADmB,GACZlB,IAAI6C,MADQ,CACnB3B,EADmB;;AAE3B,UAAMb,QAAQC,kBAAQwC,IAAR,CAAa;AAAA,eAAcS,WAAWrC,EAAX,IAAiBA,EAA/B;AAAA,OAAb,CAAd;AACA,UAAIb,KAAJ,EAAW;AACRA,cAAMiB,IAAN,GAAatB,IAAIqB,IAAJ,CAASC,IAAvB,EAA+BjB,MAAMkB,SAAN,GAAgBvB,IAAIqB,IAAJ,CAASE,SAAxD,EAAqElB,MAAMmB,OAAN,GAAcxB,IAAIqB,IAAJ,CAASG,OAA5F,EAAuGnB,MAAMgB,IAAN,GAAarB,IAAIqB,IAAJ,CAASA,IAA7H;AACA,eAAOpB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,sBADiB;AAE1BmD,sBAAYlD;AAFc,SAArB,CAAP;AAID,OAND,MAMO;AACLJ,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;AAGD;;;;oCACuBP,G,EAAKC,G,EAAK;AAAA,UACvBiB,EADuB,GAChBlB,IAAI6C,MADY,CACvB3B,EADuB;AAAA,UAEvBI,IAFuB,GAEdtB,IAAI6C,MAFU,CAEvBvB,IAFuB;;AAG/B,UAAMjB,QAAQC,kBAAQwC,IAAR,CAAa;AAAA,eAAcS,WAAWrC,EAAX,IAAiBA,EAA/B;AAAA,OAAb,CAAd;AACA,UAAMsC,YAAYlD,kBAAQwC,IAAR,CAAa;AAAA,eAAcS,WAAWjC,IAAX,IAAmBA,IAAjC;AAAA,OAAb,CAAlB;;AAEA,UAAIjB,SAAOmD,SAAX,EAAsB;AACnBnD,cAAMiB,IAAN,GAAatB,IAAIqB,IAAJ,CAASC,IAAvB,EAA8BjB,MAAMgB,IAAN,GAAarB,IAAIqB,IAAJ,CAASA,IAApD;AACA,eAAOpB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,6BADiB;AAE1BmD,sBAAYlD;AAFc,SAArB,CAAP;AAID,OAND,MAMO;AACLJ,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;;+BAIiBP,G,EAAKC,G,EAAK;AAAA,UAClBiB,EADkB,GACXlB,IAAI6C,MADO,CAClB3B,EADkB;;AAE1B,UAAMV,OAAOC,eAAMqC,IAAN,CAAW;AAAA,eAAcS,WAAWrC,EAAX,IAAiBA,EAA/B;AAAA,OAAX,CAAb;AACA,UAAIV,IAAJ,EAAU;AACHA,aAAKuB,SAAL,GAAiB/B,IAAIqB,IAAJ,CAASU,SAA3B,EAAwCvB,KAAKwB,QAAL,GAAchC,IAAIqB,IAAJ,CAASW,QAA/D,EAA2ExB,KAAKyB,SAAL,GAAejC,IAAIqB,IAAJ,CAASY,SAAnG,EAA+GzB,KAAK0B,KAAL,GAAWlC,IAAIqB,IAAJ,CAASa,KAAnI,EAA2I1B,KAAK2B,WAAL,GAAiBnC,IAAIqB,IAAJ,CAASc,WAArK,EAAmL3B,KAAK4B,WAAL,GAAiBpC,IAAIqB,IAAJ,CAASe,WAA7M,EAA2N5B,KAAKa,IAAL,GAAYrB,IAAIqB,IAAJ,CAASA,IAAhP;AACJ,eAAOpB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,2BADiB;AAE1BmD,sBAAY/C;AAFc,SAArB,CAAP;AAID,OAND,MAMO;AACLP,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;AAED;;;;kCAEuBP,G,EAAKC,G,EAAK;AAAA,UACvBiB,EADuB,GAChBlB,IAAI6C,MADY,CACvB3B,EADuB;;AAE7B,UAAMuC,YAAYnD,kBAAQwC,IAAR,CAAa,gBAAQ;AACrC,eAAOY,KAAKxC,EAAL,IAAWA,EAAlB;AACD,OAFiB,CAAlB;AAGA,UAAIuC,SAAJ,EAAe;AACbnD,0BAAQqD,GAAR,CAAYF,SAAZ;AACA,YAAMhC,WAAWnB,kBAAQsD,MAAR,CAAe,gBAAQ;AACtC,iBAAOF,SAASD,SAAhB;AACD,SAFgB,CAAjB;AAGAxD,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,mBAAS,4BADU;AAEnByD,iBAAOpC;AAFY,SAArB;AAID,OATD,MASO;AACLxB,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;;+BAEiBP,G,EAAKC,G,EAAK;AAAA,UACpBiB,EADoB,GACblB,IAAI6C,MADS,CACpB3B,EADoB;;AAE1B,UAAM4C,WAAWrD,eAAMqC,IAAN,CAAW,gBAAQ;AAClC,eAAOY,KAAKxC,EAAL,IAAWA,EAAlB;AACD,OAFgB,CAAjB;AAGA,UAAI4C,QAAJ,EAAc;AACZrD,uBAAMkD,GAAN,CAAUG,QAAV;AACA,YAAMzB,UAAU5B,eAAMmD,MAAN,CAAa,gBAAQ;AACnC,iBAAOF,SAASI,QAAhB;AACD,SAFe,CAAhB;AAGA7D,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,mBAAS,2BADU;AAEnByD,iBAAOxB;AAFY,SAArB;AAID,OATD,MASO;AACLpC,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;;oCAGsBP,G,EAAKC,G,EAAK;AAAA,UACzBiB,EADyB,GAClBlB,IAAI6C,MADc,CACzB3B,EADyB;;AAE/B,UAAM6C,gBAAgBlD,qBAAWiC,IAAX,CAAgB,gBAAQ;AAC5C,eAAOY,KAAKxC,EAAL,IAAWA,EAAlB;AACD,OAFqB,CAAtB;AAGA,UAAI6C,aAAJ,EAAmB;AACjBlD,6BAAW8C,GAAX,CAAeI,aAAf;AACA,YAAMxB,eAAe1B,qBAAW+C,MAAX,CAAkB,gBAAQ;AAC7C,iBAAOF,SAASK,aAAhB;AACD,SAFoB,CAArB;AAGA9D,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,mBAAS,gCADU;AAEnByD,iBAAOtB;AAFY,SAArB;AAID,OATD,MASO;AACLtC,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;;iCAEmBP,G,EAAKC,G,EAAK;AAAA,UACtBiB,EADsB,GACflB,IAAI6C,MADW,CACtB3B,EADsB;;AAE5B,UAAM8C,aAAarD,iBAAQmC,IAAR,CAAa,gBAAQ;AACtC,eAAOY,KAAKxC,EAAL,IAAWA,EAAlB;AACD,OAFkB,CAAnB;AAGA,UAAI8C,UAAJ,EAAgB;AACdrD,yBAAQgD,GAAR,CAAYK,UAAZ;AACA,YAAMpB,YAAYjC,iBAAQiD,MAAR,CAAe,gBAAQ;AACvC,iBAAOF,SAASM,UAAhB;AACD,SAFiB,CAAlB;AAGA/D,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,mBAAS,6BADU;AAEnByD,iBAAOjB;AAFY,SAArB;AAID,OATD,MASO;AACL3C,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;;mCAImBP,G,EAAKC,G,EAAK;AAAA,UACxBiB,EADwB,GACjBlB,IAAI6C,MADa,CACxB3B,EADwB;;AAE9B,UAAM+C,eAAehD,mBAAU6B,IAAV,CAAe,gBAAQ;AAC1C,eAAOY,KAAKxC,EAAL,IAAWA,EAAlB;AACD,OAFoB,CAArB;AAGA,UAAI+C,YAAJ,EAAkB;AAChBhD,2BAAU0C,GAAV,CAAcM,YAAd;AACA,YAAMzB,cAAcvB,mBAAU2C,MAAV,CAAiB,gBAAQ;AAC3C,iBAAOF,SAASO,YAAhB;AACD,SAFmB,CAApB;AAGAhE,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,mBAAS,+BADU;AAEnByD,iBAAOrB;AAFY,SAArB;AAID,OATD,MASO;AACLvC,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBI,iBAAO;AADY,SAArB;AAGD;AACF;;;;;;kBAScR,e","file":"controller.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/Politico/controller","sourcesContent":["import users from \"../db/user\";\r\nimport parties from \"../db/parties\";\r\nimport offices from \"../db/office\";\r\nimport candidates from \"../db/candidates\";\r\nimport votes from \"../db/votes\";\r\nimport petitions from \"../db/Petition\";\r\nimport moment from \"moment\";\r\n\r\nclass postsController {\r\n  static getparties(req, res) {\r\n    if(req){\r\n      return res.status(200).json({\r\n      status:200,  \r\n      message: \"List of all parties\",\r\n      party: parties\r\n    });\r\n  }\r\n  else {\r\n    res.status(400).json({\r\n      error: \"check your connection\"\r\n    });\r\n}\r\n  }\r\n\r\n\r\n\r\n\r\n    static getuser(req, res) {\r\n      if(req){\r\n        return res.status(200).json({\r\n        status:200,  \r\n          message: \"List of all users\",\r\n          user: users\r\n        });\r\n    }\r\n    else {\r\n      res.status(400).json({\r\n        error: \"check your connection\"\r\n      });\r\n  }\r\n  }\r\n\r\n\r\n    static getoffice(req, res) {\r\n      if(req){\r\n      return res.status(200).json({  \r\n    message: \"List of all offices\",\r\n    office: offices\r\n            });\r\n         }\r\n\r\n  else {\r\n    res.status(400).json({\r\n      error: \"check your connection\"\r\n    });\r\n}\r\n}\r\n\r\n\r\n  static getcandidates(req, res) {\r\n    if(req){\r\n      return res.status(200).json({ \r\n      message: \"List of all candidates\",\r\n      candidate: candidates\r\n    });\r\n  }\r\n\r\n  else {\r\n    res.status(400).json({\r\n      error: \"check your connection\"\r\n    });\r\n }\r\n }\r\n\r\n \r\n    static getvotes(req, res) {\r\n        return res.json({\r\n          status:200,  \r\n          message: \"List of all votes\",\r\n          posts: votes\r\n        });\r\n    }\r\n\r\n        static getpetition(req, res) {\r\n          if(req){\r\n            return res.status(200).json({  \r\n              message: \"List of all petitions\",\r\n              petition: petitions\r\n            });\r\n} \r\nelse {\r\n  res.status(400).json({\r\n    error: \"check your connection\"\r\n  });\r\n}\r\n}\r\n\r\n\r\n\r\n//create function\r\nstatic createparties(req, res) {\r\n    const id = parseInt(parties.length) + 1;\r\n    const {name,HQAddress,logourl} = req.body;\r\n    const newparty = {\r\n      id,\r\n      name,\r\n      HQAddress,\r\n      logourl,\r\n      created_at: moment.utc().format()\r\n    };\r\n    parties.push(newparty);\r\n    return res.status(200).json({  \r\n      message: \"created a new party\"\r\n    });\r\n\r\n  }\r\n\r\n  static createuser(req, res) {\r\n    const id = parseInt(users.length) + 1;\r\n    const {firstname,lastname,othername,email,phonenumber,passporturl} = req.body;\r\n    const newuser = {\r\n      id,\r\n      firstname,\r\n      lastname,\r\n      othername,\r\n      email,\r\n      phonenumber,\r\n      passporturl,\r\n      isadmin:'false',\r\n      \r\n    };\r\n    users.push(newuser);\r\n    return res.status(200).json({  \r\n      message: \"created a new user\"\r\n    });\r\n  }\r\n\r\n  static createcandidates(req, res) {\r\n    const id = parseInt(candidates.length) + 1;\r\n\r\n    const newcandidate = {\r\n      id,\r\n      office:1,\r\n      party:2,\r\n      candidate:3,\r\n      \r\n    };\r\n    candidates.push(newcandidate);\r\n    return res.status(200).json({  \r\n      message: \"created a new candidate\"\r\n    });\r\n  }\r\n\r\n\r\n  static createpetition(req, res) {\r\n    const id = parseInt(petitions.length) + 1;\r\n\r\n    const {body} = req.body;\r\n    const newpetition = {\r\n      id,\r\n      createdon:moment.utc().format(),\r\n      createdby:1,\r\n      office:3,\r\n      body,\r\n    };\r\n    petitions.push(newpetition);\r\n    return res.status(200).json({  \r\n      message: \"created a new petition\"\r\n    });\r\n  }\r\n\r\n  \r\n\r\n  static createoffice(req, res) {\r\n    const id = parseInt(offices.length) + 1;\r\n    const {type,name}= req.body;\r\n    const newoffice = {\r\n      created_at: moment.utc().format(),\r\n      id,\r\n      type,\r\n      name,\r\n     \r\n    };\r\n    offices.push(newoffice);\r\n    return res.status(200).json({  \r\n      message: \"created a new office\"\r\n    });\r\n  }\r\n\r\n////////////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////////\r\n//get user by id\r\nstatic getOneuser(req, res) {\r\n  const { id } = req.params;\r\n  const user = users.find(oneuser => oneuser.id == id);\r\n  if (user) {\r\n    return res.status(200).json({\r\n      message: \"one user found\",\r\n      onePost: user\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no user found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get parties by id\r\nstatic getOneparty(req, res) {\r\n  const { id } = req.params;\r\n  const party = parties.find(oneparties => oneparties.id == id);\r\n  if (party) {\r\n    return res.status(200).json({\r\n      message: \"one party found\",\r\n      onePost: party\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no party found with that id\"\r\n    });\r\n  }\r\n}\r\n// get office by id\r\nstatic getOneoffice(req, res) {\r\n  const { id } = req.params;\r\n  const office = offices.find(oneoffice => oneoffice.id == id);\r\n  if (office) {\r\n    return res.status(200).json({\r\n      message: \"one office found\",\r\n      onePost: office\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no office found with that id\"\r\n    });\r\n  }\r\n}\r\n//get candidate by id\r\nstatic getOnecandidate(req, res) {\r\n  const { id } = req.params;\r\n  const candidate = candidates.find(onecandidates => onecandidates.id == id);\r\n  if (candidate) {\r\n    return res.status(200).json({\r\n      message: \"one candidate found\",\r\n      onePost: candidate\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no candidate found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get votes by id\r\nstatic getOnevote(req, res) {\r\n  const { id } = req.params;\r\n  const vote = votes.find(onevotes => onevotes.id == id);\r\n  if (vote) {\r\n    return res.status(200).json({\r\n      message: \"one vote found\",\r\n      onePost: vote\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no vote found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get petition by id\r\nstatic getOnepetition(req, res) {\r\n  const { id } = req.params;\r\n  const petition = petitions.find(onepetition => onepetition.id == id);\r\n  if (petition) {\r\n    return res.status(200).json({\r\n      message: \"one petition found\",\r\n      onePost: petition\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no petition found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//update data function\r\n\r\nstatic updateoffice(req, res) {\r\n  const { id } = req.params;\r\n  const office = offices.find(updatePost => updatePost.id == id);\r\n  if (office) {\r\n    (office.name = req.body.name), (office.type=req.body.type),(office.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"successfully updated\",\r\n      updatePost: office\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"office cannot be updated\"\r\n    });\r\n  }\r\n}\r\n \r\nstatic updateparty(req, res) {\r\n  const { id } = req.params;\r\n  const party = parties.find(updatePost => updatePost.id == id);\r\n  if (party) {\r\n    (party.name = req.body.name), (party.HQAddress=req.body.HQAddress), (party.logourl=req.body.logourl), (party.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"successfully updated\",\r\n      updatePost: party\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"party cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n\r\n//update function (patch)\r\nstatic updatepartyname(req, res) {\r\n  const { id } = req.params;\r\n  const { name } = req.params;\r\n  const party = parties.find(updatePost => updatePost.id == id);\r\n  const partyname = parties.find(updatePost => updatePost.name == name);\r\n\r\n  if (party&&partyname) {\r\n    (party.name = req.body.name),(party.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"party successfully  updated\",\r\n      updatePost: party\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"party cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\nstatic updateuser(req, res) {\r\n  const { id } = req.params;\r\n  const user = users.find(updatePost => updatePost.id == id);\r\n  if (user) {\r\n        (user.firstname = req.body.firstname), (user.lastname=req.body.lastname), (user.othername=req.body.othername),(user.email=req.body.email),(user.phonenumber=req.body.phonenumber),(user.passporturl=req.body.passporturl),(user.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"user successfully updated\",\r\n      updatePost: user\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"user cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n// delete data functions \r\n\r\n  static deleteparties(req, res) {\r\n    let { id } = req.params;\r\n    const findparty = parties.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findparty) {\r\n      parties.pop(findparty);\r\n      const newparty = parties.filter(post => {\r\n        return post !== findparty;\r\n      });\r\n      res.status(200).json({\r\n        message: \"party successfully deleted\",\r\n        Posts: newparty\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a party\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static deleteuser(req, res) {\r\n    let { id } = req.params;\r\n    const finduser = users.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (finduser) {\r\n      users.pop(finduser);\r\n      const newuser = users.filter(post => {\r\n        return post !== finduser;\r\n      });\r\n      res.status(200).json({\r\n        message: \"user successfully deleted\",\r\n        Posts: newuser\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a user\"\r\n      });\r\n    }\r\n  }\r\n\r\n  \r\n  static deletecandidate(req, res) {\r\n    let { id } = req.params;\r\n    const findcandidate = candidates.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findcandidate) {\r\n      candidates.pop(findcandidate);\r\n      const newcandidate = candidates.filter(post => {\r\n        return post !== findcandidate;\r\n      });\r\n      res.status(200).json({\r\n        message: \"candidate successfully deleted\",\r\n        Posts: newcandidate\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a candidate\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static deleteoffice(req, res) {\r\n    let { id } = req.params;\r\n    const findoffice = offices.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findoffice) {\r\n      offices.pop(findoffice);\r\n      const newoffice = offices.filter(post => {\r\n        return post !== findoffice;\r\n      });\r\n      res.status(200).json({\r\n        message: \"office successfully deleted\",\r\n        Posts: newoffice\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete an office\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\nstatic deletepetition(req, res) {\r\n  let { id } = req.params;\r\n  const findpetition = petitions.find(post => {\r\n    return post.id == id;\r\n  });\r\n  if (findpetition) {\r\n    petitions.pop(findpetition);\r\n    const newpetition = petitions.filter(post => {\r\n      return post !== findpetition;\r\n    });\r\n    res.status(200).json({\r\n      message: \"petition successfully deleted\",\r\n      Posts: newpetition\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"could not delete a petition\"\r\n    });\r\n  }\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default postsController;"]}