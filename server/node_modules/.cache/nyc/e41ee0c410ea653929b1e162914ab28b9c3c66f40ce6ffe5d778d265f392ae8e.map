{"version":3,"sources":["controller.js"],"names":["postsController","req","res","status","json","message","loan","loans","currentstatus","currentrepaid","checknotrepaid","find","oneloans","repaid","error","checkrepaid","candidate","repayments","id","parseInt","length","body","firstname","lastname","email","tenor","amount","checkloan","insertloan","createdOn","moment","utc","format","paymentInstallment","parseFloat","balance","interest","push","loanid","params","paidamount","getloan","updateloan","insertrepayment","loanId","monthlyInstallment","updatePost","user","users","oneuser","onePost","findloan","getpayment","onepayment","payment","name","party","parties","partyname","othername","phonenumber","passporturl","findparty","post","pop","newparty","filter","Posts","finduser","newuser","findcandidate","candidates","newcandidate","findoffice","offices","newoffice","findpetition","petitions","newpetition"],"mappings":"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","file":"controller.js","sourceRoot":"C:/Users/PIH/Documents/challenge/controller","sourcesContent":["import users from \"../models/user\";\r\nimport loans from \"../models/loans\";\r\nimport repayments from \"../models/repayments\";\r\nimport validationResult from \"express-validator/check\";\r\nimport moment from \"moment\";\r\n\r\nclass postsController {\r\n    \r\n//get function\r\n  static getloans(req, res) {\r\n            return res.status(200).json({\r\n              status:200,  \r\n              message: \"List of all loans\",\r\n              loan: loans\r\n            });\r\n  }\r\n\r\n  static getnotrepaid(req, res) {\r\n    const currentstatus=\"approved\";\r\n    const currentrepaid=false;\r\n    const checknotrepaid = loans.find(oneloans => oneloans.status == currentstatus && oneloans.repaid == currentrepaid);\r\n    if(checknotrepaid){\r\n    return res.status(200).json({\r\n      status:200,  \r\n      message: \"List of all loans that are not fully repaid\",\r\n      loan: checknotrepaid\r\n    });\r\n  }\r\n  else{\r\n    return res.status(400).json({\r\n      status:404,  \r\n      error: \" can't find any loan that is not fully repaid\",\r\n      \r\n    });\r\n\r\n  }\r\n}\r\n\r\nstatic getrepaid(req, res) {\r\n  const currentstatus=\"approved\";\r\n  const currentrepaid=true;\r\n  const checkrepaid = loans.find(oneloans => oneloans.status == currentstatus && oneloans.repaid == currentrepaid);\r\n  if(checkrepaid){\r\n  return res.status(200).json({\r\n    status:200,  \r\n    message: \"List of all loans that are  fully repaid\",\r\n    loan: checkrepaid\r\n  });\r\n}\r\nelse{\r\n  return res.status(400).json({\r\n    status:404,  \r\n    error: \" can't find any loan that is  fully repaid\",\r\n    \r\n  });\r\n\r\n}\r\n}\r\n\r\n  static getrepayments(req, res) {\r\n    return res.status(200).json({\r\n      status:200,  \r\n      message: \"List of all repayments\",\r\n      candidate: repayments\r\n    });\r\n\r\n  }\r\n    \r\n\r\n//create function\r\nstatic createloans(req, res) {\r\n    const id = parseInt(loans.length) + 1;\r\n    const {firstname,lastname,email,tenor,amount} = req.body;\r\n    \r\n  const checkloan = loans.find(oneloans => oneloans.email == req.body.email);\r\n  if (checkloan) {\r\n    return res.status(400).json({\r\n      \r\n      message: \"loan already exist\",  \r\n    });\r\n  } else {\r\n    const insertloan = {\r\n      id,\r\n      createdOn:moment.utc().format(),\r\n      firstname,\r\n      lastname, \r\n      email,\r\n      status:\"pending\",\r\n      repaid:false,\r\n      tenor,\r\n      amount,\r\n      paymentInstallment:(parseFloat(req.body.amount)+parseFloat(req.body.amount*5/100))/parseFloat(req.body.tenor),\r\n      balance:parseFloat((parseFloat(req.body.amount)+parseFloat(req.body.amount*5/100))/parseFloat(req.body.tenor)*tenor),\r\n      interest:req.body.amount*5/100,\r\n      \r\n    };\r\n    loans.push(insertloan);\r\n    return res.status(200).json({ \r\n      status:200, \r\n      message: \"loan created successfully\",\r\n      loan:insertloan\r\n    });\r\n  }\r\n  }\r\n\r\n  static createrepayments(req, res) {\r\n    const id = parseInt(repayments.length) + 1;\r\n    const { loanid } = req.params;\r\n    const {paidamount} = req.body;\r\n    \r\n    const getloan = loans.find(updateloan => updateloan.id == loanid);\r\n  if (getloan) {\r\n    const insertrepayment = {\r\n      id,\r\n      createdOn:moment.utc().format(),\r\n      loanId:getloan.id,\r\n      amount:getloan.amount,\r\n      monthlyInstallment:getloan.paymentInstallment,\r\n      paidamount,\r\n      balance:parseFloat(getloan.balance)-parseFloat(req.body.paidamount),\r\n      \r\n    };\r\n    repayments.push(insertrepayment);\r\n    return res.status(200).json({ \r\n      status:200, \r\n      message: \"payment done successfully\",\r\n      loan:insertrepayment\r\n    });\r\n    \r\n    \r\n  } else {\r\n    return res.status(400).json({\r\n      \r\n      message: \"that loan doesn't exist\",  \r\n    });\r\n  }\r\n  }\r\n  \r\n  //update function (patch)\r\nstatic verifyloan(req, res) {\r\n  const { id } = req.params;\r\n  \r\n  const getloan = loans.find(updateloan => updateloan.id == id);\r\n  if (getloan) {\r\n    (getloan.status = req.body.status);\r\n    return res.status(201).json({\r\n      message: \"loan is approved succesfully\",\r\n      updatePost: getloan\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"can't find that loan with that id\"\r\n    });\r\n  }\r\n}\r\n  \r\n\r\n////////////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////////\r\n//get user by id\r\nstatic getOneuser(req, res) {\r\n  const { id } = req.params;\r\n  const user = users.find(oneuser => oneuser.id == id);\r\n  if (user) {\r\n    return res.status(200).json({\r\n      message: \"one user found\",\r\n      onePost: user\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no user found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get loan by id\r\nstatic getOneloan(req, res) {\r\n  const { id } = req.params;\r\n  const findloan = loans.find(oneloans => oneloans.id == id);\r\n  if (findloan) {\r\n    return res.status(200).json({\r\n      message: \"one loan found\",\r\n      loan: findloan\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no loan found with that id\"\r\n    });\r\n  }\r\n}\r\n// get payment by id\r\nstatic getOnepayment(req, res) {\r\n  const { id } = req.params;\r\n  const getpayment = repayments.find(onepayment => onepayment.id == id);\r\n  if (getpayment) {\r\n    return res.status(200).json({\r\n      message: \"payment found\",\r\n      payment: getpayment\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no payment found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//update function (patch)\r\nstatic updatepartyname(req, res) {\r\n  const { id } = req.params;\r\n  const { name } = req.params;\r\n  const party = parties.find(updatePost => updatePost.id == id);\r\n  const partyname = parties.find(updatePost => updatePost.name == name);\r\n\r\n  if (party&&partyname) {\r\n    (party.name = req.body.name),(party.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"party successfully  updated\",\r\n      updatePost: party\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"party cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\nstatic updateuser(req, res) {\r\n  const { id } = req.params;\r\n  const user = users.find(updatePost => updatePost.id == id);\r\n  if (user) {\r\n        (user.firstname = req.body.firstname), (user.lastname=req.body.lastname), (user.othername=req.body.othername),(user.email=req.body.email),(user.phonenumber=req.body.phonenumber),(user.passporturl=req.body.passporturl),(user.body = req.body.body);\r\n    return res.status(201).json({\r\n      message: \"user successfully updated\",\r\n      updatePost: user\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"user cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n// delete data functions \r\n\r\n  static deleteparties(req, res) {\r\n    let { id } = req.params;\r\n    const findparty = parties.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findparty) {\r\n      parties.pop(findparty);\r\n      const newparty = parties.filter(post => {\r\n        return post !== findparty;\r\n      });\r\n      res.status(200).json({\r\n        message: \"party successfully deleted\",\r\n        Posts: newparty\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a party\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static deleteuser(req, res) {\r\n    let { id } = req.params;\r\n    const finduser = users.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (finduser) {\r\n      users.pop(finduser);\r\n      const newuser = users.filter(post => {\r\n        return post !== finduser;\r\n      });\r\n      res.status(200).json({\r\n        message: \"user successfully deleted\",\r\n        Posts: newuser\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a user\"\r\n      });\r\n    }\r\n  }\r\n\r\n  \r\n  static deletecandidate(req, res) {\r\n    let { id } = req.params;\r\n    const findcandidate = candidates.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findcandidate) {\r\n      candidates.pop(findcandidate);\r\n      const newcandidate = candidates.filter(post => {\r\n        return post !== findcandidate;\r\n      });\r\n      res.status(200).json({\r\n        message: \"candidate successfully deleted\",\r\n        Posts: newcandidate\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete a candidate\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static deleteoffice(req, res) {\r\n    let { id } = req.params;\r\n    const findoffice = offices.find(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findoffice) {\r\n      offices.pop(findoffice);\r\n      const newoffice = offices.filter(post => {\r\n        return post !== findoffice;\r\n      });\r\n      res.status(200).json({\r\n        message: \"office successfully deleted\",\r\n        Posts: newoffice\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        error: \"could not delete an office\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\nstatic deletepetition(req, res) {\r\n  let { id } = req.params;\r\n  const findpetition = petitions.find(post => {\r\n    return post.id == id;\r\n  });\r\n  if (findpetition) {\r\n    petitions.pop(findpetition);\r\n    const newpetition = petitions.filter(post => {\r\n      return post !== findpetition;\r\n    });\r\n    res.status(200).json({\r\n      message: \"petition successfully deleted\",\r\n      Posts: newpetition\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"could not delete a petition\"\r\n    });\r\n  }\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default postsController;"]}