{"version":3,"sources":["controller.js"],"names":["postsController","req","res","status","json","message","loan","loans","currentstatus","currentrepaid","checknotrepaid","find","oneloans","repaid","checkrepaid","repayment","repayments","id","parseInt","length","body","firstname","lastname","email","tenor","amount","joi","validate","Schema","loanSchema","error","value","send","details","checkloan","loanInfo","model","createLoan","loanid","params","paidamount","paidamountSchema","getrepayments","getloanpayments","loanId","getloan","updateloan","parseFloat","balance","insertrepayment","createdOn","moment","utc","format","monthlyInstallment","paymentInstallment","push","approveSchema","updatePost","findloan","findOne","getpayment","onepayment","payment","findIndex","splice","newloan","filter"],"mappings":"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","file":"controller.js","sourceRoot":"C:/Users/PIH/Documents/challenge/controller","sourcesContent":["import loans from \"../db/loans\";\r\nimport repayments from \"../db/repayments\";\r\nimport validationResult from \"express-validator/check\";\r\nimport moment from \"moment\";\r\nimport joi from 'joi';\r\nimport Schema from '../helpers/inputvalidation';\r\nimport model from '../models/loans';\r\n\r\nclass postsController {\r\n    \r\n//get function\r\n  static getloans(req, res) {\r\n            return res.status(200).json({\r\n              status:200,  \r\n              message: \"List of all loans\",\r\n              loan: loans\r\n            });\r\n  }\r\n\r\n  static getnotrepaid(req, res) {\r\n    const currentstatus=\"approved\";\r\n    const currentrepaid=false;\r\n    const checknotrepaid = loans.find(oneloans => oneloans.status == currentstatus && oneloans.repaid == currentrepaid);\r\n    if(checknotrepaid){\r\n    return res.status(200).json({\r\n      status:200,  \r\n      message: \"List of all loans that are not fully repaid\",\r\n      loan: checknotrepaid\r\n    });\r\n  }\r\n  else{\r\n    return res.status(404).json({\r\n      status:404,  \r\n      message: \" can't find any loan that is not fully repaid\",\r\n      \r\n    });\r\n\r\n  }\r\n}\r\n\r\nstatic getrepaid(req, res) {\r\n  const currentstatus=\"approved\";\r\n  const currentrepaid=true;\r\n  const checkrepaid = loans.find(oneloans => oneloans.status == currentstatus && oneloans.repaid == currentrepaid);\r\n  if(checkrepaid){\r\n  return res.status(200).json({\r\n    status:200,  \r\n    message: \"List of all loans that are  fully repaid\",\r\n    loan: checkrepaid\r\n  });\r\n}\r\nelse{\r\n  return res.status(404).json({\r\n    status:404,  \r\n    message: \" can't find any loan that is  fully repaid\",\r\n    \r\n  });\r\n\r\n}\r\n}\r\n\r\n  static getrepayments(req, res) {\r\n    return res.status(200).json({\r\n      status:200,  \r\n      message: \"List of all repayments\",\r\n      repayment: repayments\r\n    });\r\n\r\n  }\r\n    \r\n\r\n//create function\r\nstatic createloans(req, res) {\r\n    const id = parseInt(loans.length) + 1;\r\n    const {firstname,lastname,email,tenor,amount} = req.body;\r\n    const { error, value } = joi.validate(\r\n      {\r\n        firstname,\r\n        lastname, \r\n        email,\r\n        tenor,\r\n        amount,\r\n      },\r\n      Schema.loanSchema,\r\n    );\r\n    if (error) {\r\n      res.status(400).send({ error: error.details[0].message });\r\n    } else {\r\n  const checkloan = loans.find(oneloans => oneloans.email == req.body.email);\r\n  if (checkloan) {\r\n    return res.status(400).json({\r\n      status:400,\r\n      message: \"loan already exist\",  \r\n    });\r\n  } else {\r\n\r\n    const loanInfo=model.createLoan(req.body)\r\n    /*\r\n    const insertloan = {\r\n      id,\r\n      createdOn:moment.utc().format('DD-MM-YYYY HH:MM:SS'),\r\n      firstname,\r\n      lastname, \r\n      email,\r\n      status:\"pending\",\r\n      repaid:false,\r\n      tenor,\r\n      amount,\r\n      paymentInstallment:(parseFloat(req.body.amount)+parseFloat(req.body.amount*5/100))/parseFloat(req.body.tenor),\r\n      balance:parseFloat((parseFloat(req.body.amount)+parseFloat(req.body.amount*5/100))/parseFloat(req.body.tenor)*tenor),\r\n      interest:req.body.amount*5/100,\r\n      \r\n    };\r\n    loans.push(insertloan);\r\n    */\r\n    return res.status(200).json({ \r\n      status:200, \r\n      message: \"loan created successfully\",\r\n      loan:loanInfo\r\n    });\r\n  }\r\n  }\r\n}\r\n//create repayments function \r\n\r\n  static createrepayments(req, res) {\r\n    const id = parseInt(repayments.length) + 1;\r\n    const { loanid } = req.params;\r\n    const {paidamount} = req.body;\r\n    const { error, value } = joi.validate(\r\n      {\r\n        paidamount,\r\n      },\r\n      Schema.paidamountSchema,\r\n    );\r\n    if (error) {\r\n      res.status(400).send({ error: error.details[0].message });\r\n    } else {\r\n    const getrepayments=repayments.find(getloanpayments=>getloanpayments.loanId== parseInt(loanid));\r\n    const getloan = loans.find(updateloan => updateloan.id == loanid);\r\n    \r\n\r\n    if(getrepayments){  \r\n    if(parseFloat(getrepayments.balance)>0){\r\n         if(parseFloat(getrepayments.balance)<paidamount){\r\n          return res.status(400).json({\r\n            status:400,\r\n            message: \"you payed much money than that you must pay on the balance !\",  \r\n          });\r\n         }\r\n         else{\r\n      if (getloan) {\r\n        const insertrepayment = {\r\n          id,\r\n          createdOn:moment.utc().format('DD-MM-YYYY HH:MM:SS'),\r\n          loanId:getloan.id,\r\n          amount:getloan.amount,\r\n          monthlyInstallment:getloan.paymentInstallment,\r\n          paidamount,\r\n          balance:parseFloat(getrepayments.balance)-parseFloat(req.body.paidamount),\r\n          \r\n        };\r\n        repayments.push(insertrepayment);\r\n        return res.status(200).json({ \r\n          status:200, \r\n          message: \"payment done successfully\",\r\n          loan:insertrepayment\r\n        });\r\n        \r\n        \r\n      } else {\r\n        \r\n      }\r\n      }\r\n    }\r\n  }\r\n    else{\r\n\r\n  if (getloan) {\r\n    if(parseFloat(getloan.balance)<paidamount){\r\n      return res.status(400).json({\r\n        status:400, \r\n        message: \"you payed much money than that you must pay on the balance !\",  \r\n      });\r\n     \r\n    }\r\n    else{\r\n    const insertrepayment = {\r\n      id,\r\n      createdOn:moment.utc().format('DD-MM-YYYY HH:MM:SS'),\r\n      loanId:getloan.id,\r\n      amount:getloan.amount,\r\n      monthlyInstallment:getloan.paymentInstallment,\r\n      paidamount,\r\n      balance:parseFloat(getloan.balance)-parseFloat(req.body.paidamount),\r\n      \r\n    };\r\n    repayments.push(insertrepayment);\r\n    return res.status(200).json({ \r\n      status:200, \r\n      message: \"payment done successfully\",\r\n      loan:insertrepayment\r\n    });\r\n  }\r\n    \r\n  } else {\r\n    return res.status(400).json({\r\n      status:400,\r\n      message: \"that loan doesn't exist\",  \r\n    });\r\n\r\n  }\r\n  }\r\n}\r\n}\r\n  //update function (patch)\r\nstatic verifyloan(req, res) {\r\n  const { id } = req.params;\r\n  const {status} = req.body;\r\n  const { error, value } = joi.validate(\r\n    {\r\n      status,\r\n    },\r\n    Schema.approveSchema,\r\n  );\r\n  if (error) {\r\n    res.status(400).send({ error: error.details[0].message });\r\n  } else {\r\n  const getloan = loans.find(updateloan => updateloan.id == id);\r\n  if (getloan) {\r\n    (getloan.status =status);\r\n    return res.status(201).json({\r\n      status:201,\r\n      message: \"loan is approved succesfully\",\r\n      updatePost: getloan\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      status:400,\r\n      error: \"can't find that loan with that id\"\r\n    });\r\n  }\r\n}\r\n}\r\n  \r\n\r\n////////////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////////\r\n\r\n\r\n//get loan by id\r\nstatic getOneloan(req, res) {\r\n  const { id } = req.params;\r\n  const findloan=model.findOne(id)\r\n  /*\r\n  const findloan = loans.find(oneloans => oneloans.id == id);\r\n  */\r\n  if (findloan) {\r\n    return res.status(200).json({\r\n      status:400,\r\n      message: \"one loan found\",\r\n      loan: findloan\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      status:400,\r\n      error: \"no loan found with that id\"\r\n    });\r\n  }\r\n}\r\n// get payment by id\r\nstatic getOnepayment(req, res) {\r\n  const { id } = req.params;\r\n  const getpayment = repayments.find(onepayment => onepayment.id == id);\r\n  if (getpayment) {\r\n    return res.status(200).json({\r\n      message: \"payment found\",\r\n      payment: getpayment\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      status:400,\r\n      error: \"no payment found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\nstatic deleteloan(req, res) {\r\n  let { id } = req.params;\r\n  const findloan = loans.findIndex(loan => {\r\n    return loan.id == id;\r\n  });\r\n  if (findloan >-1) {\r\n    loans.splice(findloan,1);\r\n    const newloan = loans.filter(loan => {\r\n      return loan !== findloan;\r\n    });\r\n    res.status(200).json({\r\n      status:200,\r\n      message: \"loan successfully deleted\",\r\n      loan: newloan\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      status:400,\r\n      error: \"could not find that loan\"\r\n    });\r\n  }\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default postsController;"]}