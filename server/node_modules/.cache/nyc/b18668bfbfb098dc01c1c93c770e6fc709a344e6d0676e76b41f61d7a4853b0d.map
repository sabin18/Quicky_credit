{"version":3,"sources":["controller.js"],"names":["postsController","req","res","status","json","message","loans","checknotrepaid","model","findnotrepaid","checkrepaid","findrepaid","repayments","id","parseInt","length","body","firstname","lastname","email","tenor","amount","joi","validate","Schema","loanSchema","error","value","send","details","checkloan","findEmail","loanInfo","createLoan","loanid","params","paidamount","paidamountSchema","getloan","findOne","parseFloat","balance","Repayment","model1","createRepayments","approveSchema","findloan","getpayment","findOnepayments","findLoan","deleteLoan"],"mappings":"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","file":"controller.js","sourceRoot":"C:/Users/PIH/Documents/challenge/controller","sourcesContent":["// import loans from \"../db/loans\";\n// import repayments from \"../db/repayments\";\nimport joi from 'joi';\nimport repayments from '../models/repayments';\nimport loans from '../models/loans';\nimport Schema from '../helpers/inputvalidation';\nimport model from '../models/loans';\nimport model1 from '../models/repayments';\n\nclass postsController {\n// get function\n  static getloans(req, res) {\n    return res.status(200).json({\n      status: 200,\n      message: 'List of all loans',\n      loans,\n    });\n  }\n\n  static getnotrepaid(req, res) {\n    const checknotrepaid= model.findnotrepaid();\n    //const checknotrepaid = loans.find(oneloans => oneloans.status == currentstatus && oneloans.repaid == currentrepaid);\n    if (checknotrepaid) {\n      return res.status(200).json({\n        status: 200,\n        message: 'List of all loans that are not fully repaid',\n        checknotrepaid,\n      });\n    }\n\n    return res.status(404).json({\n      status: 404,\n      message: \" can't find any loan that is not fully repaid\",\n\n    });\n  }\n\n  static getrepaid(req, res) {\n    const checkrepaid = model.findrepaid();\n    if (checkrepaid) {\n      return res.status(200).json({\n        status: 200,\n        message: 'List of all loans that are  fully repaid',\n        checkrepaid,\n      });\n    }\n\n    return res.status(404).json({\n      status: 404,\n      message: \" can't find any loan that is  fully repaid\",\n\n    });\n  }\n\n  static getrepayments(req, res) {\n    return res.status(200).json({\n      status: 200,\n      message: 'List of all repayments',\n      repayments,\n    });\n  }\n\n\n  // create function\n  static createloans(req, res) {\n    const id = parseInt(loans.length) + 1;\n    const {\n      firstname, lastname, email, tenor, amount,\n    } = req.body;\n    const { error, value } = joi.validate(\n      {\n        firstname,\n        lastname,\n        email,\n        tenor,\n        amount,\n      },\n      Schema.loanSchema,\n    );\n    if (error) {\n      res.status(400).send({ error: error.details[0].message });\n    } else {\n      const checkloan = model.findEmail(email);\n      // const checkloan = loans.find(oneloans => oneloans.email == req.body.email);\n      if (checkloan) {\n        return res.status(400).json({\n          status: 400,\n          message: 'loan already exist',\n        });\n      }\n\n      const loanInfo = model.createLoan(req.body);\n      /*\n    const insertloan = {\n      id,\n      createdOn:moment.utc().format('DD-MM-YYYY HH:MM:SS'),\n      firstname,\n      lastname,\n      email,\n      status:\"pending\",\n      repaid:false,\n      tenor,\n      amount,\n      paymentInstallment:(parseFloat(req.body.amount)+parseFloat(req.body.amount*5/100))/parseFloat(req.body.tenor),\n      balance:parseFloat((parseFloat(req.body.amount)+parseFloat(req.body.amount*5/100))/parseFloat(req.body.tenor)*tenor),\n      interest:req.body.amount*5/100,\n\n    };\n    loans.push(insertloan);\n    */\n      return res.status(200).json({\n        status: 200,\n        message: 'loan created successfully',\n       loanInfo,\n      });\n    }\n  }\n  // create repayments function\n\n  static createrepayments(req, res) {\n    const id = parseInt(repayments.length) + 1;\n    const { loanid } = req.params;\n    const { paidamount } = req.body;\n    const { error, value } = joi.validate(\n      {\n        paidamount,\n      },\n      Schema.paidamountSchema,\n    );\n    if (error) {\n      res.status(400).send({ error: error.details[0].message });\n    } else {\n    // const getrepayments=model1.findpaymentloanid(loanid);\n    // const getloan = model.findOne(loanid)\n    // const getrepayments=repayments.find(getloanpayments=>getloanpayments.loanId== parseInt(loanid));\n      const getloan = model.findOne(loanid);\n      if (getloan) {\n        if (parseFloat(getloan.balance) < paidamount) {\n          return res.status(400).json({\n            status: 400,\n            message: 'you payed much money than that you must pay on the balance !',\n          });\n        }\n        if (getloan.status != 'approved') {\n          return res.status(400).json({\n            status: 400,\n            message: 'this is not approved !',\n          });\n        }\n\n        const Repayment = model1.createRepayments(req.body, loanid);\n\n        /* const insertrepayment = {\n         id,\n         createdOn:moment.utc().format('DD-MM-YYYY HH:MM:SS'),\n         loanId:getloan.id,\n         amount:getloan.amount,\n         monthlyInstallment:getloan.paymentInstallment,\n         paidamount,\n         balance:parseFloat(getrepayments.balance)-parseFloat(req.body.paidamount),\n\n       };\n       repayments.push(insertrepayment);\n       */\n        return res.status(200).json({\n          status: 200,\n          message: 'payment done successfully',\n          Repayment,\n        });\n      }\n      return res.status(400).json({\n        status: 400,\n        message: \"that loan doesn't exist\",\n      });\n    }\n  }\n\n  // update function (patch)\n  static verifyloan(req, res) {\n    const { id } = req.params;\n    const { status } = req.body;\n    const { error, value } = joi.validate(\n      {\n        status,\n      },\n      Schema.approveSchema,\n    );\n    if (error) {\n      res.status(400).send({ error: error.details[0].message });\n    } else {\n      const getloan = model.findOne(id);\n      if (getloan) {\n        (getloan.status = status);\n        return res.status(201).json({\n          status: 201,\n          message: 'loan is approved succesfully',\n          getloan,\n        });\n      }\n      res.status(400).json({\n        status: 400,\n        error: \"can't find that loan with that id\",\n      });\n    }\n  }\n\n\n  // //////////////////////////////////////////////////////////////////\n\n  // /////////////////////////////////////////////////////////////\n\n\n  // get loan by id\n  static getOneloan(req, res) {\n    const { id } = req.params;\n    const findloan = model.findOne(id);\n    /*\n  const findloan = loans.find(oneloans => oneloans.id == id);\n  */\n    if (findloan) {\n      return res.status(200).json({\n        status: 400,\n        message: 'one loan found',\n        findloan,\n      });\n    }\n    res.status(400).json({\n      status: 400,\n      error: 'no loan found with that id',\n    });\n  }\n\n  // get payment by id\n  static getOnepayment(req, res) {\n    const { id } = req.params;\n    const getpayment = model1.findOnepayments(id);\n    // const getpayment = repayments.find(onepayment => onepayment.id == id);\n    if (getpayment) {\n      return res.status(200).json({\n        message: 'payment found',\n        getpayment,\n      });\n    }\n    res.status(400).json({\n      status: 400,\n      error: 'no payment found with that id',\n    });\n  }\n\n  static deleteloan(req, res) {\n    const { id } = req.params;\n    const findloan = model.findLoan(id);\n    // const findloan = loans.findIndex(loan => loan.id == id);\n    if (findloan > -1) {\n      model.deleteLoan(id);\n      //loans.splice(findloan, 1);\n      //const newloan =loans.filter(loan => loan !== findloan);\n     // console.log(newloan);\n      res.status(200).json({\n        status: 200,\n        message: 'loan successfully deleted',\n      });\n    } else {\n      res.status(400).json({\n        status: 400,\n        error: 'could not find that loan',\n      });\n    }\n  }\n}\n\n\nexport default postsController;\n"]}