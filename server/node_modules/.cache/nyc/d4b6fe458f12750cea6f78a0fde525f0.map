{"version":3,"sources":["controller.js"],"names":["postsController","req","res","json","status","message","party","parties","user","users","office","offices","candidate","candidates","posts","votes","petition","petitions","id","parseInt","length","body","name","HQAddress","logourl","newparty","error","send","details","existparty","find","field","push","firstname","lastname","othername","email","phonenumber","passporturl","newuser","isadmin","newcandidate","newpetition","createdon","moment","utc","format","createdby","type","newoffice","created_at","existoffice","params","oneuser","onePost","oneparties","oneoffice","onecandidates","vote","onevotes","onepetition","onePetition","updatePost","updateoffice","partyupdate","updateParty","updateparty","updatepartyname","findparty","findIndex","post","splice","filter","Posts","finduser","findcandidate","findoffice","findpetition"],"mappings":"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","file":"controller.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/Politico/controller","sourcesContent":["import users from \"../db/user\";\r\nimport parties from \"../db/parties\";\r\nimport offices from \"../db/office\";\r\nimport candidates from \"../db/candidates\";\r\nimport party from \"../middleware/validationparty\";\r\nimport office from \"../middleware/validationoffice\";\r\nimport votes from \"../db/votes\";\r\nimport petitions from \"../db/Petition\";\r\nimport moment from \"moment\";\r\n\r\nclass postsController {\r\n  static getparties(req, res){\r\n  \r\n    return res.json({\r\n      status:200,\r\n      message: \"List of all parties\",\r\n      party: parties\r\n\r\n    });\r\n  }\r\n\r\n    static getuser(req, res) {\r\n        return res.json({\r\n          status:200,  \r\n          message: \"List of all users\",\r\n          user: users\r\n        });\r\n    }\r\n\r\n        static getoffice(req, res) {\r\n            return res.json({\r\n              status:200,  \r\n              message: \"List of all offices\",\r\n              office: offices\r\n            });\r\n  }\r\n\r\n  static getcandidates(req, res) {\r\n    return res.json({\r\n      status:200,  \r\n      message: \"List of all candidates\",\r\n      candidate: candidates\r\n    });\r\n\r\n  }\r\n    static getvotes(req, res) {\r\n        return res.json({\r\n          status:200,  \r\n          message: \"List of all votes\",\r\n          posts: votes\r\n        });\r\n    }\r\n\r\n        static getpetition(req, res) {\r\n             return res.json({\r\n              status:200,  \r\n              message: \"List of all petitions\",\r\n              petition: petitions\r\n            });\r\n} \r\n\r\n//create functions\r\n// create political party\r\n\r\nstatic createparties(req, res) {\r\n    const id = parseInt(parties.length) + 1;\r\n    const {name,HQAddress,logourl} = req.body;\r\n    const newparty = {\r\n      id,\r\n      name,\r\n      HQAddress,\r\n      logourl,\r\n    };\r\n\r\n const{\r\nerror\r\n }=party(req.body);\r\n error? res.send({\r\n status:400,\r\n  error:error.details[0].message\r\n  }):null;\r\n\r\nconst existparty=parties.find(field => field.name==req.body.name);\r\nif (existparty) return res.send({\r\n  status: 400,\r\n  error:\"please use other name this party name already exist\"\r\n});\r\n\r\n    parties.push(newparty);\r\n    return res.status(200).json({  \r\n      status:200,\r\n      message: \"created a new party\"\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n  static createuser(req, res) {\r\n    const id = parseInt(users.length) + 1;\r\n    const {firstname,lastname,othername,email,phonenumber,passporturl} = req.body;\r\n    const newuser = {\r\n      id,\r\n      firstname,\r\n      lastname,\r\n      othername,\r\n      email,\r\n      phonenumber,\r\n      passporturl,\r\n      isadmin:'false',\r\n      \r\n    };\r\n    users.push(newuser);\r\n    return res.status(200).json({  \r\n      status:200,\r\n      message: \"created a new user\"\r\n    });\r\n  }\r\n\r\n  static createcandidates(req, res) {\r\n    const id = parseInt(candidates.length) + 1;\r\n\r\n    const newcandidate = {\r\n      id,\r\n      office:1,\r\n      party:2,\r\n      candidate:3,\r\n      \r\n    };\r\n    candidates.push(newcandidate);\r\n    return res.status(200).json({  \r\n      status:200,\r\n      message: \"created a new candidate\"\r\n    });\r\n  }\r\n\r\n\r\n  static createpetition(req, res) {\r\n    const id = parseInt(petitions.length) + 1;\r\n    const {body} = req.body;\r\n    const newpetition = {\r\n      id,\r\n      createdon:moment.utc().format(),\r\n      createdby:1,\r\n      office:3,\r\n      body,\r\n    };\r\n    petitions.push(newpetition);\r\n    return res.status(200).json({  \r\n      status:200,\r\n      message: \"created a new petition\"\r\n    });\r\n  }\r\n\r\n  //create political office\r\n  \r\n  static createoffice(req, res) {\r\n    const id = parseInt(offices.length) + 1;\r\n    const {type,name}= req.body;\r\n    const newoffice = {\r\n      created_at: moment.utc().format(),\r\n      id,\r\n      type,\r\n      name,\r\n    };\r\n\r\n    const{\r\n      error\r\n       }=office(req.body);\r\n       error? res.send({\r\n       status:400,\r\n        error:error.details[0].message\r\n        }):null;\r\n      \r\n      const existoffice=offices.find(field => field.name==req.body.name);\r\n\r\n      if (existoffice)return res.send({\r\n        status: 400,\r\n        error:\"please use other name this office name already exist!\"\r\n      });\r\n      \r\n\r\n    offices.push(newoffice);\r\n    return res.status(200).json({ \r\n      status:200, \r\n      message: \"created a new office\"\r\n    });\r\n  }\r\n\r\n\r\n//get  functions\r\n////////////////////////////////////////////////////////////////////\r\n\r\n//get user by id\r\nstatic getOneuser(req, res) {\r\n  const { id } = req.params;\r\n  const user = users.find(oneuser => oneuser.id == id);\r\n  if (user) {\r\n    return res.status(200).json({\r\n      status:200,\r\n      message: \"one user found\",\r\n      onePost: user\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      error: \"no user found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get parties by id\r\nstatic getOneparty(req, res) {\r\n  const { id } = req.params;\r\n  const party = parties.find(oneparties => oneparties.id == id);\r\n  if (party) {\r\n    return res.status(200).json({\r\n      message: \"one party found\",\r\n      onePost: party\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      status:404,\r\n      error: \"no party found with that id\"\r\n    });\r\n  }\r\n}\r\n// get office by id\r\nstatic getOneoffice(req, res) {\r\n  const { id } = req.params;\r\n  const office = offices.find(oneoffice => oneoffice.id == id);\r\n  if (office) {\r\n    return res.status(200).json({\r\n      status:200,\r\n      message: \"one office found\",\r\n      onePost: office\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      status:404,\r\n      error: \"no office found with that id\"\r\n    });\r\n  }\r\n}\r\n//get candidate by id\r\nstatic getOnecandidate(req, res) {\r\n  const { id } = req.params;\r\n  const candidate = candidates.find(onecandidates => onecandidates.id == id);\r\n  if (candidate) {\r\n    return res.status(200).json({\r\n      status:200,\r\n      message: \"one candidate found\",\r\n      onePost: candidate\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      status:404,\r\n      error: \"no candidate found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get votes by id\r\nstatic getOnevote(req, res) {\r\n  const { id } = req.params;\r\n  const vote = votes.find(onevotes => onevotes.id == id);\r\n  if (vote) {\r\n    return res.status(200).json({\r\n      status:200,\r\n      message: \"one vote found\",\r\n      onePost: vote\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      status:404,\r\n      error: \"no vote found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//get petition by id\r\nstatic getOnepetition(req, res) {\r\n  const { id } = req.params;\r\n  const petition = petitions.find(onepetition => onepetition.id == id);\r\n  if (petition) {\r\n    return res.status(200).json({\r\n      status:200,\r\n      message: \"one petition found\",\r\n      onePetition: petition\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      status:404,\r\n      error: \"no petition found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n//update data function\r\n\r\nstatic updateoffice(req, res) {\r\n  const { id } = req.params;\r\n  const office = offices.find(updatePost => updatePost.id == id);\r\n  \r\n  if (office) {\r\n    (office.name = req.body.name), (office.type=req.body.type),(office.body = req.body.body);\r\n    return res.status(200).json({\r\n      status:200,\r\n      message: \"successfully updated\",\r\n      updateoffice: office\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      status:404,\r\n      error: \"office cannot be updated\"\r\n    });\r\n  }\r\n}\r\n \r\nstatic updateparty(req, res) {\r\n  const { id } = req.params;\r\n  const partyupdate = parties.find(updatePost => updatePost.id == id);\r\n\r\n\r\n  if (partyupdate) {\r\n\r\n    const{\r\n     \r\n      error\r\n       }=party(req.body);\r\n       error? res.send({\r\n       status:400,\r\n        error:error.details[0].message\r\n        }):null;\r\n\r\n    const existparty=parties.find(field => field.name==req.body.name);\r\n      if (existparty) return res.send({\r\n        status: 400,\r\n        error:\"please use other name ,this name is same as name you are updating\"\r\n      });\r\n\r\n    (partyupdate.name = req.body.name), (partyupdate.HQAddress=req.body.HQAddress), (partyupdate.logourl=req.body.logourl), (partyupdate.body = req.body.body);\r\n    return res.status(200).json({\r\n      status:200,\r\n      message: \"successfully updated\",\r\n      updateParty: party\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      status:404,\r\n      error: \"party cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n\r\n//update function (patch)\r\nstatic updatepartyname(req, res) {\r\n  const { id } = req.params;\r\n  const { name } = req.params;\r\n  const updateparty = parties.find(updatePost => updatePost.id == id);\r\n  const updatepartyname = parties.find(updatePost => updatePost.name == name);\r\n\r\n  \r\n\r\n  if (updateparty&&updatepartyname) {\r\n      \r\n    const{\r\n     \r\n      error\r\n       }=party(req.body);\r\n       error? res.send({\r\n       status:400,\r\n        error:error.details[0].message\r\n        }):null;\r\n\r\n      const existparty=parties.find(field => field.name==req.body.name);\r\n      if (existparty) return res.send({\r\n        status: 400,\r\n        error:\"please use other name ,this name is same as name you are updating\"\r\n      });\r\n\r\n    (party.name = req.body.name),(party.body = req.body.body);\r\n    return res.status(200).json({\r\n      status:200,\r\n      message: \"party successfully  updated\",\r\n      updatePost: party\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      status:404,\r\n      error: \"party cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\nstatic updateuser(req, res) {\r\n  const { id } = req.params;\r\n  const user = users.find(updatePost => updatePost.id == id);\r\n  if (user) {\r\n        (user.firstname = req.body.firstname), (user.lastname=req.body.lastname), (user.othername=req.body.othername),(user.email=req.body.email),(user.phonenumber=req.body.phonenumber),(user.passporturl=req.body.passporturl),(user.body = req.body.body);\r\n    return res.status(200).json({\r\n      status:200,\r\n      message: \"user successfully updated\",\r\n      updatePost: user\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      status:404,\r\n      error: \"user cannot be updated\"\r\n    });\r\n  }\r\n}\r\n\r\n// delete data functions \r\n\r\n  static deleteparties(req, res) {\r\n    let { id } = req.params;\r\n    const findparty = parties.findIndex(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findparty >-1) {\r\n      parties.splice(findparty,1);\r\n      const newparty = parties.filter(post => {\r\n        return post !== findparty;\r\n      });\r\n      res.status(200).json({\r\n        status:200,\r\n        message: \"party successfully deleted\",\r\n        Posts: newparty\r\n      });\r\n    } else {\r\n      res.status(404).json({\r\n        status:404,\r\n        error: \"could not delete a party\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static deleteuser(req, res) {\r\n    let { id } = req.params;\r\n    const finduser = users.findIndex(post => {\r\n      return post.id == parseInt(id, 10);\r\n    });\r\n\r\n    if (finduser) {\r\n      users.splice(finduser,1);\r\n      const newuser = users.filter(post => {\r\n        return post!== finduser;\r\n      });\r\n      res.status(200).json({\r\n        status:200,\r\n        message: \"user successfully deleted\",\r\n        Posts: newuser\r\n      });\r\n    } else {\r\n      res.status(404).json({\r\n        status:404,\r\n        error: \"could not delete a user\"\r\n      });\r\n    }\r\n  }\r\n\r\n  \r\n  static deletecandidate(req, res) {\r\n    let { id } = req.params;\r\n    const findcandidate = candidates.findIndex(post => {\r\n      return post.id == parseInt(id, 10);\r\n    });\r\n    \r\n    if (findcandidate >-1) {\r\n\r\n      candidates.splice(findcandidate,1);\r\n      \r\n      const newcandidate = candidates.filter(post => {\r\n        return post !== findcandidate;\r\n      });\r\n      res.status(200).json({\r\n        status:200,\r\n        message: \"candidate successfully deleted\",\r\n        Posts: findcandidate.id,\r\n      });\r\n    } else {\r\n      res.status(404).json({\r\n        status:404,\r\n        error: \"could not delete a candidate\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static deleteoffice(req, res) {\r\n    let { id } = req.params;\r\n    const findoffice = offices.findIndex(post => {\r\n      return post.id == parseInt(id, 10);\r\n    });\r\n    if (findoffice >-1) {\r\n      offices.splice(findoffice,1);\r\n      const newoffice = offices.filter(post => {\r\n        return findoffice;\r\n      });\r\n      res.status(200).json({\r\n        status:200,\r\n        message: \"office successfully deleted\",\r\n        office: newoffice\r\n      });\r\n    } else {\r\n      res.status(404).json({\r\n        status:404,\r\n        error: \"could not find that  office\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\nstatic deletepetition(req, res) {\r\n  let { id } = req.params;\r\n  const findpetition = petitions.findIndex(post => {\r\n    return post.id == parseInt(id, 10);\r\n  });\r\n  if (findpetition  >-1){\r\n    petitions.splice(findpetition,1);\r\n    const newpetition = petitions.filter(post => {\r\n      return post !== findpetition;\r\n    });\r\n    res.status(200).json({\r\n      status:200,\r\n      message: \"petition successfully deleted\",\r\n      petition: newpetition\r\n    });\r\n  } else {\r\n    res.status(404).json({\r\n      status:404,\r\n      error: \"could not find that a petition\"\r\n    });\r\n  }\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default postsController;"]}