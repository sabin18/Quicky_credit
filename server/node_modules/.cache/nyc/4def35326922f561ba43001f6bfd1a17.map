{"version":3,"sources":["partycontroller.js"],"names":["controllers","GetPartById","req","res","partyId","params","id","Party","queries","getSpecificParty","then","response","length","status","send","message","catch","console","log","error","createParty","body","name","hqaddress","logourl","joi","validate","Schema","partySchema","value","details","partyinsert","promise","insertIntoParty","parties","AllParty","getallparties","getallParty","updateparty","changeparty","UpdateParty","err","deleteparty","deleteParty"],"mappings":"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","file":"partycontroller.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/politico2/controller","sourcesContent":["// src/usingDB/controllers/Reflection.js\r\nimport joi from 'joi';\r\nimport uuidv1 from 'uuid/v1';\r\nimport Party from '../models/partymodel';\r\nimport queries from '../db/Queries';\r\nimport execute from '../src/connection';\r\nimport Schema from '../helpers/Validationparty';\r\n\r\nconst controllers = {};\r\n\r\n// fetch a party by id\r\nconst GetPartById = (req, res) => {\r\n  const partyId = req.params.id;\r\n//send party\r\n  const Party = execute(queries.getSpecificParty,[partyId]);\r\n  Party\r\n    .then((response) => {\r\n      // send it.\r\n      if (response.length >=1) {\r\n        res.status(200).send(response[0]);\r\n      } else {\r\n        // send the error on page\r\n        res.status(404).send({ message: 'sorry no party  found it is empty' });\r\n      }\r\n    })\r\n    .catch(error => console.log(error));\r\n};\r\n\r\n// create party\r\nconst createParty = (req, res) => {\r\n  const {\r\n    name,hqaddress,logourl,\r\n  } = req.body;\r\n  const { error, value } = joi.validate(\r\n    {\r\n      name,\r\n      hqaddress,\r\n      logourl,\r\n    },\r\n    \r\n     Schema.partySchema,\r\n  );\r\n  if (error !== null) { \r\n    res.status(400).send({ error: error.details[0].message });\r\n  } else {\r\n    const id = uuidv1();\r\n    const partyinsert = new Party(id, name,hqaddress,logourl);\r\n    const promise = execute(queries.insertIntoParty, [\r\n      partyinsert.id,\r\n      partyinsert.name,\r\n      partyinsert.hqaddress,\r\n      partyinsert.logourl,\r\n    ]);\r\n    \r\n    console.log(promise);\r\n    promise\r\n    .then((response) => {\r\n      if (response.length >= 1) {\r\n        res.status(201).send({\r\n          status:200,\r\n          message: 'The party was successfully created',\r\n          parties: response[0],\r\n        });\r\n\r\n      } else {\r\n        res.send({ error: 'Duplicate key error' });\r\n      }\r\n    })\r\n    .catch(error => res.status(400).send(error));\r\n}\r\n};\r\n\r\n// fetch all parties\r\nconst AllParty = (req, res) => {\r\n  const getallparties = execute(queries.getallParty);\r\n     \r\n  getallparties\r\n    .then((response) => {\r\n      if (response) {\r\n        res.send({ \r\n          status:200,\r\n          parties:\r\n          response });\r\n      } else {\r\n        res.send({ \r\n          parties:[response],\r\n          message: 'There is no party at the moment.' });\r\n      }\r\n    })\r\n    .catch(error => console.log(error));\r\n  };\r\n\r\nconst updateparty = (req, res) => {\r\n  const { id } = req.params;\r\n   const {\r\n    name,hqaddress,logourl\r\n  } = req.body;\r\n  const { error, value } = joi.validate(\r\n    {\r\n      name,\r\n      hqaddress,\r\n      logourl,\r\n    },\r\n     Schema.partySchema,\r\n  );\r\n  if (error) {\r\n    res.status(400).send({ error: error.details[0].message });\r\n  } else {\r\n    const changeparty = execute(queries.UpdateParty,[name,hqaddress,logourl,id]);\r\n    changeparty\r\n      .then((response) => {\r\n        if (response) {\r\n          const message = 'The party was updated successfully';\r\n          res.status(200).send({ message, response: response[0] });\r\n        } else {\r\n          res.status(404).send({ error: 'it can not update the party'});\r\n        }\r\n      })\r\n      .catch(err => {res.status(400).send({ err }); });\r\n  }\r\n};\r\n\r\n// Delete a party .\r\nconst deleteparty = (req, res) => {\r\n  const partyId = req.params.id;\r\n//delete party\r\nconst deleteparty = execute(queries.deleteParty,[partyId]);\r\n  deleteparty\r\n    .then((response) => {\r\n      res.status(200).send({ message: 'party deleted successfully', response });\r\n    })\r\n    .catch((error) => {\r\n      res.status(400).send({ error:'party can not be deleted' });\r\n\r\n    });\r\n};\r\ncontrollers.GetPartById = GetPartById;\r\ncontrollers.createParty = createParty;\r\ncontrollers.AllParty = AllParty;\r\ncontrollers.updateparty = updateparty;\r\ncontrollers.deleteparty = deleteparty;\r\n\r\nexport default controllers;"]}