{"version":3,"sources":["partycontroller.js"],"names":["partyController","req","res","json","status","message","party","parties","id","parseInt","length","body","name","HQAddress","logourl","newparty","error","send","details","existparty","find","field","push","params","oneparties","onePost","partyupdate","updatePost","updateParty","updateparty","updatepartyname","findparty","findIndex","post","splice","filter","Posts"],"mappings":"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","file":"partycontroller.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/Politico/controller","sourcesContent":["import parties from \"../db/parties\";\r\nimport party from \"../middleware/validationparty\";\r\n\r\nclass partyController {\r\n\r\n    //getting the parties\r\n    static getparties(req, res){\r\n    \r\n      return res.json({\r\n        status:200,\r\n        message: \"List of all parties\",\r\n        party: parties\r\n  \r\n      });\r\n    }\r\n\r\n\r\n // create political party\r\n\r\nstatic createparties(req, res) {\r\n    const id = parseInt(parties.length) + 1;\r\n    const {name,HQAddress,logourl} = req.body;\r\n    const newparty = {\r\n      id,\r\n      name,\r\n      HQAddress,\r\n      logourl,\r\n    };\r\n\r\n const{\r\nerror\r\n }=party(req.body);\r\n error? res.send({\r\n status:400,\r\n  error:error.details[0].message\r\n  }):null;\r\n\r\nconst existparty=parties.find(field => field.name==req.body.name);\r\nif (existparty) return res.send({\r\n  status: 400,\r\n  error:\"please use other name this party name already exist\"\r\n});\r\n\r\n    parties.push(newparty);\r\n    return res.status(200).json({  \r\n      status:200,\r\n      message: \"created a new party\"\r\n    });\r\n\r\n  }\r\n\r\n//get parties by id\r\nstatic getOneparty(req, res) {\r\n    const { id } = req.params;\r\n    const party = parties.find(oneparties => oneparties.id == id);\r\n    if (party) {\r\n      return res.status(200).json({\r\n        status:200,\r\n        message: \"one party found\",\r\n        onePost: party\r\n      });\r\n    } else {\r\n      return res.status(404).json({\r\n        status:404,\r\n        error: \"no party found with that id\"\r\n      });\r\n    }\r\n  }\r\n\r\n  static updateparty(req, res) {\r\n    const { id } = req.params;\r\n    const partyupdate = parties.find(updatePost => updatePost.id == id);\r\n  \r\n  \r\n    if (partyupdate) {\r\n  \r\n      const{\r\n       \r\n        error\r\n         }=party(req.body);\r\n         if(error)return res.send({\r\n          status:400,\r\n          \r\n          error:error.details[0].message\r\n          });\r\n  \r\n      const existparty=parties.find(field => field.name==req.body.name);\r\n        if (existparty) return res.send({\r\n          status: 400,\r\n          error:\"please use other name ,this name is same as name you are updating\"\r\n        });\r\n  \r\n      (partyupdate.name = req.body.name), (partyupdate.HQAddress=req.body.HQAddress), (partyupdate.logourl=req.body.logourl), (partyupdate.body = req.body.body);\r\n      return res.status(200).json({\r\n        status:200,\r\n        message: \"successfully updated\",\r\n        updateParty: party\r\n      });\r\n    } else {\r\n      return res.status(404).json({\r\n        status:404,\r\n        error: \"party cannot be updated\"\r\n      });\r\n    }\r\n  }\r\n  \r\n\r\n//update function (patch)\r\nstatic updatepartyname(req, res) {\r\n    const { id } = req.params;\r\n    const { name } = req.params;\r\n    const updateparty = parties.find(updatePost => updatePost.id == id);\r\n    const updatepartyname = parties.find(updatePost => updatePost.name == name);\r\n  \r\n    \r\n  \r\n    if (updateparty&&updatepartyname) {\r\n        \r\n      const{\r\n       \r\n        error\r\n         }=party(req.body);\r\n         if (error) return res.send({\r\n         status:400,\r\n          error:error.details[0].message\r\n          });\r\n  \r\n        const existparty=parties.find(field => field.name==req.body.name);\r\n        if (existparty) return res.send({\r\n          status: 400,\r\n          error:\"please use other name ,this name is same as name you are updating\"\r\n        });\r\n  \r\n      (party.name = req.body.name),(party.body = req.body.body);\r\n      return res.status(200).json({\r\n        status:200,\r\n        message: \"party successfully  updated\",\r\n        updatePost: party\r\n      });\r\n    } else {\r\n      return res.status(404).json({\r\n        status:404,\r\n        error: \"party cannot be updated\"\r\n      });\r\n    }\r\n  }\r\n\r\n  \r\n  // delete data functions \r\n\r\n  static deleteparties(req, res) {\r\n    let { id } = req.params;\r\n    const findparty = parties.findIndex(post => {\r\n      return post.id == id;\r\n    });\r\n    if (findparty >-1) {\r\n      parties.splice(findparty,1);\r\n      const newparty = parties.filter(post => {\r\n        return post !== findparty;\r\n      });\r\n      res.status(200).json({\r\n        status:200,\r\n        message: \"party successfully deleted\",\r\n        Posts: newparty\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        status:400,\r\n        error: \"could not delete a party\"\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\nexport default partyController;"]}