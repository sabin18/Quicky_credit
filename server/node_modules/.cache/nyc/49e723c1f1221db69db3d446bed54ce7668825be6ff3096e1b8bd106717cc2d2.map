{"version":3,"sources":["controller.js"],"names":["postsController","req","res","status","json","message","loan","loans","currentstatus","currentrepaid","checknotrepaid","find","oneloans","repaid","checkrepaid","repayment","repayments","id","parseInt","length","body","firstname","lastname","email","tenor","amount","joi","validate","Schema","loanSchema","error","value","send","details","checkloan","model","findEmail","loanInfo","createLoan","loanid","params","paidamount","paidamountSchema","getloan","findOne","parseFloat","balance","Repayment","model1","createRepayments","approveSchema","updatePost","findloan","getpayment","findOnepayments","payment","findIndex","splice","newloan","filter"],"mappings":"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","file":"controller.js","sourceRoot":"C:/Users/PIH/Documents/challenge/controller","sourcesContent":["// import loans from \"../db/loans\";\n// import repayments from \"../db/repayments\";\nimport validationResult from 'express-validator/check';\nimport moment from 'moment';\nimport joi from 'joi';\nimport repayments from '../models/repayments';\nimport loans from '../models/loans';\nimport Schema from '../helpers/inputvalidation';\nimport model from '../models/loans';\nimport model1 from '../models/repayments';\n\nclass postsController {\n// get function\n  static getloans(req, res) {\n    return res.status(200).json({\n      status: 200,\n      message: 'List of all loans',\n      loan: loans,\n    });\n  }\n\n  static getnotrepaid(req, res) {\n    const currentstatus = 'approved';\n    const currentrepaid = false;\n    const checknotrepaid = loans.find(oneloans => oneloans.status == currentstatus && oneloans.repaid == currentrepaid);\n    if (checknotrepaid) {\n      return res.status(200).json({\n        status: 200,\n        message: 'List of all loans that are not fully repaid',\n        loan: checknotrepaid,\n      });\n    }\n\n    return res.status(404).json({\n      status: 404,\n      message: \" can't find any loan that is not fully repaid\",\n\n    });\n  }\n\n  static getrepaid(req, res) {\n    const currentstatus = 'approved';\n    const currentrepaid = true;\n    const checkrepaid = loans.find(oneloans => oneloans.status == currentstatus && oneloans.repaid == currentrepaid);\n    if (checkrepaid) {\n      return res.status(200).json({\n        status: 200,\n        message: 'List of all loans that are  fully repaid',\n        loan: checkrepaid,\n      });\n    }\n\n    return res.status(404).json({\n      status: 404,\n      message: \" can't find any loan that is  fully repaid\",\n\n    });\n  }\n\n  static getrepayments(req, res) {\n    return res.status(200).json({\n      status: 200,\n      message: 'List of all repayments',\n      repayment: repayments,\n    });\n  }\n\n\n  // create function\n  static createloans(req, res) {\n    const id = parseInt(loans.length) + 1;\n    const {\n      firstname, lastname, email, tenor, amount,\n    } = req.body;\n    const { error, value } = joi.validate(\n      {\n        firstname,\n        lastname,\n        email,\n        tenor,\n        amount,\n      },\n      Schema.loanSchema,\n    );\n    if (error) {\n      res.status(400).send({ error: error.details[0].message });\n    } else {\n      const checkloan = model.findEmail(email);\n      // const checkloan = loans.find(oneloans => oneloans.email == req.body.email);\n      if (checkloan) {\n        return res.status(400).json({\n          status: 400,\n          message: 'loan already exist',\n        });\n      }\n\n      const loanInfo = model.createLoan(req.body);\n      /*\n    const insertloan = {\n      id,\n      createdOn:moment.utc().format('DD-MM-YYYY HH:MM:SS'),\n      firstname,\n      lastname,\n      email,\n      status:\"pending\",\n      repaid:false,\n      tenor,\n      amount,\n      paymentInstallment:(parseFloat(req.body.amount)+parseFloat(req.body.amount*5/100))/parseFloat(req.body.tenor),\n      balance:parseFloat((parseFloat(req.body.amount)+parseFloat(req.body.amount*5/100))/parseFloat(req.body.tenor)*tenor),\n      interest:req.body.amount*5/100,\n\n    };\n    loans.push(insertloan);\n    */\n      return res.status(200).json({\n        status: 200,\n        message: 'loan created successfully',\n        loan: loanInfo,\n      });\n    }\n  }\n  // create repayments function\n\n  static createrepayments(req, res) {\n    const id = parseInt(repayments.length) + 1;\n    const { loanid } = req.params;\n    const { paidamount } = req.body;\n    const { error, value } = joi.validate(\n      {\n        paidamount,\n      },\n      Schema.paidamountSchema,\n    );\n    if (error) {\n      res.status(400).send({ error: error.details[0].message });\n    } else {\n    // const getrepayments=model1.findpaymentloanid(loanid);\n    // const getloan = model.findOne(loanid)\n    // const getrepayments=repayments.find(getloanpayments=>getloanpayments.loanId== parseInt(loanid));\n      const getloan = model.findOne(loanid);\n      if (getloan) {\n        if (parseFloat(getloan.balance) < paidamount) {\n          return res.status(400).json({\n            status: 400,\n            message: 'you payed much money than that you must pay on the balance !',\n          });\n        }\n        if (getloan.status != 'approved') {\n          return res.status(400).json({\n            status: 400,\n            message: 'this is not approved !',\n          });\n        }\n\n        const Repayment = model1.createRepayments(req.body, loanid);\n\n        /* const insertrepayment = {\n         id,\n         createdOn:moment.utc().format('DD-MM-YYYY HH:MM:SS'),\n         loanId:getloan.id,\n         amount:getloan.amount,\n         monthlyInstallment:getloan.paymentInstallment,\n         paidamount,\n         balance:parseFloat(getrepayments.balance)-parseFloat(req.body.paidamount),\n\n       };\n       repayments.push(insertrepayment);\n       */\n        return res.status(200).json({\n          status: 200,\n          message: 'payment done successfully',\n          loan: Repayment,\n        });\n      }\n      return res.status(400).json({\n        status: 400,\n        message: \"that loan doesn't exist\",\n      });\n    }\n  }\n\n  // update function (patch)\n  static verifyloan(req, res) {\n    const { id } = req.params;\n    const { status } = req.body;\n    const { error, value } = joi.validate(\n      {\n        status,\n      },\n      Schema.approveSchema,\n    );\n    if (error) {\n      res.status(400).send({ error: error.details[0].message });\n    } else {\n      const getloan = model.findOne(id);\n      if (getloan) {\n        (getloan.status = status);\n        return res.status(201).json({\n          status: 201,\n          message: 'loan is approved succesfully',\n          updatePost: getloan,\n        });\n      }\n      res.status(400).json({\n        status: 400,\n        error: \"can't find that loan with that id\",\n      });\n    }\n  }\n\n\n  // //////////////////////////////////////////////////////////////////\n\n  // /////////////////////////////////////////////////////////////\n\n\n  // get loan by id\n  static getOneloan(req, res) {\n    const { id } = req.params;\n    const findloan = model.findOne(id);\n    /*\n  const findloan = loans.find(oneloans => oneloans.id == id);\n  */\n    if (findloan) {\n      return res.status(200).json({\n        status: 400,\n        message: 'one loan found',\n        loan: findloan,\n      });\n    }\n    res.status(400).json({\n      status: 400,\n      error: 'no loan found with that id',\n    });\n  }\n\n  // get payment by id\n  static getOnepayment(req, res) {\n    const { id } = req.params;\n    const getpayment = model1.findOnepayments(id);\n    // const getpayment = repayments.find(onepayment => onepayment.id == id);\n    if (getpayment) {\n      return res.status(200).json({\n        message: 'payment found',\n        payment: getpayment,\n      });\n    }\n    res.status(400).json({\n      status: 400,\n      error: 'no payment found with that id',\n    });\n  }\n\n  static deleteloan(req, res) {\n    const { id } = req.params;\n    const findloan = loans.findIndex(loan => loan.id == id);\n    if (findloan > -1) {\n      loans.splice(findloan, 1);\n      const newloan = loans.filter(loan => loan !== findloan);\n      res.status(200).json({\n        status: 200,\n        message: 'loan successfully deleted',\n        loan: newloan,\n      });\n    } else {\n      res.status(400).json({\n        status: 400,\n        error: 'could not find that loan',\n      });\n    }\n  }\n}\n\n\nexport default postsController;\n"]}