{"version":3,"sources":["repayments.js"],"names":["Payment","payments","LoanId","foundLoan","loans","findOne","paymentId","foundPayment","find","payment","loanId","parseInt","data","loanid","payloan","fetchOne","insertpayment","id","length","createdOn","moment","utc","format","amount","monthlyinstallment","paymentInstallment","paidamount","balance","parseFloat","push","repaid"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA;IACMA,O;AACJ,qBAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACD;;;;6BAEQC,M,EAAQ;AACf,UAAMC,YAAYC,gBAAMC,OAAN,CAAcH,MAAd,CAAlB;AACA,aAAOC,SAAP;AACD;;AAED;;;;oCACgBG,S,EAAW;AACzB,UAAMC,eAAe,KAAKN,QAAL,CAAcO,IAAd,CAAmB;AAAA,eAAWC,QAAQC,MAAR,KAAmBC,SAASL,SAAT,CAA9B;AAAA,OAAnB,CAArB;AACA,aAAOC,YAAP;AACD;;;qCAEgBK,I,EAAMC,M,EAAQ;AAC7B,UAAMC,UAAU,KAAKC,QAAL,CAAcJ,SAASE,MAAT,CAAd,CAAhB;AACA,UAAMG,gBAAgB;AACpBC,YAAI,KAAKhB,QAAL,CAAciB,MAAd,GAAuB,CADP;AAEpBC,mBAAWC,iBAAOC,GAAP,GAAaC,MAAb,CAAoB,qBAApB,CAFS;AAGpBZ,gBAAQI,QAAQG,EAHI;AAIpBM,gBAAQT,QAAQS,MAJI;AAKpBC,4BAAoBV,QAAQW,kBALR;AAMpBC,oBAAYd,KAAKc,UANG;AAOpBC,iBAASC,WAAWd,QAAQa,OAAnB,IAA8BC,WAAWhB,KAAKc,UAAhB;;AAPnB,OAAtB;AAUA,WAAKzB,QAAL,CAAc4B,IAAd,CAAmBb,aAAnB;AACAF,cAAQa,OAAR,GAAkBC,WAAWd,QAAQa,OAAnB,IAA8BC,WAAWhB,KAAKc,UAAhB,CAAhD;;AAEA,UAAGZ,QAAQa,OAAR,IAAiB,CAApB,EAAsB;AACpBb,gBAAQgB,MAAR,GAAe,IAAf;AACD;;AAED,aAAOd,aAAP;AACD;;;;;;kBAIY,IAAIhB,OAAJ,E","file":"repayments.js","sourceRoot":"C:/Users/PIH/Documents/challenge/models","sourcesContent":["import moment from 'moment';\nimport loans from './loans';\n\n// Define a class for creating loan\nclass Payment {\n  constructor() {\n    this.payments = [];\n  }\n\n  fetchOne(LoanId) {\n    const foundLoan = loans.findOne(LoanId);\n    return foundLoan;\n  }\n\n  // Fetch repayments by id\n  findOnepayments(paymentId) {\n    const foundPayment = this.payments.find(payment => payment.loanId === parseInt(paymentId));\n    return foundPayment;\n  }\n\n  createRepayments(data, loanid) {\n    const payloan = this.fetchOne(parseInt(loanid));\n    const insertpayment = {\n      id: this.payments.length + 1,\n      createdOn: moment.utc().format('DD-MM-YYYY HH:MM:SS'),\n      loanId: payloan.id,\n      amount: payloan.amount,\n      monthlyinstallment: payloan.paymentInstallment,\n      paidamount: data.paidamount,\n      balance: parseFloat(payloan.balance) - parseFloat(data.paidamount),\n\n    };\n    this.payments.push(insertpayment);\n    payloan.balance = parseFloat(payloan.balance) - parseFloat(data.paidamount);\n\n    if(payloan.balance==0){\n      payloan.repaid=true;\n    }\n    \n    return insertpayment;\n  }\n}\n\n\nexport default new Payment();\n"]}