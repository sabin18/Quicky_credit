{"version":3,"sources":["user.js"],"names":["user","users","data","findemail","find","oneusers","email","info","insertuser","id","length","firstname","lastname","phone","password","setPassword","address","status","isadmin","push","hashedPassword","passwordHash","generate","finduser","fetchusers"],"mappings":";;;;;;;;AACA;;;;;;;;AAEA;IACMA,I;AACJ,kBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,EAAb;AACD;;;;8BAGSC,I,EAAM;AACd,UAAMC,YAAY,KAAKF,KAAL,CAAWG,IAAX,CAAgB;AAAA,eAAYC,SAASC,KAAT,KAAmBJ,IAA/B;AAAA,OAAhB,CAAlB;AACA,aAAOC,SAAP;AACD;;;+BAEUI,I,EAAM;AACf,UAAMC,aAAa;AACjBC,YAAI,KAAKR,KAAL,CAAWS,MAAX,GAAoB,CADP;AAEjBC,mBAAWJ,KAAKI,SAFC;AAGjBC,kBAAUL,KAAKK,QAHE;AAIjBC,eAAMN,KAAKM,KAJM;AAKjBP,eAAOC,KAAKD,KALK;AAMjBQ,kBAAS,KAAKC,WAAL,CAAiBR,KAAKO,QAAtB,CANQ;AAOjBE,iBAAUT,KAAKS,OAPE;AAQjBC,gBAAQ,YARS;AASjBC,iBAASX,KAAKW;;AATG,OAAnB;AAaA,WAAKjB,KAAL,CAAWkB,IAAX,CAAgBX,UAAhB;AACA,aAAOA,UAAP;AACD;;AAED;;;;gCACYM,Q,EAAU;AACpB,UAAMM,iBAAiBC,uBAAaC,QAAb,CAAsBR,QAAtB,CAAvB;AACA;AACA,aAAQ,KAAKA,QAAL,GAAgBM,cAAxB;AACD;;;4BAIOX,E,EAAI;AACV,UAAMc,WAAW,KAAKtB,KAAL,CAAWG,IAAX,CAAgB;AAAA,eAAcoB,WAAWf,EAAX,IAAiBA,EAA/B;AAAA,OAAhB,CAAjB;AACA,aAAOc,QAAP;AACD;;;;;;kBAKY,IAAIvB,IAAJ,E","file":"user.js","sourceRoot":"C:/Users/PIH/Documents/challenge/models","sourcesContent":["\nimport passwordHash from 'password-hash';\n\n// Define a class for creating a user\nclass user {\n  constructor() {\n    this.users = [];\n  }\n\n\n  userEmail(data) {\n    const findemail = this.users.find(oneusers => oneusers.email === data);\n    return findemail;\n  }\n  \n  signupuser(info) {\n    const insertuser = {\n      id: this.users.length + 1,\n      firstname: info.firstname,\n      lastname: info.lastname,\n      phone:info.phone,\n      email: info.email,\n      password:this.setPassword(info.password),\n      address : info.address,\n      status: 'unverified',\n      isadmin: info.isadmin,\n  \n\n    };\n    this.users.push(insertuser);\n    return insertuser;\n  }\n\n  // define a function to hash the password.\n  setPassword(password) {\n    const hashedPassword = passwordHash.generate(password);\n    // hash the password\n    return (this.password = hashedPassword);\n  }\n\n \n \n  getuser(id) {\n    const finduser = this.users.find(fetchusers => fetchusers.id == id);\n    return finduser;\n  }\n\n}\n\n\nexport default new user();\n"]}