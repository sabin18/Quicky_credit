{"version":3,"sources":["userscontroller.js"],"names":["userController","req","res","body","email","firstname","lastname","password","address","isadmin","joi","validate","Schema","userSchema","error","value","status","send","details","message","id","parseInt","users","length","token","authentication","encodeToken","userId","checkemail","find","oneusers","console","log","json","insertuser","push","user","params","oneuser","onePost","specificUser","verifySchema","getuser","updateuser"],"mappings":"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","file":"userscontroller.js","sourceRoot":"C:/Users/PIH/Documents/challenge/controller","sourcesContent":["// import passwordHash from 'password-hash';\nimport joi from 'joi';\nimport authentication from '../helpers/authentication';\nimport users from '../db/user';\n//import users from '../models/user';\nimport mymodel from '../models/user';\nimport Schema from '../helpers/inputvalidation';\n\nclass userController {\n  static createUser(req, res) {\n    const {\n      email, firstname, lastname, password, address, isadmin,\n    } = req.body;\n    const { error, value } = joi.validate(\n      {\n        email,\n        firstname,\n        lastname,\n        password,\n        address,\n        isadmin,\n      },\n      Schema.userSchema,\n    );\n    if (error) {\n      res.status(400).send({ error: error.details[0].message });\n    } else {\n      // generate the id and pass it to a user\n      const id = parseInt(users.length) + 1;\n      const token = authentication.encodeToken({\n        email,\n        firstname,\n        lastname,\n        password,\n        address,\n        userId: id,\n        status: 'unverified',\n        isadmin,\n      }); \n      //const checkemail= mymodel.userEmail(email); \n      \n      const checkemail = users.find(oneusers => oneusers.email == req.body.email);\n      console.log(checkemail);\n      if (checkemail) {\n        return res.status(400).json({\n          message: 'email already exist please use another email!',\n        });\n      }\n      const insertuser = {\n        id,\n        email,\n        firstname,\n        lastname,\n        password,\n        address,\n        status: 'unverified',\n        isadmin,\n\n      };\n      users.push(insertuser);\n\n\n      res.status(201).send({\n        message: 'user registered successfully',\n        user: {\n          token,\n          id,\n          firstname,\n          lastname,\n          email,\n          isadmin,\n\n        },\n\n      });\n    }\n  }\n\n  static getuser(req, res) {\n    return res.json({\n      status: 200,\n      message: 'List of all users',\n      user: users,\n    });\n  }\n\n  // get user by id\n  static getOneuser(req, res) {\n    const { id } = req.params;\n    const user = users.find(oneuser => oneuser.id == id);\n    if (user) {\n      return res.status(200).json({\n        message: 'one user found',\n        onePost: user,\n      });\n    }\n    res.status(400).json({\n      error: 'no user found with that id',\n    });\n  }\n\n  // Login data processing\n  static login(req, res) {\n    const { email, password } = req.body;\n    const specificUser = users.find(oneuser => oneuser.email == email);\n    if (!specificUser) {\n      return res.status(400).json({\n\n        message: 'No user with that email !',\n      });\n    } if (specificUser) {\n      if (specificUser.password == password) {\n        const {\n          firstname, lastname, email, password, isadmin,\n        } = specificUser;\n        const user = {\n          firstname,\n          lastname,\n          email,\n          password,\n          status: specificUser.status,\n          isadmin: specificUser.isadmin,\n          id: specificUser.id,\n        };\n        const token = authentication.encodeToken(user);\n        res.status(200).send({\n          message: 'Logged in successfully',\n          token,\n          id: specificUser.id,\n          firstname,\n          lastname,\n          email,\n          status: specificUser.status,\n          isadmin,\n\n\n        });\n      } else {\n        res.status(400).send({ error: 'incorrect Password !' });\n      }\n    }\n  }\n\n  // update function (patch)\n  static verifyuser(req, res) {\n    const { email } = req.params;\n    const { status } = req.body;\n    const { error, value } = joi.validate(\n      {\n        status,\n      },\n      Schema.verifySchema,\n    );\n    if (error) {\n      res.status(400).send({ error: error.details[0].message });\n    } else {\n      const getuser = users.find(updateuser => updateuser.email == email);\n      if (getuser) {\n        (getuser.status = status);\n        return res.status(201).json({\n          status: 201,\n          message: 'user is verified succesfully',\n          user: getuser,\n        });\n      }\n      res.status(400).json({\n        status: 400,\n        error: \"can't find user with that email\",\n      });\n    }\n  }\n}\n\n\nexport default userController;\n"]}