{"version":3,"sources":["officecontroller.js"],"names":["officesController","req","res","json","status","message","office","offices","id","parseInt","length","body","type","name","newoffice","created_at","moment","utc","format","error","send","details","existoffice","find","field","push","params","oneoffice","onePost","updateoffice","updatePost","updateofficeoffice","findoffice","findIndex","post","splice","filter"],"mappings":"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","file":"officecontroller.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/Politico/controller","sourcesContent":["import offices from \"../db/office\";\r\nimport office from \"../middleware/validationoffice\";\r\nimport moment from \"moment\";\r\n\r\nclass officesController{\r\n\r\nstatic getoffice(req, res) {\r\n\r\n    return res.json({\r\n      status:200,  \r\n      message: \"List of all offices\",\r\n      office: offices\r\n    });\r\n\r\n}\r\n\r\n//create political office\r\n  \r\nstatic createoffice(req, res) {\r\n    const id = parseInt(offices.length) + 1;\r\n    const {type,name}= req.body;\r\n    const newoffice = {\r\n      created_at: moment.utc().format(),\r\n      id,\r\n      type,\r\n      name,\r\n    };\r\n\r\n    const{\r\n      error\r\n       }=office(req.body);\r\n       error? res.send({\r\n       status:400,\r\n        error:error.details[0].message\r\n        }):null;\r\n      \r\n      const existoffice=offices.find(field => field.name==req.body.name);\r\n\r\n      if (existoffice)return res.send({\r\n        status: 400,\r\n        error:\"please use other name this office name already exist!\"\r\n      });\r\n      \r\n\r\n    offices.push(newoffice);\r\n    return res.status(200).json({ \r\n      status:200, \r\n      message: \"created a new office\"\r\n    });\r\n  }\r\n\r\n  // get office by id\r\nstatic getOneoffice(req, res) {\r\n    const { id } = req.params;\r\n    const office = offices.find(oneoffice => oneoffice.id == id);\r\n    if (office) {\r\n      return res.status(200).json({\r\n        status:200,\r\n        message: \"one office found\",\r\n        onePost: office\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        status:400,\r\n        error: \"no office found with that id\"\r\n      });\r\n    }\r\n  }\r\n  \r\n  \r\n  //update an  office\r\n\r\n  static updateoffice(req, res) {\r\n    const { id } = req.params;\r\n    const updateoffice = offices.find(updatePost => updatePost.id == id);\r\n    \r\n    if (updateoffice) {\r\n\r\n        const{\r\n            error\r\n             }=office(req.body);\r\n             error? res.send({\r\n             status:400,\r\n              error:error.details[0].message\r\n              }):null;\r\n            \r\n            const existoffice=offices.find(field => field.name==req.body.name);\r\n      \r\n            if (existoffice)return res.send({\r\n              status: 400,\r\n              error:\"please use other name this office name already exist!\"\r\n            });\r\n\r\n      (updateoffice.name = req.body.name),(updateoffice.type=req.body.type),(updateofficeoffice.body = req.body.body);\r\n      return res.status(200).json({\r\n        status:200,\r\n        message: \"successfully updated\",\r\n        updateoffice: office\r\n      });\r\n    } else {\r\n      res.status(404).json({\r\n        status:404,\r\n        error: \"office cannot be updated\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\nstatic deleteoffice(req, res) {\r\n    let { id } = req.params;\r\n    const findoffice = offices.findIndex(post => {\r\n      return post.id == parseInt(id, 10);\r\n    });\r\n    if (findoffice >-1) {\r\n      offices.splice(findoffice,1);\r\n      const newoffice = offices.filter(post => {\r\n        return findoffice;\r\n      });\r\n      res.status(200).json({\r\n        status:200,\r\n        message: \"office successfully deleted\",\r\n        office: newoffice\r\n      });\r\n    } else {\r\n      res.status(404).json({\r\n        status:404,\r\n        error: \"could not find that  office\"\r\n      });\r\n    }\r\n  }\r\n}\r\nexport default officesController;"]}