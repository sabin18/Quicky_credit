{"version":3,"sources":["Queries.js"],"names":["sqlQueries","createPartiesTable","createusersTable","createOfficeTable","createCandidatesTable","require","main","module","insertIntoParty","getSpecificParty","getallParty","UpdateParty","deleteParty","insertoffice","insertcandidates","getSpecificoffice","getalloffice","Updateoffice","deleteoffice","registerUser","checkUser"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,aAAa,EAAnB;;AAEA;AACA,IAAMC,qBAAqB,sJAA3B;;AAEA;AACA,IAAMC,mBAAmB,kSAAzB;;AAEA;AACA,IAAMC,oBAAoB,oJAA1B;;AAGA;AACA,IAAMC,wBAAwB,4HAA9B;;AAEA,IAAIC,QAAQC,IAAR,KAAiBC,MAArB,EAA6B;AAC3B,4BAAQN,kBAAR;AACA,4BAAQC,gBAAR;AACA,4BAAQE,qBAAR;AACD;;AAGD;AACA,IAAMI,kBAAkB,qFAAxB;;AAEA;AACA,IAAMC,mBAAmB,qCAAzB;;AAEA,IAAMC,cAAc,wBAApB;;AAEA;AACA,IAAMC,cAAc,sFAApB;;AAEA;AACA,IAAMC,cAAY,mCAAlB;;AAEC;AACD,IAAMC,eAAe,kEAArB;;AAEA;AACA,IAAMC,mBAAmB,uEAAzB;;AAEA;AACA,IAAMC,oBAAoB,oCAA1B;;AAEA,IAAMC,eAAe,uBAArB;;AAEA;AACA,IAAMC,eAAe,kEAArB;;AAEA;AACA,IAAMC,eAAa,iCAAnB;;AAEA;AACA,IAAMC,eAAe,wJAArB;;AAEA;AACA,IAAMC,YAAY,sCAAlB;;AAIApB,WAAWC,kBAAX,GAAgCA,kBAAhC;;AAEAD,WAAWE,gBAAX,GAA8BA,gBAA9B;;AAEAF,WAAWI,qBAAX,GAAmCA,qBAAnC;;AAEAJ,WAAWW,WAAX,GAAyBA,WAAzB;;AAEAX,WAAWS,gBAAX,GAA8BA,gBAA9B;;AAEAT,WAAWU,WAAX,GAAyBA,WAAzB;;AAEAV,WAAWQ,eAAX,GAA6BA,eAA7B;;AAEAR,WAAWI,qBAAX,GAAiCA,qBAAjC;;AAEAJ,WAAWG,iBAAX,GAA8BA,iBAA9B;;AAEAH,WAAWY,WAAX,GAAwBA,WAAxB;;AAEAZ,WAAWmB,YAAX,GAA0BA,YAA1B;;AAEAnB,WAAWoB,SAAX,GAAuBA,SAAvB;;AAEApB,WAAWa,YAAX,GAAyBA,YAAzB;;AAEAb,WAAWe,iBAAX,GAA8BA,iBAA9B;;AAEAf,WAAWgB,YAAX,GAAwBA,YAAxB;;AAEAhB,WAAWiB,YAAX,GAAwBA,YAAxB;;AAEAjB,WAAWkB,YAAX,GAAwBA,YAAxB;;AAEAlB,WAAWc,gBAAX,GAA4BA,gBAA5B;;kBAGed,U","file":"Queries.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/politico2/db","sourcesContent":["import execute from '../src/connection';\r\n\r\nconst sqlQueries = {};\r\n\r\n// Create table for parties \r\nconst createPartiesTable = 'CREATE TABLE IF NOT EXISTS parties(id UUID(200) PRIMARY KEY,name VARCHAR(100) NOT NULL,hqaddress VARCHAR(70) NOT NULL,logourl VARCHAR(100) NOT NULL)';\r\n\r\n// Create users table\r\nconst createusersTable = 'CREATE TABLE IF NOT EXISTS users(id UUID(200) PRIMARY KEY, firstname VARCHAR(70) NOT NULL,lastname VARCHAR(70) NOT NULL, othername VARCHAR(70) NOT NULL,email VARCHAR(40) NOT NULL UNIQUE , passporturl VARCHAR(70) NOT NULL, password VARCHAR(200) NOT NULL, userIsadmin VARCHAR(200) NOT NULL)';\r\n\r\n// Create table for office \r\nconst createOfficeTable = 'CREATE TABLE IF NOT EXISTS office(id UUID(200) PRIMARY KEY,office INTEGER(70) NOT NULL,party INTEGER(70) NOT NULL,candidates INTEGER(70) NOT NULL)';\r\n\r\n\r\n// Create table for candidates\r\nconst createCandidatesTable = \"CREATE TABLE IF NOT EXISTS candidates(id UUID(200) PRIMARY KEY,office VARCHAR(70) NOT NULL,candidate VARCHAR(70) NOT NULL)\";\r\n\r\nif (require.main === module) {\r\n  execute(createPartiesTable);\r\n  execute(createusersTable);\r\n  execute(createCandidatesTable);\r\n}\r\n\r\n\r\n// insert party into the database\r\nconst insertIntoParty = 'INSERT INTO parties (id, name, hqaddress, logourl) VALUES($1,$2,$3,$4) RETURNING * ';\r\n\r\n// Pull out a party from a database\r\nconst getSpecificParty = 'SELECT * FROM parties WHERE id =$1 ';\r\n\r\nconst getallParty = 'SELECT * FROM parties ';\r\n\r\n// Update data of a party\r\nconst UpdateParty = 'UPDATE parties SET name = $1, hqaddress= $2 ,logourl = $3 WHERE id = $4 RETURNING * ';\r\n\r\n//delete aparty\r\nconst deleteParty='DELETE FROM parties WHERE id =$1 ';\r\n\r\n //insert office into the database\r\nconst insertoffice = 'INSERT INTO office (id, name,type) VALUES($1,$2,$3) RETURNING * ';\r\n\r\n// //insert office into candidates\r\nconst insertcandidates = 'INSERT INTO candidates (office,candidates) VALUES($1,$2) RETURNING * ';\r\n\r\n// Pull out an office from a database\r\nconst getSpecificoffice = 'SELECT * FROM office WHERE id =$1 ';\r\n\r\nconst getalloffice = 'SELECT * FROM office ';\r\n\r\n// Update data of an office\r\nconst Updateoffice = 'UPDATE office SET name = $1, type= $2 WHERE id = $3 RETURNING * ';\r\n\r\n//delete an office\r\nconst deleteoffice='DELETE FROM office WHERE id =$1';\r\n\r\n// register user\r\nconst registerUser = ' INSERT INTO users (id, firstname,lastname, othername,email,phonenumber,passporturl, password,Isadmin) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING *';\r\n\r\n// Check if a user is logged in\r\nconst checkUser = 'SELECT * FROM users WHERE email = $1';\r\n\r\n\r\n\r\nsqlQueries.createPartiesTable = createPartiesTable;\r\n\r\nsqlQueries.createusersTable = createusersTable;\r\n\r\nsqlQueries.createCandidatesTable = createCandidatesTable;\r\n\r\nsqlQueries.UpdateParty = UpdateParty;\r\n\r\nsqlQueries.getSpecificParty = getSpecificParty;\r\n\r\nsqlQueries.getallParty = getallParty;\r\n\r\nsqlQueries.insertIntoParty = insertIntoParty;\r\n\r\nsqlQueries.createCandidatesTable=createCandidatesTable;\r\n\r\nsqlQueries.createOfficeTable= createOfficeTable;\r\n\r\nsqlQueries.deleteParty= deleteParty;\r\n\r\nsqlQueries.registerUser = registerUser;\r\n\r\nsqlQueries.checkUser = checkUser;\r\n\r\nsqlQueries.insertoffice= insertoffice;\r\n\r\nsqlQueries.getSpecificoffice= getSpecificoffice;\r\n\r\nsqlQueries.getalloffice=getalloffice;\r\n\r\nsqlQueries.Updateoffice=Updateoffice;\r\n\r\nsqlQueries.deleteoffice=deleteoffice;\r\n\r\nsqlQueries.insertcandidates=insertcandidates;\r\n\r\n\r\nexport default sqlQueries;\r\n"]}