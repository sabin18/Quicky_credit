{"version":3,"sources":["userscontroller.js"],"names":["userController","req","res","body","email","firstname","lastname","password","address","isadmin","joi","validate","Schema","userSchema","error","value","status","send","details","message","id","parseInt","mymodel","users","length","token","authentication","encodeToken","userId","checkemail","userEmail","json","signupuser","user","params","getuser","specificUser","passwordHash","verify","verifySchema"],"mappings":"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","file":"userscontroller.js","sourceRoot":"C:/Users/PIH/Documents/quicky_credit challenge/Quicky_credit/server/controller","sourcesContent":[" import passwordHash from 'password-hash';\nimport joi from 'joi';\nimport authentication from '../helpers/authentication';\nimport users from '../models/user';\nimport mymodel from '../models/user';\nimport Schema from '../helpers/inputvalidation';\n\nclass userController {\n  static createUser(req, res) {\n    const {\n      email, firstname, lastname, password, address, isadmin,\n    } = req.body;\n    const { error, value } = joi.validate(\n      {\n        email,\n        firstname,\n        lastname,\n        password,\n        address,\n        isadmin,\n      },\n      Schema.userSchema,\n    );\n    if (error) {\n      res.status(400).send({ error: error.details[0].message });\n    } else {\n      // generate the id and pass it to a user\n      const id = parseInt(mymodel.users.length) + 1;\n      const token = authentication.encodeToken({\n        email,\n        firstname,\n        lastname,\n        password,\n        address,\n        userId: id,\n        status: 'unverified',\n        isadmin,\n      }); \n      const checkemail= mymodel.userEmail(email); \n      if (checkemail) {\n        return res.status(400).json({\n          message: 'email already exist please use another email!',\n        });\n      }\n      mymodel.signupuser(req.body);\n\n      res.status(201).send({\n        message: 'user registered successfully',\n        user: {\n          token,\n          id,\n          firstname,\n          lastname,\n          email,\n          isadmin,\n\n        },\n\n      });\n    }\n  }\n\n  static getuser(req, res) {\n    return res.json({\n      status: 200,\n      message: 'List of all users',\n      user: users,\n    });\n  }\n\n  // get user by id\n  static getOneuser(req, res) {\n    const { id } = req.params;\n    const user = mymodel.getuser(id);\n    if (user) {\n      return res.status(200).json({\n        message: 'one user found',\n        user: user,\n      });\n    }\n    res.status(400).json({\n      error: 'no user found with that id',\n    });\n  }\n\n  // Login data processing\n  static login(req, res) {\n    const { email, password } = req.body;\n    const specificUser = mymodel.userEmail(email);\n    if (!specificUser) {\n      return res.status(400).json({\n\n        message: 'No user with that email !',\n      });\n    } if (specificUser) {\n      if (passwordHash.verify(password,specificUser.password)) {\n        const {\n          firstname, lastname, email, password, isadmin,\n        } = specificUser;\n        const user = {\n          firstname,\n          lastname,\n          email,\n          password,\n          status: specificUser.status,\n          isadmin: specificUser.isadmin,\n          id: specificUser.id,\n        };\n        const token = authentication.encodeToken(user);\n        res.status(200).send({\n          message: 'Logged in successfully',\n          token,\n          id: specificUser.id,\n          firstname,\n          lastname,\n          email,\n          status: specificUser.status,\n          isadmin,\n\n\n        });\n      } else {\n        res.status(400).send({ error: 'incorrect Password !' });\n      }\n    }\n  }\n\n  // update function (patch)\n  static verifyuser(req, res) {\n    const { email } = req.params;\n    const { status } = req.body;\n    const { error, value } = joi.validate(\n      {\n        status,\n      },\n      Schema.verifySchema,\n    );\n    if (error) {\n      res.status(400).send({ error: error.details[0].message });\n    } else {\n      const getuser = mymodel.userEmail(email);\n      if (getuser) {\n        (getuser.status = status);\n        return res.status(201).json({\n          status: 201,\n          message: 'user is verified succesfully',\n          user: getuser,\n        });\n      }\n      res.status(400).json({\n        status: 400,\n        error: \"can't find user with that email\",\n      });\n    }\n  }\n}\n\n\nexport default userController;\n"]}