{"version":3,"sources":["loans.js"],"names":["Loan","loans","email","foundloanemail","find","oneloans","LoanId","foundLoan","loan","id","parseInt","data","insertloan","length","createdOn","moment","utc","format","firstname","lastname","status","repaid","tenor","amount","paymentInstallment","parseFloat","balance","interest","push"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA;IACMA,I;AACJ,kBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,EAAb;AACD;;AAED;;;;;8BACUC,K,EAAO;AACf,UAAMC,iBAAiB,KAAKF,KAAL,CAAWG,IAAX,CAAgB;AAAA,eAAYC,SAASH,KAAT,IAAkBA,KAA9B;AAAA,OAAhB,CAAvB;AACA,aAAOC,cAAP;AACD;;AAED;;;;4BACQG,M,EAAQ;AACd,UAAMC,YAAY,KAAKN,KAAL,CAAWG,IAAX,CAAgB;AAAA,eAAQI,KAAKC,EAAL,KAAYC,SAASJ,MAAT,CAApB;AAAA,OAAhB,CAAlB;AACA,aAAOC,SAAP;AACD;;;+BAEUI,I,EAAM;AACf,UAAMC,aAAa;AACjBH,YAAI,KAAKR,KAAL,CAAWY,MAAX,GAAoB,CADP;AAEjBC,mBAAWC,iBAAOC,GAAP,GAAaC,MAAb,CAAoB,qBAApB,CAFM;AAGjBC,mBAAWP,KAAKO,SAHC;AAIjBC,kBAAUR,KAAKQ,QAJE;AAKjBjB,eAAOS,KAAKT,KALK;AAMjBkB,gBAAQ,SANS;AAOjBC,gBAAQ,KAPS;AAQjBC,eAAOX,KAAKW,KARK;AASjBC,gBAAQZ,KAAKY,MATI;AAUjBC,4BAAoB,CAACC,WAAWd,KAAKY,MAAhB,IAA0BE,WAAWd,KAAKY,MAAL,GAAc,CAAd,GAAkB,GAA7B,CAA3B,IAAgEE,WAAWd,KAAKW,KAAhB,CAVnE;AAWjBI,iBAASD,WAAW,CAACA,WAAWd,KAAKY,MAAhB,IAA0BE,WAAWd,KAAKY,MAAL,GAAc,CAAd,GAAkB,GAA7B,CAA3B,IAAgEE,WAAWd,KAAKW,KAAhB,CAAhE,GAAyFX,KAAKW,KAAzG,CAXQ;AAYjBK,kBAAUhB,KAAKY,MAAL,GAAc,CAAd,GAAkB;;AAZX,OAAnB;AAeA,WAAKtB,KAAL,CAAW2B,IAAX,CAAgBhB,UAAhB;AACA,aAAOA,UAAP;AACD;;;;;;kBAIY,IAAIZ,IAAJ,E","file":"loans.js","sourceRoot":"C:/Users/PIH/Documents/challenge/models","sourcesContent":["import moment from 'moment';\nimport loans from '../db/loans';\n\n// Define a class for creating loan\nclass Loan {\n  constructor() {\n    this.loans = [];\n  }\n\n  // Fetch Email\n  findEmail(email) {\n    const foundloanemail = this.loans.find(oneloans => oneloans.email == email);\n    return foundloanemail;\n  }\n\n  // Fetch Loan by id\n  findOne(LoanId) {\n    const foundLoan = this.loans.find(loan => loan.id === parseInt(LoanId));\n    return foundLoan;\n  }\n\n  createLoan(data) {\n    const insertloan = {\n      id: this.loans.length + 1,\n      createdOn: moment.utc().format('DD-MM-YYYY HH:MM:SS'),\n      firstname: data.firstname,\n      lastname: data.lastname,\n      email: data.email,\n      status: 'pending',\n      repaid: false,\n      tenor: data.tenor,\n      amount: data.amount,\n      paymentInstallment: (parseFloat(data.amount) + parseFloat(data.amount * 5 / 100)) / parseFloat(data.tenor),\n      balance: parseFloat((parseFloat(data.amount) + parseFloat(data.amount * 5 / 100)) / parseFloat(data.tenor) * data.tenor),\n      interest: data.amount * 5 / 100,\n\n    };\n    this.loans.push(insertloan);\n    return insertloan;\n  }\n}\n\n\nexport default new Loan();\n"]}