{"version":3,"sources":["controller.js"],"names":["postsController","req","res","status","json","message","loan","loans","currentstatus","currentrepaid","checknotrepaid","find","oneloans","repaid","error","checkrepaid","repayment","repayments","id","parseInt","length","body","firstname","lastname","email","tenor","amount","checkloan","insertloan","createdOn","moment","utc","format","paymentInstallment","parseFloat","balance","interest","push","loanid","params","paidamount","getrepayments","getloanpayments","loanId","getloan","updateloan","insertrepayment","monthlyInstallment","updatePost","findloan","getpayment","onepayment","payment"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEMA,e;;;;;;;;;AAEN;6BACkBC,G,EAAKC,G,EAAK;AAChB,aAAOA,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAO,GADmB;AAE1BE,iBAAS,mBAFiB;AAG1BC,cAAMC;AAHoB,OAArB,CAAP;AAKT;;;iCAEmBN,G,EAAKC,G,EAAK;AAC5B,UAAMM,gBAAc,UAApB;AACA,UAAMC,gBAAc,KAApB;AACA,UAAMC,iBAAiBH,gBAAMI,IAAN,CAAW;AAAA,eAAYC,SAAST,MAAT,IAAmBK,aAAnB,IAAoCI,SAASC,MAAT,IAAmBJ,aAAnE;AAAA,OAAX,CAAvB;AACA,UAAGC,cAAH,EAAkB;AAClB,eAAOR,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAO,GADmB;AAE1BE,mBAAS,6CAFiB;AAG1BC,gBAAMI;AAHoB,SAArB,CAAP;AAKD,OANC,MAOE;AACF,eAAOR,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAO,GADmB;AAE1BW,iBAAO;;AAFmB,SAArB,CAAP;AAMD;AACF;;;8BAEgBb,G,EAAKC,G,EAAK;AACzB,UAAMM,gBAAc,UAApB;AACA,UAAMC,gBAAc,IAApB;AACA,UAAMM,cAAcR,gBAAMI,IAAN,CAAW;AAAA,eAAYC,SAAST,MAAT,IAAmBK,aAAnB,IAAoCI,SAASC,MAAT,IAAmBJ,aAAnE;AAAA,OAAX,CAApB;AACA,UAAGM,WAAH,EAAe;AACf,eAAOb,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAO,GADmB;AAE1BE,mBAAS,0CAFiB;AAG1BC,gBAAMS;AAHoB,SAArB,CAAP;AAKD,OANC,MAOE;AACF,eAAOb,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAO,GADmB;AAE1BW,iBAAO;;AAFmB,SAArB,CAAP;AAMD;AACA;;;kCAEsBb,G,EAAKC,G,EAAK;AAC7B,aAAOA,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAO,GADmB;AAE1BE,iBAAS,wBAFiB;AAG1BW,mBAAWC;AAHe,OAArB,CAAP;AAMD;;AAGH;;;;gCACmBhB,G,EAAKC,G,EAAK;AACzB,UAAMgB,KAAKC,SAASZ,gBAAMa,MAAf,IAAyB,CAApC;AADyB,sBAEuBnB,IAAIoB,IAF3B;AAAA,UAElBC,SAFkB,aAElBA,SAFkB;AAAA,UAERC,QAFQ,aAERA,QAFQ;AAAA,UAECC,KAFD,aAECA,KAFD;AAAA,UAEOC,KAFP,aAEOA,KAFP;AAAA,UAEaC,MAFb,aAEaA,MAFb;;;AAI3B,UAAMC,YAAYpB,gBAAMI,IAAN,CAAW;AAAA,eAAYC,SAASY,KAAT,IAAkBvB,IAAIoB,IAAJ,CAASG,KAAvC;AAAA,OAAX,CAAlB;AACA,UAAIG,SAAJ,EAAe;AACb,eAAOzB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;;AAE1BC,mBAAS;AAFiB,SAArB,CAAP;AAID,OALD,MAKO;AACL,YAAMuB,aAAa;AACjBV,gBADiB;AAEjBW,qBAAUC,iBAAOC,GAAP,GAAaC,MAAb,EAFO;AAGjBV,8BAHiB;AAIjBC,4BAJiB;AAKjBC,sBALiB;AAMjBrB,kBAAO,SANU;AAOjBU,kBAAO,KAPU;AAQjBY,sBARiB;AASjBC,wBATiB;AAUjBO,8BAAmB,CAACC,WAAWjC,IAAIoB,IAAJ,CAASK,MAApB,IAA4BQ,WAAWjC,IAAIoB,IAAJ,CAASK,MAAT,GAAgB,CAAhB,GAAkB,GAA7B,CAA7B,IAAgEQ,WAAWjC,IAAIoB,IAAJ,CAASI,KAApB,CAVlE;AAWjBU,mBAAQD,WAAW,CAACA,WAAWjC,IAAIoB,IAAJ,CAASK,MAApB,IAA4BQ,WAAWjC,IAAIoB,IAAJ,CAASK,MAAT,GAAgB,CAAhB,GAAkB,GAA7B,CAA7B,IAAgEQ,WAAWjC,IAAIoB,IAAJ,CAASI,KAApB,CAAhE,GAA2FA,KAAtG,CAXS;AAYjBW,oBAASnC,IAAIoB,IAAJ,CAASK,MAAT,GAAgB,CAAhB,GAAkB;;AAZV,SAAnB;AAeAnB,wBAAM8B,IAAN,CAAWT,UAAX;AACA,eAAO1B,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAO,GADmB;AAE1BE,mBAAS,2BAFiB;AAG1BC,gBAAKsB;AAHqB,SAArB,CAAP;AAKD;AACA;AACH;;;;qCAE0B3B,G,EAAKC,G,EAAK;AAChC,UAAMgB,KAAKC,SAASF,qBAAWG,MAApB,IAA8B,CAAzC;AADgC,UAExBkB,MAFwB,GAEbrC,IAAIsC,MAFS,CAExBD,MAFwB;AAAA,UAGzBE,UAHyB,GAGXvC,IAAIoB,IAHO,CAGzBmB,UAHyB;;AAIhC,UAAMC,gBAAcxB,qBAAWN,IAAX,CAAgB;AAAA,eAAiB+B,gBAAgBC,MAAhB,IAAyBL,MAA1C;AAAA,OAAhB,CAApB;AACA,UAAMM,UAAUrC,gBAAMI,IAAN,CAAW;AAAA,eAAckC,WAAW3B,EAAX,IAAiBoB,MAA/B;AAAA,OAAX,CAAhB;;AAGA,UAAGG,aAAH,EAAiB;AACjB,YAAGP,WAAWO,cAAcN,OAAzB,IAAkC,CAArC,EAAuC;AAClC,cAAGD,WAAWO,cAAcN,OAAzB,IAAkCK,UAArC,EAAgD;AAC/C,mBAAOtC,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;;AAE1BC,uBAAS;AAFiB,aAArB,CAAP;AAIA,WALD,MAMI;AACP,gBAAIuC,OAAJ,EAAa;AACX,kBAAME,kBAAkB;AACtB5B,sBADsB;AAEtBW,2BAAUC,iBAAOC,GAAP,GAAaC,MAAb,EAFY;AAGtBW,wBAAOC,QAAQ1B,EAHO;AAItBQ,wBAAOkB,QAAQlB,MAJO;AAKtBqB,oCAAmBH,QAAQX,kBALL;AAMtBO,sCANsB;AAOtBL,yBAAQD,WAAWO,cAAcN,OAAzB,IAAkCD,WAAWjC,IAAIoB,IAAJ,CAASmB,UAApB;;AAPpB,eAAxB;AAUAvB,mCAAWoB,IAAX,CAAgBS,eAAhB;AACA,qBAAO5C,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,wBAAO,GADmB;AAE1BE,yBAAS,2BAFiB;AAG1BC,sBAAKwC;AAHqB,eAArB,CAAP;AAOD,aAnBD,MAmBO,CAEN;AACA;AACF;AACF,OAjCC,MAkCI;;AAEN,YAAIF,OAAJ,EAAa;AACX,cAAGV,WAAWU,QAAQT,OAAnB,IAA4BK,UAA/B,EAA0C;AACxC,mBAAOtC,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;;AAE1BC,uBAAS;AAFiB,aAArB,CAAP;AAKD,WAND,MAOI;AACJ,gBAAMyC,mBAAkB;AACtB5B,oBADsB;AAEtBW,yBAAUC,iBAAOC,GAAP,GAAaC,MAAb,EAFY;AAGtBW,sBAAOC,QAAQ1B,EAHO;AAItBQ,sBAAOkB,QAAQlB,MAJO;AAKtBqB,kCAAmBH,QAAQX,kBALL;AAMtBO,oCANsB;AAOtBL,uBAAQD,WAAWU,QAAQT,OAAnB,IAA4BD,WAAWjC,IAAIoB,IAAJ,CAASmB,UAApB;;AAPd,aAAxB;AAUAvB,iCAAWoB,IAAX,CAAgBS,gBAAhB;AACA,mBAAO5C,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,sBAAO,GADmB;AAE1BE,uBAAS,2BAFiB;AAG1BC,oBAAKwC;AAHqB,aAArB,CAAP;AAKD;AAEA,SA3BD,MA2BO;AACL,iBAAO5C,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;;AAE1BC,qBAAS;AAFiB,WAArB,CAAP;AAKD;AACA;AACF;;AAEC;;;;+BACgBJ,G,EAAKC,G,EAAK;AAAA,UAClBgB,EADkB,GACXjB,IAAIsC,MADO,CAClBrB,EADkB;;;AAG1B,UAAM0B,UAAUrC,gBAAMI,IAAN,CAAW;AAAA,eAAckC,WAAW3B,EAAX,IAAiBA,EAA/B;AAAA,OAAX,CAAhB;AACA,UAAI0B,OAAJ,EAAa;AACVA,gBAAQzC,MAAR,GAAiBF,IAAIoB,IAAJ,CAASlB,MAA3B;AACA,eAAOD,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,8BADiB;AAE1B2C,sBAAYJ;AAFc,SAArB,CAAP;AAID,OAND,MAMO;AACL1C,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBU,iBAAO;AADY,SAArB;AAGD;AACF;;AAGD;;AAEA;;;AAGA;;;;+BACkBb,G,EAAKC,G,EAAK;AAAA,UAClBgB,EADkB,GACXjB,IAAIsC,MADO,CAClBrB,EADkB;;AAE1B,UAAM+B,WAAW1C,gBAAMI,IAAN,CAAW;AAAA,eAAYC,SAASM,EAAT,IAAeA,EAA3B;AAAA,OAAX,CAAjB;AACA,UAAI+B,QAAJ,EAAc;AACZ,eAAO/C,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,gBADiB;AAE1BC,gBAAM2C;AAFoB,SAArB,CAAP;AAID,OALD,MAKO;AACL/C,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBU,iBAAO;AADY,SAArB;AAGD;AACF;AACD;;;;kCACqBb,G,EAAKC,G,EAAK;AAAA,UACrBgB,EADqB,GACdjB,IAAIsC,MADU,CACrBrB,EADqB;;AAE7B,UAAMgC,aAAajC,qBAAWN,IAAX,CAAgB;AAAA,eAAcwC,WAAWjC,EAAX,IAAiBA,EAA/B;AAAA,OAAhB,CAAnB;AACA,UAAIgC,UAAJ,EAAgB;AACd,eAAOhD,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,eADiB;AAE1B+C,mBAASF;AAFiB,SAArB,CAAP;AAID,OALD,MAKO;AACLhD,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBU,iBAAO;AADY,SAArB;AAGD;AACF;;;;;;kBAccd,e","file":"controller.js","sourceRoot":"C:/Users/PIH/Documents/challenge/controller","sourcesContent":["import users from \"../models/user\";\r\nimport loans from \"../models/loans\";\r\nimport repayments from \"../models/repayments\";\r\nimport validationResult from \"express-validator/check\";\r\nimport moment from \"moment\";\r\n\r\nclass postsController {\r\n    \r\n//get function\r\n  static getloans(req, res) {\r\n            return res.status(200).json({\r\n              status:200,  \r\n              message: \"List of all loans\",\r\n              loan: loans\r\n            });\r\n  }\r\n\r\n  static getnotrepaid(req, res) {\r\n    const currentstatus=\"approved\";\r\n    const currentrepaid=false;\r\n    const checknotrepaid = loans.find(oneloans => oneloans.status == currentstatus && oneloans.repaid == currentrepaid);\r\n    if(checknotrepaid){\r\n    return res.status(200).json({\r\n      status:200,  \r\n      message: \"List of all loans that are not fully repaid\",\r\n      loan: checknotrepaid\r\n    });\r\n  }\r\n  else{\r\n    return res.status(400).json({\r\n      status:404,  \r\n      error: \" can't find any loan that is not fully repaid\",\r\n      \r\n    });\r\n\r\n  }\r\n}\r\n\r\nstatic getrepaid(req, res) {\r\n  const currentstatus=\"approved\";\r\n  const currentrepaid=true;\r\n  const checkrepaid = loans.find(oneloans => oneloans.status == currentstatus && oneloans.repaid == currentrepaid);\r\n  if(checkrepaid){\r\n  return res.status(200).json({\r\n    status:200,  \r\n    message: \"List of all loans that are  fully repaid\",\r\n    loan: checkrepaid\r\n  });\r\n}\r\nelse{\r\n  return res.status(400).json({\r\n    status:404,  \r\n    error: \" can't find any loan that is  fully repaid\",\r\n    \r\n  });\r\n\r\n}\r\n}\r\n\r\n  static getrepayments(req, res) {\r\n    return res.status(200).json({\r\n      status:200,  \r\n      message: \"List of all repayments\",\r\n      repayment: repayments\r\n    });\r\n\r\n  }\r\n    \r\n\r\n//create function\r\nstatic createloans(req, res) {\r\n    const id = parseInt(loans.length) + 1;\r\n    const {firstname,lastname,email,tenor,amount} = req.body;\r\n    \r\n  const checkloan = loans.find(oneloans => oneloans.email == req.body.email);\r\n  if (checkloan) {\r\n    return res.status(400).json({\r\n      \r\n      message: \"loan already exist\",  \r\n    });\r\n  } else {\r\n    const insertloan = {\r\n      id,\r\n      createdOn:moment.utc().format(),\r\n      firstname,\r\n      lastname, \r\n      email,\r\n      status:\"pending\",\r\n      repaid:false,\r\n      tenor,\r\n      amount,\r\n      paymentInstallment:(parseFloat(req.body.amount)+parseFloat(req.body.amount*5/100))/parseFloat(req.body.tenor),\r\n      balance:parseFloat((parseFloat(req.body.amount)+parseFloat(req.body.amount*5/100))/parseFloat(req.body.tenor)*tenor),\r\n      interest:req.body.amount*5/100,\r\n      \r\n    };\r\n    loans.push(insertloan);\r\n    return res.status(200).json({ \r\n      status:200, \r\n      message: \"loan created successfully\",\r\n      loan:insertloan\r\n    });\r\n  }\r\n  }\r\n//create repayments function \r\n\r\n  static createrepayments(req, res) {\r\n    const id = parseInt(repayments.length) + 1;\r\n    const { loanid } = req.params;\r\n    const {paidamount} = req.body;\r\n    const getrepayments=repayments.find(getloanpayments=>getloanpayments.loanId== loanid)\r\n    const getloan = loans.find(updateloan => updateloan.id == loanid);\r\n    \r\n\r\n    if(getrepayments){  \r\n    if(parseFloat(getrepayments.balance)>0){\r\n         if(parseFloat(getrepayments.balance)<paidamount){\r\n          return res.status(400).json({\r\n          \r\n            message: \"you payed much maney thant that you must pay on the balance !\",  \r\n          });\r\n         }\r\n         else{\r\n      if (getloan) {\r\n        const insertrepayment = {\r\n          id,\r\n          createdOn:moment.utc().format(),\r\n          loanId:getloan.id,\r\n          amount:getloan.amount,\r\n          monthlyInstallment:getloan.paymentInstallment,\r\n          paidamount,\r\n          balance:parseFloat(getrepayments.balance)-parseFloat(req.body.paidamount),\r\n          \r\n        };\r\n        repayments.push(insertrepayment);\r\n        return res.status(200).json({ \r\n          status:200, \r\n          message: \"payment done successfully\",\r\n          loan:insertrepayment\r\n        });\r\n        \r\n        \r\n      } else {\r\n        \r\n      }\r\n      }\r\n    }\r\n  }\r\n    else{\r\n\r\n  if (getloan) {\r\n    if(parseFloat(getloan.balance)<paidamount){\r\n      return res.status(400).json({\r\n          \r\n        message: \"you payed much maney than that you must pay on the balance !\",  \r\n      });\r\n     \r\n    }\r\n    else{\r\n    const insertrepayment = {\r\n      id,\r\n      createdOn:moment.utc().format(),\r\n      loanId:getloan.id,\r\n      amount:getloan.amount,\r\n      monthlyInstallment:getloan.paymentInstallment,\r\n      paidamount,\r\n      balance:parseFloat(getloan.balance)-parseFloat(req.body.paidamount),\r\n      \r\n    };\r\n    repayments.push(insertrepayment);\r\n    return res.status(200).json({ \r\n      status:200, \r\n      message: \"payment done successfully\",\r\n      loan:insertrepayment\r\n    });\r\n  }\r\n    \r\n  } else {\r\n    return res.status(400).json({\r\n      \r\n      message: \"that loan doesn't exist\",  \r\n    });\r\n\r\n  }\r\n  }\r\n}\r\n  \r\n  //update function (patch)\r\nstatic verifyloan(req, res) {\r\n  const { id } = req.params;\r\n  \r\n  const getloan = loans.find(updateloan => updateloan.id == id);\r\n  if (getloan) {\r\n    (getloan.status = req.body.status);\r\n    return res.status(201).json({\r\n      message: \"loan is approved succesfully\",\r\n      updatePost: getloan\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"can't find that loan with that id\"\r\n    });\r\n  }\r\n}\r\n  \r\n\r\n////////////////////////////////////////////////////////////////////\r\n\r\n///////////////////////////////////////////////////////////////\r\n\r\n\r\n//get loan by id\r\nstatic getOneloan(req, res) {\r\n  const { id } = req.params;\r\n  const findloan = loans.find(oneloans => oneloans.id == id);\r\n  if (findloan) {\r\n    return res.status(200).json({\r\n      message: \"one loan found\",\r\n      loan: findloan\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no loan found with that id\"\r\n    });\r\n  }\r\n}\r\n// get payment by id\r\nstatic getOnepayment(req, res) {\r\n  const { id } = req.params;\r\n  const getpayment = repayments.find(onepayment => onepayment.id == id);\r\n  if (getpayment) {\r\n    return res.status(200).json({\r\n      message: \"payment found\",\r\n      payment: getpayment\r\n    });\r\n  } else {\r\n    res.status(400).json({\r\n      error: \"no payment found with that id\"\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default postsController;"]}