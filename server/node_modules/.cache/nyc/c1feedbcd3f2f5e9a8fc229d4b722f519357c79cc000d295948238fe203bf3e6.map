{"version":3,"sources":["loancontroller.js"],"names":["loansController","req","res","status","json","message","loans","checknotrepaid","model","findnotrepaid","checkrepaid","findrepaid","id","parseInt","length","body","firstname","lastname","email","tenor","amount","joi","validate","Schema","loanSchema","error","value","send","details","checkloan","findEmail","loanInfo","createLoan","params","approveSchema","getloan","findOne","findloan","findLoan","deleteLoan"],"mappings":";;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAGMA,e;;;;;;;;AACN;6BACkBC,G,EAAKC,G,EAAK;AACxB,aAAOA,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BE,iBAAS,mBAFiB;AAG1BC;AAH0B,OAArB,CAAP;AAKD;;;iCAEmBL,G,EAAKC,G,EAAK;AAC5B,UAAMK,iBAAgBC,gBAAMC,aAAN,EAAtB;AACA,UAAIF,cAAJ,EAAoB;AAClB,eAAOL,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,mBAAS,6CAFiB;AAG1BE;AAH0B,SAArB,CAAP;AAKD;;AAED,aAAOL,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BE,iBAAS;;AAFiB,OAArB,CAAP;AAKD;;;8BAEgBJ,G,EAAKC,G,EAAK;AACzB,UAAMQ,cAAcF,gBAAMG,UAAN,EAApB;AACA,UAAID,WAAJ,EAAiB;AACf,eAAOR,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,mBAAS,0CAFiB;AAG1BK;AAH0B,SAArB,CAAP;AAKD;;AAED,aAAOR,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BE,iBAAS;;AAFiB,OAArB,CAAP;AAKD;;AAED;;;;gCACmBJ,G,EAAKC,G,EAAK;AAC3B,UAAMU,KAAKC,SAASP,gBAAMQ,MAAf,IAAyB,CAApC;AAD2B,sBAIvBb,IAAIc,IAJmB;AAAA,UAGzBC,SAHyB,aAGzBA,SAHyB;AAAA,UAGdC,QAHc,aAGdA,QAHc;AAAA,UAGJC,KAHI,aAGJA,KAHI;AAAA,UAGGC,KAHH,aAGGA,KAHH;AAAA,UAGUC,MAHV,aAGUA,MAHV;;AAAA,0BAKFC,cAAIC,QAAJ,CACvB;AACEN,4BADF;AAEEC,0BAFF;AAGEC,oBAHF;AAIEC,oBAJF;AAKEC;AALF,OADuB,EAQvBG,0BAAOC,UARgB,CALE;AAAA,UAKnBC,KALmB,iBAKnBA,KALmB;AAAA,UAKZC,KALY,iBAKZA,KALY;;AAe3B,UAAID,KAAJ,EAAW;AACTvB,YAAIC,MAAJ,CAAW,GAAX,EAAgBwB,IAAhB,CAAqB,EAAEF,OAAOA,MAAMG,OAAN,CAAc,CAAd,EAAiBvB,OAA1B,EAArB;AACD,OAFD,MAEO;AACL,YAAMwB,YAAYrB,gBAAMsB,SAAN,CAAgBZ,KAAhB,CAAlB;AACA,YAAIW,SAAJ,EAAe;AACb,iBAAO3B,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,oBAAQ,GADkB;AAE1BE,qBAAS;AAFiB,WAArB,CAAP;AAID;;AAED,YAAM0B,WAAWvB,gBAAMwB,UAAN,CAAiB/B,IAAIc,IAArB,CAAjB;AACA,eAAOb,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,mBAAS,2BAFiB;AAG3B0B;AAH2B,SAArB,CAAP;AAKD;AACF;;AAED;;;;+BACkB9B,G,EAAKC,G,EAAK;AAAA,UAClBU,EADkB,GACXX,IAAIgC,MADO,CAClBrB,EADkB;AAAA,UAElBT,MAFkB,GAEPF,IAAIc,IAFG,CAElBZ,MAFkB;;AAAA,2BAGDkB,cAAIC,QAAJ,CACvB;AACEnB;AADF,OADuB,EAIvBoB,0BAAOW,aAJgB,CAHC;AAAA,UAGlBT,KAHkB,kBAGlBA,KAHkB;AAAA,UAGXC,KAHW,kBAGXA,KAHW;;AAS1B,UAAID,KAAJ,EAAW;AACTvB,YAAIC,MAAJ,CAAW,GAAX,EAAgBwB,IAAhB,CAAqB,EAAEF,OAAOA,MAAMG,OAAN,CAAc,CAAd,EAAiBvB,OAA1B,EAArB;AACD,OAFD,MAEO;AACL,YAAM8B,UAAU3B,gBAAM4B,OAAN,CAAcxB,EAAd,CAAhB;AACA,YAAIuB,OAAJ,EAAa;AACVA,kBAAQhC,MAAR,GAAiBA,MAAlB;AACA,iBAAOD,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,oBAAQ,GADkB;AAE1BE,qBAAS,8BAFiB;AAG1B8B;AAH0B,WAArB,CAAP;AAKD;AACDjC,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,kBAAQ,GADW;AAEnBsB,iBAAO;AAFY,SAArB;AAID;AACF;;AAGD;;;;+BACkBxB,G,EAAKC,G,EAAK;AAAA,UAClBU,EADkB,GACXX,IAAIgC,MADO,CAClBrB,EADkB;;AAE1B,UAAMyB,WAAW7B,gBAAM4B,OAAN,CAAcxB,EAAd,CAAjB;;AAEA,UAAIyB,QAAJ,EAAc;AACZ,eAAOnC,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,mBAAS,gBAFiB;AAG1BgC;AAH0B,SAArB,CAAP;AAKD;AACDnC,UAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,gBAAQ,GADW;AAEnBsB,eAAO;AAFY,OAArB;AAID;;;+BAEiBxB,G,EAAKC,G,EAAK;AAAA,UAClBU,EADkB,GACXX,IAAIgC,MADO,CAClBrB,EADkB;;AAE1B,UAAMyB,WAAW7B,gBAAM8B,QAAN,CAAe1B,EAAf,CAAjB;AACA,UAAIyB,WAAW,CAAC,CAAhB,EAAmB;AACjB7B,wBAAM+B,UAAN,CAAiB3B,EAAjB;AACAV,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,kBAAQ,GADW;AAEnBE,mBAAS;AAFU,SAArB;AAID,OAND,MAMO;AACLH,YAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,kBAAQ,GADW;AAEnBsB,iBAAO;AAFY,SAArB;AAID;AACF;;;;;;kBAIYzB,e","file":"loancontroller.js","sourceRoot":"C:/Users/PIH/Documents/quicky_credit challenge/Quicky_credit/server/controller","sourcesContent":["\r\nimport joi from 'joi';\r\nimport loans from '../models/loans';\r\nimport Schema from '../helpers/inputvalidation';\r\nimport model from '../models/loans';\r\n\r\nclass loansController {\r\n// get function\r\n  static getloans(req, res) {\r\n    return res.status(200).json({\r\n      status: 200,\r\n      message: 'List of all loans',\r\n      loans,\r\n    });\r\n  }\r\n\r\n  static getnotrepaid(req, res) {\r\n    const checknotrepaid= model.findnotrepaid();\r\n    if (checknotrepaid) {\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: 'List of all loans that are not fully repaid',\r\n        checknotrepaid,\r\n      });\r\n    }\r\n\r\n    return res.status(404).json({\r\n      status: 404,\r\n      message: \" can't find any loan that is not fully repaid\",\r\n\r\n    });\r\n  }\r\n\r\n  static getrepaid(req, res) {\r\n    const checkrepaid = model.findrepaid();\r\n    if (checkrepaid) {\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: 'List of all loans that are  fully repaid',\r\n        checkrepaid,\r\n      });\r\n    }\r\n\r\n    return res.status(404).json({\r\n      status: 404,\r\n      message: \" can't find any loan that is  fully repaid\",\r\n\r\n    });\r\n  }\r\n\r\n  // create function\r\n  static createloans(req, res) {\r\n    const id = parseInt(loans.length) + 1;\r\n    const {\r\n      firstname, lastname, email, tenor, amount,\r\n    } = req.body;\r\n    const { error, value } = joi.validate(\r\n      {\r\n        firstname,\r\n        lastname,\r\n        email,\r\n        tenor,\r\n        amount,\r\n      },\r\n      Schema.loanSchema,\r\n    );\r\n    if (error) {\r\n      res.status(400).send({ error: error.details[0].message });\r\n    } else {\r\n      const checkloan = model.findEmail(email);\r\n      if (checkloan) {\r\n        return res.status(400).json({\r\n          status: 400,\r\n          message: 'loan already exist',\r\n        });\r\n      }\r\n\r\n      const loanInfo = model.createLoan(req.body);\r\n      return res.status(200).json({\r\n        status: 200,\r\n        message: 'loan created successfully',\r\n       loanInfo,\r\n      });\r\n    }\r\n  }\r\n\r\n  // update function (patch)\r\n  static verifyloan(req, res) {\r\n    const { id } = req.params;\r\n    const { status } = req.body;\r\n    const { error, value } = joi.validate(\r\n      {\r\n        status,\r\n      },\r\n      Schema.approveSchema,\r\n    );\r\n    if (error) {\r\n      res.status(400).send({ error: error.details[0].message });\r\n    } else {\r\n      const getloan = model.findOne(id);\r\n      if (getloan) {\r\n        (getloan.status = status);\r\n        return res.status(201).json({\r\n          status: 201,\r\n          message: 'loan is approved succesfully',\r\n          getloan,\r\n        });\r\n      }\r\n      res.status(400).json({\r\n        status: 400,\r\n        error: \"can't find that loan with that id\",\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  // get loan by id\r\n  static getOneloan(req, res) {\r\n    const { id } = req.params;\r\n    const findloan = model.findOne(id);\r\n\r\n    if (findloan) {\r\n      return res.status(200).json({\r\n        status: 400,\r\n        message: 'one loan found',\r\n        findloan,\r\n      });\r\n    }\r\n    res.status(400).json({\r\n      status: 400,\r\n      error: 'no loan found with that id',\r\n    });\r\n  }\r\n\r\n  static deleteloan(req, res) {\r\n    const { id } = req.params;\r\n    const findloan = model.findLoan(id);\r\n    if (findloan > -1) {\r\n      model.deleteLoan(id);\r\n      res.status(200).json({\r\n        status: 200,\r\n        message: 'loan successfully deleted',\r\n      });\r\n    } else {\r\n      res.status(400).json({\r\n        status: 400,\r\n        error: 'could not find that loan',\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default loansController;\r\n"]}