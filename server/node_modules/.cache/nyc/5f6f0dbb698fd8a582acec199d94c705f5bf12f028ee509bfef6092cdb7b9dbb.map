{"version":3,"sources":["authentication.js"],"names":["encodeToken","user","payload","expiration","add","unix","iat","sub","token","jwt","encode","decodeToken","decoded","decode","accessTokenRequired","req","res","next","headers","undefined","status","send","error","now","decodedToken","body","userId","isadmin","adminTokenRequired"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAGA,IAAMA,cAAc,SAAdA,WAAc,CAACC,IAAD,EAAU;AAC5B,MAAMC,UAAU;AACdC,gBAAY,wBACTC,GADS,CACL,CADK,EACF,MADE,EAETC,IAFS,EADE;AAIdC,SAAK,wBAASD,IAAT,EAJS;AAKdE,SAAKN;AALS,GAAhB;AAOA,MAAMO,QAAQC,oBAAIC,MAAJ,CAAWR,OAAX,EAAoB,QAApB,CAAd;AACA,SAAOM,KAAP;AACD,CAVD;;AAYA,IAAMG,cAAc,SAAdA,WAAc,CAACH,KAAD,EAAW;AAC7B,MAAMI,UAAUH,oBAAII,MAAJ,CAAWL,KAAX,EAAkB,QAAlB,CAAhB;AACA,SAAOI,OAAP;AACD,CAHD;AAIA;AACA,IAAME,sBAAsB,SAAtBA,mBAAsB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,MACtCT,KADsC,GAC5BO,IAAIG,OADwB,CACtCV,KADsC;;AAE9C,MAAGA,SAAO,EAAV,EAAa;AACX,QAAIA,SAASW,SAAT,IAAsBX,SAAS,IAAnC,EAAyC;AACvCQ,UAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,gBAAO,GADY;AAEnBE,eAAO,0CAFY,EAArB;AAGD,KAJD,MAIO;AACL,UAAMC,MAAM,wBAASlB,IAAT,EAAZ;AACA,UAAMmB,eAAeb,YAAYH,KAAZ,CAArB;AACA,UAAIe,MAAMC,aAAarB,UAAvB,EAAmC;AACjCa,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,eAAT,EAArB;AACD,OAFD,MAEO;AACLP,YAAIU,IAAJ,CAASC,MAAT,GAAkBF,aAAajB,GAAb,CAAiBmB,MAAnC;AACAX,YAAIU,IAAJ,CAASE,OAAT,GAAmBH,aAAajB,GAAb,CAAiBoB,OAApC;AACAV;AACD;AAEF;AACF,GAjBD,MAkBI;AACFD,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,yCAAT,EAArB;AACD;AAGF,CAzBD;;AA2BA,IAAMM,qBAAqB,SAArBA,kBAAqB,CAACb,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7C,MAAMT,QAAQO,IAAIG,OAAJ,CAAYV,KAA1B;AACA,MAAGA,SAAO,EAAV,EAAa;AACb,QAAIA,SAASW,SAAb,EAAwB;AACtB,UAAMI,MAAM,wBAASlB,IAAT,EAAZ;AACA,UAAMmB,eAAeb,YAAYH,KAAZ,CAArB;AACA,UAAIe,MAAMC,aAAarB,UAAvB,EAAmC;AACjCa,YAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,eAAT,EAArB;AACD,OAFD,MAEO;AACLP,YAAIU,IAAJ,CAASC,MAAT,GAAkBF,aAAajB,GAAb,CAAiBmB,MAAnC;AACAX,YAAIU,IAAJ,CAASE,OAAT,GAAmBH,aAAajB,GAAb,CAAiBoB,OAApC;AACA,YAAIH,aAAajB,GAAb,CAAiBoB,OAAjB,IAA4B,MAAhC,EAAwC;AACtCV;AACD,SAFD,MAEO;AACLD,cAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,oBAAO,GADY;AAEnBE,mBAAO,wCAFY,EAArB;AAGD;AACF;AACF;AACF,GAlBC,MAmBE;AACFN,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,yCAAT,EAArB;AACD;AACA,CAxBD;kBAyBe,EAAER,wCAAF,EAAuBd,wBAAvB,EAAoC4B,sCAApC,E","file":"authentication.js","sourceRoot":"C:/Users/PIH/Documents/challenge/helpers","sourcesContent":["import jwt from 'jwt-simple';\r\nimport moment from 'moment';\r\n\r\n\r\nconst encodeToken = (user) => {\r\n  const payload = {\r\n    expiration: moment()\r\n      .add(2, 'hour')\r\n      .unix(),\r\n    iat: moment().unix(),\r\n    sub: user,\r\n  };\r\n  const token = jwt.encode(payload, 'secret');\r\n  return token;\r\n};\r\n\r\nconst decodeToken = (token) => {\r\n  const decoded = jwt.decode(token, 'secret');\r\n  return decoded;\r\n};\r\n// Access token required for a user\r\nconst accessTokenRequired = (req, res, next) => {\r\n  const { token } = req.headers;\r\n  if(token!=''){\r\n    if (token == undefined || token == null) {\r\n      res.status(403).send({\r\n        status:403,\r\n        error: 'Not authorized to this page Login first!' });\r\n    } else {\r\n      const now = moment().unix();\r\n      const decodedToken = decodeToken(token);\r\n      if (now > decodedToken.expiration) {\r\n        res.status(400).send({ error: 'Token expired' });\r\n      } else {\r\n        req.body.userId = decodedToken.sub.userId;\r\n        req.body.isadmin = decodedToken.sub.isadmin;\r\n        next();\r\n      }\r\n    \r\n    }\r\n  }\r\n  else{\r\n    res.status(400).send({ error: 'Token needed to get access to this page' });\r\n  }\r\n  \r\n  \r\n};\r\n\r\nconst adminTokenRequired = (req, res, next) => {\r\n  const token = req.headers.token;\r\n  if(token!=''){\r\n  if (token != undefined) {\r\n    const now = moment().unix();\r\n    const decodedToken = decodeToken(token);\r\n    if (now > decodedToken.expiration) {\r\n      res.status(400).send({ error: 'Token expired' });\r\n    } else {\r\n      req.body.userId = decodedToken.sub.userId;\r\n      req.body.isadmin = decodedToken.sub.isadmin;\r\n      if (decodedToken.sub.isadmin == 'true') {\r\n        next();\r\n      } else {\r\n        res.status(403).send({\r\n          status:403,\r\n          error: 'Not authorized to this page admin only' });\r\n      }\r\n    }\r\n  } \r\n}\r\nelse{\r\n  res.status(400).send({ error: 'Token needed to get access to this page' });\r\n}\r\n};\r\nexport default { accessTokenRequired, encodeToken, adminTokenRequired };"]}