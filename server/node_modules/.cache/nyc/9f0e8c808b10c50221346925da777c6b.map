{"version":3,"sources":["candidatecontroller.js"],"names":["controllers","Getcandidate","req","res","candidateId","params","id","candidate","queries","getSpecificandidate","then","response","length","status","send","message","catch","console","log","error","createcandidates","party","body","user","Schema","candidateSchema","getSpecificParty","rows","json","office","getSpecificoffice","getoneuser","candidatecheck","data"],"mappings":"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","file":"candidatecontroller.js","sourceRoot":"C:/Users/PIH/Documents/andela curriculum/pratice/politico2/controller","sourcesContent":["// src/usingDB/controllers/Reflection.js\r\nimport joi from 'joi';\r\nimport uuidv1 from 'uuid/v1';\r\n//import candidate from '../models/candidatemodel';\r\nimport queries from '../db/Queries';\r\nimport execute from '../src/connection';\r\nimport Schema from '../helpers/Validationparty';\r\n\r\nconst controllers = {};\r\n\r\n\r\n// fetch a candidates by id  method\r\nconst Getcandidate = (req, res) => {\r\n  const candidateId = req.params.id;\r\nconst candidate = execute(queries.getSpecificandidate,[candidateId]);\r\ncandidate\r\n.then((response) => {\r\n  // send it.\r\n  if (response.length >=1) {\r\n    res.status(200).send(response[0]);\r\n  } else {\r\n    // send the error on page\r\n    res.status(404).send({ message:'sorry no candidate  found it is empty' });\r\n  }\r\n})\r\n.catch(error => console.log(error));\r\n};\r\n// create candidates\r\nconst createcandidates = (req, res) => {\r\n\t// Office id\r\n\tconst { id } = req.params;\r\n\tconst candidate = {\r\n\t\tparty: req.body.party,\r\n\t\tuser: req.body.user\r\n  }\r\n\r\n  Schema.candidateSchema\r\n\t// Check if party exists\r\n\tconst party = execute(queries.getSpecificParty, [candidate.party]);\r\n\tif (party.rows.length === 0) {\r\n\t\treturn res.status(400).json({\r\n\t\t\tstatus: 400,\r\n\t\t\terror: 'The party of id does not exist.'\r\n\t\t});\r\n\t}\r\n\t// Check if office exists\r\n\tconst office = execute(queries.getSpecificoffice, [id]);\r\n\tif (office.rows.length === 0) {\r\n\t\treturn res.status(400).json({\r\n\t\t\tstatus: 400,\r\n\t\t\terror: 'The office of id does not exist.'\r\n\t\t});\r\n\t}\r\n\t// Check if user exists\r\n\tconst user = execute(getoneuser, [candidate.user]);\r\n\tif (user.rows.length === 0) {\r\n\t\treturn res.status(400).json({\r\n\t\t\tstatus: 400,\r\n\t\t\terror: 'The user of id does not exist.'\r\n\t\t});\r\n\t}\r\n\t// Check if candidate (office, party and user) is already registered\r\n\tconst candidatecheck = execute('SELECT * FROM candidates WHERE office=$1 and party=$2 and candidate=$3',\r\n\t\t[\r\n\t\t\tid,\r\n\t\t\tcandidate.party,\r\n\t\t\tcandidate.user\r\n\t\t]);\r\n\tif (candidatecheck.rows.length !== 0) {\r\n\t\treturn res.status(409).json({\r\n\t\t\tstatus: 409,\r\n\t\t\terror: 'The candidate is already registered.'\r\n\t\t});\r\n\t}\r\n\t// Register candidate\r\n\ttry {\r\n\t\texecute('INSERT INTO candidates(office, candidates, party) VALUES($1,$2,$3)',\r\n\t\t[\r\n\t\t\tid,\r\n\t\t\tcandidate.party,\r\n\t\t\tcandidate.user\r\n\t\t]);\r\n\t\treturn res.status(201).json({\r\n\t\t\tstatus: 201,\r\n\t\t\tdata: [\r\n\t\t\t  {\r\n\t\t\t  \toffice: id,\r\n\t\t\t  \tuser: candidate.user\r\n\t\t\t  }\r\n\t\t\t]\r\n\t\t});\r\n\t} catch (error) {\r\n\t\treturn res.status(404).json({\r\n\t\t\tstatus: 404,\r\n\t\t\terror: error\r\n\t\t});\r\n\t}\r\n};\r\n\r\n\r\n\r\ncontrollers.createcandidates = createcandidates;\r\ncontrollers.Getcandidate=Getcandidate;\r\n\r\nexport default controllers;"]}