{"version":3,"sources":["repayments.js"],"names":["Payment","payments","LoanId","foundLoan","loans","findOne","paymentId","foundPayment","find","payment","id","parseInt","Id","paymentloan","getloanpayments","loanId","data","loanid","payloan","fetchOne","insertpayment","length","createdOn","moment","utc","format","amount","monthlyinstallment","paymentInstallment","paidamount","balance","parseFloat","push"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAGA;IACMA,O;AACJ,qBAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACD;;;;6BAEQC,M,EAAQ;AACf,UAAMC,YAAYC,gBAAMC,OAAN,CAAcH,MAAd,CAAlB;AACA,aAAOC,SAAP;AACD;;AAED;;;;oCACgBG,S,EAAW;AACzB,UAAMC,eAAe,KAAKN,QAAL,CAAcO,IAAd,CAAmB;AAAA,eAAWC,QAAQC,EAAR,KAAeC,SAASL,SAAT,CAA1B;AAAA,OAAnB,CAArB;AACA,aAAOC,YAAP;AACD;;;sCAEiBK,E,EAAI;AACpB,UAAMC,cAAc,KAAKZ,QAAL,CAAcO,IAAd,CAAmB;AAAA,eAAmBM,gBAAgBC,MAAhB,IAA0BJ,SAASC,EAAT,CAA7C;AAAA,OAAnB,CAApB;AACA,aAAOC,WAAP;AACD;;;qCAEgBG,I,EAAMC,M,EAAQ;AAC7B,UAAMC,UAAU,KAAKC,QAAL,CAAcR,SAASM,MAAT,CAAd,CAAhB;AACA,UAAMG,gBAAgB;AACpBV,YAAI,KAAKT,QAAL,CAAcoB,MAAd,GAAuB,CADP;AAEpBC,mBAAWC,iBAAOC,GAAP,GAAaC,MAAb,CAAoB,qBAApB,CAFS;AAGpBV,gBAAQG,QAAQR,EAHI;AAIpBgB,gBAAQR,QAAQQ,MAJI;AAKpBC,4BAAoBT,QAAQU,kBALR;AAMpBC,oBAAYb,KAAKa,UANG;AAOpBC,iBAASC,WAAWb,QAAQY,OAAnB,IAA8BC,WAAWf,KAAKa,UAAhB;;AAPnB,OAAtB;AAUA,WAAK5B,QAAL,CAAc+B,IAAd,CAAmBZ,aAAnB;AACAF,cAAQY,OAAR,GAAkBC,WAAWb,QAAQY,OAAnB,IAA8BC,WAAWf,KAAKa,UAAhB,CAAhD;AACA,aAAOT,aAAP;AACD;;;;;;kBAIY,IAAIpB,OAAJ,E","file":"repayments.js","sourceRoot":"C:/Users/PIH/Documents/challenge/models","sourcesContent":["import moment from 'moment';\nimport model from './loans';\nimport loans from './loans';\n\n// Define a class for creating loan\nclass Payment {\n  constructor() {\n    this.payments = [];\n  }\n\n  fetchOne(LoanId) {\n    const foundLoan = loans.findOne(LoanId);\n    return foundLoan;\n  }\n\n  // Fetch repayments by id\n  findOnepayments(paymentId) {\n    const foundPayment = this.payments.find(payment => payment.id === parseInt(paymentId));\n    return foundPayment;\n  }\n\n  findpaymentloanid(Id) {\n    const paymentloan = this.payments.find(getloanpayments => getloanpayments.loanId == parseInt(Id));\n    return paymentloan;\n  }\n\n  createRepayments(data, loanid) {\n    const payloan = this.fetchOne(parseInt(loanid));\n    const insertpayment = {\n      id: this.payments.length + 1,\n      createdOn: moment.utc().format('DD-MM-YYYY HH:MM:SS'),\n      loanId: payloan.id,\n      amount: payloan.amount,\n      monthlyinstallment: payloan.paymentInstallment,\n      paidamount: data.paidamount,\n      balance: parseFloat(payloan.balance) - parseFloat(data.paidamount),\n\n    };\n    this.payments.push(insertpayment);\n    payloan.balance = parseFloat(payloan.balance) - parseFloat(data.paidamount);\n    return insertpayment;\n  }\n}\n\n\nexport default new Payment();\n"]}