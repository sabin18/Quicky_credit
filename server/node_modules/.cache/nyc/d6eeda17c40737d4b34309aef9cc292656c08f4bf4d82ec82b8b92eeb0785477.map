{"version":3,"sources":["inputvalidation.js"],"names":["userSchema","joi","object","keys","firstname","string","alphanum","min","max","required","lastname","address","password","regex","email","minDomainAtomas","verifySchema","status","valid","trim","paidamountSchema","paidamount","number","integer","loanSchema","tenor","amount","approveSchema"],"mappings":";;;;;;AAAA;;;;;;AAGA,IAAMA,aAAaC,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACnCC,aAAWH,cAAII,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,EAAnC,EACRC,QADQ,EADwB;AAGnCC,YAAUT,cAAII,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,EAAnC,EACPC,QADO,EAHyB;AAKnCE,WAASV,cAAII,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,EAAnC,EACNC,QADM,EAL0B;AAOnCG,YAAUX,cAAII,MAAJ,GAAaQ,KAAb,CAAmB,qBAAnB,EAA0CJ,QAA1C,EAPyB;AAQnCK,SAAOb,cAAII,MAAJ,GAAaS,KAAb,CAAmB,EAAEC,iBAAiB,CAAnB,EAAnB,EAA2CN,QAA3C;;AAR4B,CAAlB,CAAnB;;AAaA,IAAMO,eAAef,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACrCc,UAAQhB,cAAII,MAAJ,GAAaE,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,CAAxB,EAA2BU,KAA3B,CAAiC,CAAC,UAAD,CAAjC,EAA+CT,QAA/C,GAA0DU,IAA1D;;AAD6B,CAAlB,CAArB;;AAKA,IAAMC,mBAAmBnB,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACzCkB,cAAWpB,cAAIqB,MAAJ,GAAaC,OAAb,GAAuBd,QAAvB;;AAD8B,CAAlB,CAAzB;;AAKA,IAAMe,aAAavB,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACnCC,aAAWH,cAAII,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,EAAnC,EAAwCC,QAAxC,EADwB;AAEnCC,YAAUT,cAAII,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,CAA5B,EAA+BC,GAA/B,CAAmC,EAAnC,EAAuCC,QAAvC,EAFyB;AAGnCK,SAAOb,cAAII,MAAJ,GAAaS,KAAb,GAAqBL,QAArB,EAH4B;AAInCgB,SAAOxB,cAAIqB,MAAJ,GAAaC,OAAb,GAAuBhB,GAAvB,CAA2B,CAA3B,EAA8BC,GAA9B,CAAkC,EAAlC,EAAsCC,QAAtC,EAJ4B;AAKnCiB,UAAQzB,cAAIqB,MAAJ,GAAaC,OAAb,GAAuBd,QAAvB;AAL2B,CAAlB,CAAnB;;AAQA,IAAMkB,gBAAgB1B,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AACtCc,UAAQhB,cAAII,MAAJ,GAAaE,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,CAAxB,EAA2BU,KAA3B,CAAiC,CAAC,UAAD,CAAjC,EAA+CT,QAA/C,GAA0DU,IAA1D;AAD8B,CAAlB,CAAtB;;kBAKe,EAAEnB,sBAAF,EAAaoB,kCAAb,EAA8BJ,0BAA9B,EAA2CQ,sBAA3C,EAAsDG,4BAAtD,E","file":"inputvalidation.js","sourceRoot":"C:/Users/PIH/Documents/challenge/helpers","sourcesContent":["import joi from 'joi';\r\n\r\n\r\nconst userSchema = joi.object().keys({\r\n  firstname: joi.string().alphanum().min(3).max(15)\r\n    .required(),\r\n  lastname: joi.string().alphanum().min(3).max(15)\r\n    .required(),\r\n  address: joi.string().alphanum().min(3).max(15)\r\n    .required(),\r\n  password: joi.string().regex(/^[a-zA-Z0-9]{3,30}$/).required(),\r\n  email: joi.string().email({ minDomainAtomas: 2 }).required(),\r\n  \r\n});\r\n\r\n\r\nconst verifySchema = joi.object().keys({\r\n  status: joi.string().min(8).max(8).valid(['verified']).required().trim(),\r\n    \r\n});\r\n\r\nconst paidamountSchema = joi.object().keys({\r\n  paidamount:joi.number().integer().required(),\r\n    \r\n});\r\n\r\nconst loanSchema = joi.object().keys({\r\n  firstname: joi.string().alphanum().min(3).max(15) .required(),\r\n  lastname: joi.string().alphanum().min(3).max(15).required(),\r\n  email: joi.string().email().required(),\r\n  tenor: joi.number().integer().min(1).max(12).required(),\r\n  amount: joi.number().integer().required(),\r\n});\r\n\r\nconst approveSchema = joi.object().keys({\r\n  status: joi.string().min(7).max(7).valid(['approved']).required().trim(),\r\n});\r\n\r\n\r\nexport default { userSchema,paidamountSchema,verifySchema,loanSchema,approveSchema};\r\n"]}